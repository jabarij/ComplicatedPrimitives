### YamlMime:XRefMap
sorted: true
references:
- uid: ComplicatedPrimitives
  name: ComplicatedPrimitives
  href: api/ComplicatedPrimitives.html
  commentId: N:ComplicatedPrimitives
  fullName: ComplicatedPrimitives
  nameWithType: ComplicatedPrimitives
- uid: ComplicatedPrimitives.CaseInsensitiveString
  name: CaseInsensitiveString
  href: api/ComplicatedPrimitives.CaseInsensitiveString.html
  commentId: T:ComplicatedPrimitives.CaseInsensitiveString
  fullName: ComplicatedPrimitives.CaseInsensitiveString
  nameWithType: CaseInsensitiveString
- uid: ComplicatedPrimitives.CaseInsensitiveString.#ctor(System.String)
  name: CaseInsensitiveString(String)
  href: api/ComplicatedPrimitives.CaseInsensitiveString.html#ComplicatedPrimitives_CaseInsensitiveString__ctor_System_String_
  commentId: M:ComplicatedPrimitives.CaseInsensitiveString.#ctor(System.String)
  fullName: ComplicatedPrimitives.CaseInsensitiveString.CaseInsensitiveString(System.String)
  nameWithType: CaseInsensitiveString.CaseInsensitiveString(String)
- uid: ComplicatedPrimitives.CaseInsensitiveString.#ctor*
  name: CaseInsensitiveString
  href: api/ComplicatedPrimitives.CaseInsensitiveString.html#ComplicatedPrimitives_CaseInsensitiveString__ctor_
  commentId: Overload:ComplicatedPrimitives.CaseInsensitiveString.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.CaseInsensitiveString.CaseInsensitiveString
  nameWithType: CaseInsensitiveString.CaseInsensitiveString
- uid: ComplicatedPrimitives.CaseInsensitiveString.Empty
  name: Empty
  href: api/ComplicatedPrimitives.CaseInsensitiveString.html#ComplicatedPrimitives_CaseInsensitiveString_Empty
  commentId: F:ComplicatedPrimitives.CaseInsensitiveString.Empty
  fullName: ComplicatedPrimitives.CaseInsensitiveString.Empty
  nameWithType: CaseInsensitiveString.Empty
- uid: ComplicatedPrimitives.CaseInsensitiveString.Equals(ComplicatedPrimitives.CaseInsensitiveString)
  name: Equals(CaseInsensitiveString)
  href: api/ComplicatedPrimitives.CaseInsensitiveString.html#ComplicatedPrimitives_CaseInsensitiveString_Equals_ComplicatedPrimitives_CaseInsensitiveString_
  commentId: M:ComplicatedPrimitives.CaseInsensitiveString.Equals(ComplicatedPrimitives.CaseInsensitiveString)
  fullName: ComplicatedPrimitives.CaseInsensitiveString.Equals(ComplicatedPrimitives.CaseInsensitiveString)
  nameWithType: CaseInsensitiveString.Equals(CaseInsensitiveString)
- uid: ComplicatedPrimitives.CaseInsensitiveString.Equals(ComplicatedPrimitives.CaseInsensitiveString,ComplicatedPrimitives.CaseInsensitiveStringComparison)
  name: Equals(CaseInsensitiveString, CaseInsensitiveStringComparison)
  href: api/ComplicatedPrimitives.CaseInsensitiveString.html#ComplicatedPrimitives_CaseInsensitiveString_Equals_ComplicatedPrimitives_CaseInsensitiveString_ComplicatedPrimitives_CaseInsensitiveStringComparison_
  commentId: M:ComplicatedPrimitives.CaseInsensitiveString.Equals(ComplicatedPrimitives.CaseInsensitiveString,ComplicatedPrimitives.CaseInsensitiveStringComparison)
  fullName: ComplicatedPrimitives.CaseInsensitiveString.Equals(ComplicatedPrimitives.CaseInsensitiveString, ComplicatedPrimitives.CaseInsensitiveStringComparison)
  nameWithType: CaseInsensitiveString.Equals(CaseInsensitiveString, CaseInsensitiveStringComparison)
- uid: ComplicatedPrimitives.CaseInsensitiveString.Equals(System.Nullable{ComplicatedPrimitives.CaseInsensitiveString},System.Nullable{ComplicatedPrimitives.CaseInsensitiveString},ComplicatedPrimitives.CaseInsensitiveStringComparison)
  name: Equals(Nullable<CaseInsensitiveString>, Nullable<CaseInsensitiveString>, CaseInsensitiveStringComparison)
  href: api/ComplicatedPrimitives.CaseInsensitiveString.html#ComplicatedPrimitives_CaseInsensitiveString_Equals_System_Nullable_ComplicatedPrimitives_CaseInsensitiveString__System_Nullable_ComplicatedPrimitives_CaseInsensitiveString__ComplicatedPrimitives_CaseInsensitiveStringComparison_
  commentId: M:ComplicatedPrimitives.CaseInsensitiveString.Equals(System.Nullable{ComplicatedPrimitives.CaseInsensitiveString},System.Nullable{ComplicatedPrimitives.CaseInsensitiveString},ComplicatedPrimitives.CaseInsensitiveStringComparison)
  name.vb: Equals(Nullable(Of CaseInsensitiveString), Nullable(Of CaseInsensitiveString), CaseInsensitiveStringComparison)
  fullName: ComplicatedPrimitives.CaseInsensitiveString.Equals(System.Nullable<ComplicatedPrimitives.CaseInsensitiveString>, System.Nullable<ComplicatedPrimitives.CaseInsensitiveString>, ComplicatedPrimitives.CaseInsensitiveStringComparison)
  fullName.vb: ComplicatedPrimitives.CaseInsensitiveString.Equals(System.Nullable(Of ComplicatedPrimitives.CaseInsensitiveString), System.Nullable(Of ComplicatedPrimitives.CaseInsensitiveString), ComplicatedPrimitives.CaseInsensitiveStringComparison)
  nameWithType: CaseInsensitiveString.Equals(Nullable<CaseInsensitiveString>, Nullable<CaseInsensitiveString>, CaseInsensitiveStringComparison)
  nameWithType.vb: CaseInsensitiveString.Equals(Nullable(Of CaseInsensitiveString), Nullable(Of CaseInsensitiveString), CaseInsensitiveStringComparison)
- uid: ComplicatedPrimitives.CaseInsensitiveString.Equals(System.Object)
  name: Equals(Object)
  href: api/ComplicatedPrimitives.CaseInsensitiveString.html#ComplicatedPrimitives_CaseInsensitiveString_Equals_System_Object_
  commentId: M:ComplicatedPrimitives.CaseInsensitiveString.Equals(System.Object)
  fullName: ComplicatedPrimitives.CaseInsensitiveString.Equals(System.Object)
  nameWithType: CaseInsensitiveString.Equals(Object)
- uid: ComplicatedPrimitives.CaseInsensitiveString.Equals(System.String)
  name: Equals(String)
  href: api/ComplicatedPrimitives.CaseInsensitiveString.html#ComplicatedPrimitives_CaseInsensitiveString_Equals_System_String_
  commentId: M:ComplicatedPrimitives.CaseInsensitiveString.Equals(System.String)
  fullName: ComplicatedPrimitives.CaseInsensitiveString.Equals(System.String)
  nameWithType: CaseInsensitiveString.Equals(String)
- uid: ComplicatedPrimitives.CaseInsensitiveString.Equals*
  name: Equals
  href: api/ComplicatedPrimitives.CaseInsensitiveString.html#ComplicatedPrimitives_CaseInsensitiveString_Equals_
  commentId: Overload:ComplicatedPrimitives.CaseInsensitiveString.Equals
  isSpec: "True"
  fullName: ComplicatedPrimitives.CaseInsensitiveString.Equals
  nameWithType: CaseInsensitiveString.Equals
- uid: ComplicatedPrimitives.CaseInsensitiveString.GetHashCode
  name: GetHashCode()
  href: api/ComplicatedPrimitives.CaseInsensitiveString.html#ComplicatedPrimitives_CaseInsensitiveString_GetHashCode
  commentId: M:ComplicatedPrimitives.CaseInsensitiveString.GetHashCode
  fullName: ComplicatedPrimitives.CaseInsensitiveString.GetHashCode()
  nameWithType: CaseInsensitiveString.GetHashCode()
- uid: ComplicatedPrimitives.CaseInsensitiveString.GetHashCode*
  name: GetHashCode
  href: api/ComplicatedPrimitives.CaseInsensitiveString.html#ComplicatedPrimitives_CaseInsensitiveString_GetHashCode_
  commentId: Overload:ComplicatedPrimitives.CaseInsensitiveString.GetHashCode
  isSpec: "True"
  fullName: ComplicatedPrimitives.CaseInsensitiveString.GetHashCode
  nameWithType: CaseInsensitiveString.GetHashCode
- uid: ComplicatedPrimitives.CaseInsensitiveString.IsNullOrEmpty(ComplicatedPrimitives.CaseInsensitiveString)
  name: IsNullOrEmpty(CaseInsensitiveString)
  href: api/ComplicatedPrimitives.CaseInsensitiveString.html#ComplicatedPrimitives_CaseInsensitiveString_IsNullOrEmpty_ComplicatedPrimitives_CaseInsensitiveString_
  commentId: M:ComplicatedPrimitives.CaseInsensitiveString.IsNullOrEmpty(ComplicatedPrimitives.CaseInsensitiveString)
  fullName: ComplicatedPrimitives.CaseInsensitiveString.IsNullOrEmpty(ComplicatedPrimitives.CaseInsensitiveString)
  nameWithType: CaseInsensitiveString.IsNullOrEmpty(CaseInsensitiveString)
- uid: ComplicatedPrimitives.CaseInsensitiveString.IsNullOrEmpty(System.Nullable{ComplicatedPrimitives.CaseInsensitiveString})
  name: IsNullOrEmpty(Nullable<CaseInsensitiveString>)
  href: api/ComplicatedPrimitives.CaseInsensitiveString.html#ComplicatedPrimitives_CaseInsensitiveString_IsNullOrEmpty_System_Nullable_ComplicatedPrimitives_CaseInsensitiveString__
  commentId: M:ComplicatedPrimitives.CaseInsensitiveString.IsNullOrEmpty(System.Nullable{ComplicatedPrimitives.CaseInsensitiveString})
  name.vb: IsNullOrEmpty(Nullable(Of CaseInsensitiveString))
  fullName: ComplicatedPrimitives.CaseInsensitiveString.IsNullOrEmpty(System.Nullable<ComplicatedPrimitives.CaseInsensitiveString>)
  fullName.vb: ComplicatedPrimitives.CaseInsensitiveString.IsNullOrEmpty(System.Nullable(Of ComplicatedPrimitives.CaseInsensitiveString))
  nameWithType: CaseInsensitiveString.IsNullOrEmpty(Nullable<CaseInsensitiveString>)
  nameWithType.vb: CaseInsensitiveString.IsNullOrEmpty(Nullable(Of CaseInsensitiveString))
- uid: ComplicatedPrimitives.CaseInsensitiveString.IsNullOrEmpty*
  name: IsNullOrEmpty
  href: api/ComplicatedPrimitives.CaseInsensitiveString.html#ComplicatedPrimitives_CaseInsensitiveString_IsNullOrEmpty_
  commentId: Overload:ComplicatedPrimitives.CaseInsensitiveString.IsNullOrEmpty
  isSpec: "True"
  fullName: ComplicatedPrimitives.CaseInsensitiveString.IsNullOrEmpty
  nameWithType: CaseInsensitiveString.IsNullOrEmpty
- uid: ComplicatedPrimitives.CaseInsensitiveString.IsNullOrWhiteSpace(ComplicatedPrimitives.CaseInsensitiveString)
  name: IsNullOrWhiteSpace(CaseInsensitiveString)
  href: api/ComplicatedPrimitives.CaseInsensitiveString.html#ComplicatedPrimitives_CaseInsensitiveString_IsNullOrWhiteSpace_ComplicatedPrimitives_CaseInsensitiveString_
  commentId: M:ComplicatedPrimitives.CaseInsensitiveString.IsNullOrWhiteSpace(ComplicatedPrimitives.CaseInsensitiveString)
  fullName: ComplicatedPrimitives.CaseInsensitiveString.IsNullOrWhiteSpace(ComplicatedPrimitives.CaseInsensitiveString)
  nameWithType: CaseInsensitiveString.IsNullOrWhiteSpace(CaseInsensitiveString)
- uid: ComplicatedPrimitives.CaseInsensitiveString.IsNullOrWhiteSpace(System.Nullable{ComplicatedPrimitives.CaseInsensitiveString})
  name: IsNullOrWhiteSpace(Nullable<CaseInsensitiveString>)
  href: api/ComplicatedPrimitives.CaseInsensitiveString.html#ComplicatedPrimitives_CaseInsensitiveString_IsNullOrWhiteSpace_System_Nullable_ComplicatedPrimitives_CaseInsensitiveString__
  commentId: M:ComplicatedPrimitives.CaseInsensitiveString.IsNullOrWhiteSpace(System.Nullable{ComplicatedPrimitives.CaseInsensitiveString})
  name.vb: IsNullOrWhiteSpace(Nullable(Of CaseInsensitiveString))
  fullName: ComplicatedPrimitives.CaseInsensitiveString.IsNullOrWhiteSpace(System.Nullable<ComplicatedPrimitives.CaseInsensitiveString>)
  fullName.vb: ComplicatedPrimitives.CaseInsensitiveString.IsNullOrWhiteSpace(System.Nullable(Of ComplicatedPrimitives.CaseInsensitiveString))
  nameWithType: CaseInsensitiveString.IsNullOrWhiteSpace(Nullable<CaseInsensitiveString>)
  nameWithType.vb: CaseInsensitiveString.IsNullOrWhiteSpace(Nullable(Of CaseInsensitiveString))
- uid: ComplicatedPrimitives.CaseInsensitiveString.IsNullOrWhiteSpace*
  name: IsNullOrWhiteSpace
  href: api/ComplicatedPrimitives.CaseInsensitiveString.html#ComplicatedPrimitives_CaseInsensitiveString_IsNullOrWhiteSpace_
  commentId: Overload:ComplicatedPrimitives.CaseInsensitiveString.IsNullOrWhiteSpace
  isSpec: "True"
  fullName: ComplicatedPrimitives.CaseInsensitiveString.IsNullOrWhiteSpace
  nameWithType: CaseInsensitiveString.IsNullOrWhiteSpace
- uid: ComplicatedPrimitives.CaseInsensitiveString.op_Equality(ComplicatedPrimitives.CaseInsensitiveString,ComplicatedPrimitives.CaseInsensitiveString)
  name: Equality(CaseInsensitiveString, CaseInsensitiveString)
  href: api/ComplicatedPrimitives.CaseInsensitiveString.html#ComplicatedPrimitives_CaseInsensitiveString_op_Equality_ComplicatedPrimitives_CaseInsensitiveString_ComplicatedPrimitives_CaseInsensitiveString_
  commentId: M:ComplicatedPrimitives.CaseInsensitiveString.op_Equality(ComplicatedPrimitives.CaseInsensitiveString,ComplicatedPrimitives.CaseInsensitiveString)
  fullName: ComplicatedPrimitives.CaseInsensitiveString.Equality(ComplicatedPrimitives.CaseInsensitiveString, ComplicatedPrimitives.CaseInsensitiveString)
  nameWithType: CaseInsensitiveString.Equality(CaseInsensitiveString, CaseInsensitiveString)
- uid: ComplicatedPrimitives.CaseInsensitiveString.op_Equality*
  name: Equality
  href: api/ComplicatedPrimitives.CaseInsensitiveString.html#ComplicatedPrimitives_CaseInsensitiveString_op_Equality_
  commentId: Overload:ComplicatedPrimitives.CaseInsensitiveString.op_Equality
  isSpec: "True"
  fullName: ComplicatedPrimitives.CaseInsensitiveString.Equality
  nameWithType: CaseInsensitiveString.Equality
- uid: ComplicatedPrimitives.CaseInsensitiveString.op_Implicit(ComplicatedPrimitives.CaseInsensitiveString)~System.String
  name: Implicit(CaseInsensitiveString to String)
  href: api/ComplicatedPrimitives.CaseInsensitiveString.html#ComplicatedPrimitives_CaseInsensitiveString_op_Implicit_ComplicatedPrimitives_CaseInsensitiveString__System_String
  commentId: M:ComplicatedPrimitives.CaseInsensitiveString.op_Implicit(ComplicatedPrimitives.CaseInsensitiveString)~System.String
  name.vb: Widening(CaseInsensitiveString to String)
  fullName: ComplicatedPrimitives.CaseInsensitiveString.Implicit(ComplicatedPrimitives.CaseInsensitiveString to System.String)
  fullName.vb: ComplicatedPrimitives.CaseInsensitiveString.Widening(ComplicatedPrimitives.CaseInsensitiveString to System.String)
  nameWithType: CaseInsensitiveString.Implicit(CaseInsensitiveString to String)
  nameWithType.vb: CaseInsensitiveString.Widening(CaseInsensitiveString to String)
- uid: ComplicatedPrimitives.CaseInsensitiveString.op_Implicit(System.Nullable{ComplicatedPrimitives.CaseInsensitiveString})~System.String
  name: Implicit(Nullable<CaseInsensitiveString> to String)
  href: api/ComplicatedPrimitives.CaseInsensitiveString.html#ComplicatedPrimitives_CaseInsensitiveString_op_Implicit_System_Nullable_ComplicatedPrimitives_CaseInsensitiveString___System_String
  commentId: M:ComplicatedPrimitives.CaseInsensitiveString.op_Implicit(System.Nullable{ComplicatedPrimitives.CaseInsensitiveString})~System.String
  name.vb: Widening(Nullable(Of CaseInsensitiveString) to String)
  fullName: ComplicatedPrimitives.CaseInsensitiveString.Implicit(System.Nullable<ComplicatedPrimitives.CaseInsensitiveString> to System.String)
  fullName.vb: ComplicatedPrimitives.CaseInsensitiveString.Widening(System.Nullable(Of ComplicatedPrimitives.CaseInsensitiveString) to System.String)
  nameWithType: CaseInsensitiveString.Implicit(Nullable<CaseInsensitiveString> to String)
  nameWithType.vb: CaseInsensitiveString.Widening(Nullable(Of CaseInsensitiveString) to String)
- uid: ComplicatedPrimitives.CaseInsensitiveString.op_Implicit(System.String)~ComplicatedPrimitives.CaseInsensitiveString
  name: Implicit(String to CaseInsensitiveString)
  href: api/ComplicatedPrimitives.CaseInsensitiveString.html#ComplicatedPrimitives_CaseInsensitiveString_op_Implicit_System_String__ComplicatedPrimitives_CaseInsensitiveString
  commentId: M:ComplicatedPrimitives.CaseInsensitiveString.op_Implicit(System.String)~ComplicatedPrimitives.CaseInsensitiveString
  name.vb: Widening(String to CaseInsensitiveString)
  fullName: ComplicatedPrimitives.CaseInsensitiveString.Implicit(System.String to ComplicatedPrimitives.CaseInsensitiveString)
  fullName.vb: ComplicatedPrimitives.CaseInsensitiveString.Widening(System.String to ComplicatedPrimitives.CaseInsensitiveString)
  nameWithType: CaseInsensitiveString.Implicit(String to CaseInsensitiveString)
  nameWithType.vb: CaseInsensitiveString.Widening(String to CaseInsensitiveString)
- uid: ComplicatedPrimitives.CaseInsensitiveString.op_Implicit*
  name: Implicit
  href: api/ComplicatedPrimitives.CaseInsensitiveString.html#ComplicatedPrimitives_CaseInsensitiveString_op_Implicit_
  commentId: Overload:ComplicatedPrimitives.CaseInsensitiveString.op_Implicit
  isSpec: "True"
  name.vb: Widening
  fullName: ComplicatedPrimitives.CaseInsensitiveString.Implicit
  fullName.vb: ComplicatedPrimitives.CaseInsensitiveString.Widening
  nameWithType: CaseInsensitiveString.Implicit
  nameWithType.vb: CaseInsensitiveString.Widening
- uid: ComplicatedPrimitives.CaseInsensitiveString.op_Inequality(ComplicatedPrimitives.CaseInsensitiveString,ComplicatedPrimitives.CaseInsensitiveString)
  name: Inequality(CaseInsensitiveString, CaseInsensitiveString)
  href: api/ComplicatedPrimitives.CaseInsensitiveString.html#ComplicatedPrimitives_CaseInsensitiveString_op_Inequality_ComplicatedPrimitives_CaseInsensitiveString_ComplicatedPrimitives_CaseInsensitiveString_
  commentId: M:ComplicatedPrimitives.CaseInsensitiveString.op_Inequality(ComplicatedPrimitives.CaseInsensitiveString,ComplicatedPrimitives.CaseInsensitiveString)
  fullName: ComplicatedPrimitives.CaseInsensitiveString.Inequality(ComplicatedPrimitives.CaseInsensitiveString, ComplicatedPrimitives.CaseInsensitiveString)
  nameWithType: CaseInsensitiveString.Inequality(CaseInsensitiveString, CaseInsensitiveString)
- uid: ComplicatedPrimitives.CaseInsensitiveString.op_Inequality*
  name: Inequality
  href: api/ComplicatedPrimitives.CaseInsensitiveString.html#ComplicatedPrimitives_CaseInsensitiveString_op_Inequality_
  commentId: Overload:ComplicatedPrimitives.CaseInsensitiveString.op_Inequality
  isSpec: "True"
  fullName: ComplicatedPrimitives.CaseInsensitiveString.Inequality
  nameWithType: CaseInsensitiveString.Inequality
- uid: ComplicatedPrimitives.CaseInsensitiveString.ToString
  name: ToString()
  href: api/ComplicatedPrimitives.CaseInsensitiveString.html#ComplicatedPrimitives_CaseInsensitiveString_ToString
  commentId: M:ComplicatedPrimitives.CaseInsensitiveString.ToString
  fullName: ComplicatedPrimitives.CaseInsensitiveString.ToString()
  nameWithType: CaseInsensitiveString.ToString()
- uid: ComplicatedPrimitives.CaseInsensitiveString.ToString*
  name: ToString
  href: api/ComplicatedPrimitives.CaseInsensitiveString.html#ComplicatedPrimitives_CaseInsensitiveString_ToString_
  commentId: Overload:ComplicatedPrimitives.CaseInsensitiveString.ToString
  isSpec: "True"
  fullName: ComplicatedPrimitives.CaseInsensitiveString.ToString
  nameWithType: CaseInsensitiveString.ToString
- uid: ComplicatedPrimitives.CaseInsensitiveStringComparison
  name: CaseInsensitiveStringComparison
  href: api/ComplicatedPrimitives.CaseInsensitiveStringComparison.html
  commentId: T:ComplicatedPrimitives.CaseInsensitiveStringComparison
  fullName: ComplicatedPrimitives.CaseInsensitiveStringComparison
  nameWithType: CaseInsensitiveStringComparison
- uid: ComplicatedPrimitives.CaseInsensitiveStringComparison.CurrentCulture
  name: CurrentCulture
  href: api/ComplicatedPrimitives.CaseInsensitiveStringComparison.html#ComplicatedPrimitives_CaseInsensitiveStringComparison_CurrentCulture
  commentId: F:ComplicatedPrimitives.CaseInsensitiveStringComparison.CurrentCulture
  fullName: ComplicatedPrimitives.CaseInsensitiveStringComparison.CurrentCulture
  nameWithType: CaseInsensitiveStringComparison.CurrentCulture
- uid: ComplicatedPrimitives.CaseInsensitiveStringComparison.InvariantCulture
  name: InvariantCulture
  href: api/ComplicatedPrimitives.CaseInsensitiveStringComparison.html#ComplicatedPrimitives_CaseInsensitiveStringComparison_InvariantCulture
  commentId: F:ComplicatedPrimitives.CaseInsensitiveStringComparison.InvariantCulture
  fullName: ComplicatedPrimitives.CaseInsensitiveStringComparison.InvariantCulture
  nameWithType: CaseInsensitiveStringComparison.InvariantCulture
- uid: ComplicatedPrimitives.CaseInsensitiveStringComparison.Ordinal
  name: Ordinal
  href: api/ComplicatedPrimitives.CaseInsensitiveStringComparison.html#ComplicatedPrimitives_CaseInsensitiveStringComparison_Ordinal
  commentId: F:ComplicatedPrimitives.CaseInsensitiveStringComparison.Ordinal
  fullName: ComplicatedPrimitives.CaseInsensitiveStringComparison.Ordinal
  nameWithType: CaseInsensitiveStringComparison.Ordinal
- uid: ComplicatedPrimitives.CaseInsensitiveStringComparisonExtensions
  name: CaseInsensitiveStringComparisonExtensions
  href: api/ComplicatedPrimitives.CaseInsensitiveStringComparisonExtensions.html
  commentId: T:ComplicatedPrimitives.CaseInsensitiveStringComparisonExtensions
  fullName: ComplicatedPrimitives.CaseInsensitiveStringComparisonExtensions
  nameWithType: CaseInsensitiveStringComparisonExtensions
- uid: ComplicatedPrimitives.CaseInsensitiveStringComparisonExtensions.ToCaseInsensitiveStringComparison(System.StringComparison)
  name: ToCaseInsensitiveStringComparison(StringComparison)
  href: api/ComplicatedPrimitives.CaseInsensitiveStringComparisonExtensions.html#ComplicatedPrimitives_CaseInsensitiveStringComparisonExtensions_ToCaseInsensitiveStringComparison_System_StringComparison_
  commentId: M:ComplicatedPrimitives.CaseInsensitiveStringComparisonExtensions.ToCaseInsensitiveStringComparison(System.StringComparison)
  fullName: ComplicatedPrimitives.CaseInsensitiveStringComparisonExtensions.ToCaseInsensitiveStringComparison(System.StringComparison)
  nameWithType: CaseInsensitiveStringComparisonExtensions.ToCaseInsensitiveStringComparison(StringComparison)
- uid: ComplicatedPrimitives.CaseInsensitiveStringComparisonExtensions.ToCaseInsensitiveStringComparison*
  name: ToCaseInsensitiveStringComparison
  href: api/ComplicatedPrimitives.CaseInsensitiveStringComparisonExtensions.html#ComplicatedPrimitives_CaseInsensitiveStringComparisonExtensions_ToCaseInsensitiveStringComparison_
  commentId: Overload:ComplicatedPrimitives.CaseInsensitiveStringComparisonExtensions.ToCaseInsensitiveStringComparison
  isSpec: "True"
  fullName: ComplicatedPrimitives.CaseInsensitiveStringComparisonExtensions.ToCaseInsensitiveStringComparison
  nameWithType: CaseInsensitiveStringComparisonExtensions.ToCaseInsensitiveStringComparison
- uid: ComplicatedPrimitives.CaseInsensitiveStringComparisonExtensions.ToStringComparison(ComplicatedPrimitives.CaseInsensitiveStringComparison)
  name: ToStringComparison(CaseInsensitiveStringComparison)
  href: api/ComplicatedPrimitives.CaseInsensitiveStringComparisonExtensions.html#ComplicatedPrimitives_CaseInsensitiveStringComparisonExtensions_ToStringComparison_ComplicatedPrimitives_CaseInsensitiveStringComparison_
  commentId: M:ComplicatedPrimitives.CaseInsensitiveStringComparisonExtensions.ToStringComparison(ComplicatedPrimitives.CaseInsensitiveStringComparison)
  fullName: ComplicatedPrimitives.CaseInsensitiveStringComparisonExtensions.ToStringComparison(ComplicatedPrimitives.CaseInsensitiveStringComparison)
  nameWithType: CaseInsensitiveStringComparisonExtensions.ToStringComparison(CaseInsensitiveStringComparison)
- uid: ComplicatedPrimitives.CaseInsensitiveStringComparisonExtensions.ToStringComparison*
  name: ToStringComparison
  href: api/ComplicatedPrimitives.CaseInsensitiveStringComparisonExtensions.html#ComplicatedPrimitives_CaseInsensitiveStringComparisonExtensions_ToStringComparison_
  commentId: Overload:ComplicatedPrimitives.CaseInsensitiveStringComparisonExtensions.ToStringComparison
  isSpec: "True"
  fullName: ComplicatedPrimitives.CaseInsensitiveStringComparisonExtensions.ToStringComparison
  nameWithType: CaseInsensitiveStringComparisonExtensions.ToStringComparison
- uid: ComplicatedPrimitives.Comparable
  name: Comparable
  href: api/ComplicatedPrimitives.Comparable.html
  commentId: T:ComplicatedPrimitives.Comparable
  fullName: ComplicatedPrimitives.Comparable
  nameWithType: Comparable
- uid: ComplicatedPrimitives.Comparable.Max*
  name: Max
  href: api/ComplicatedPrimitives.Comparable.html#ComplicatedPrimitives_Comparable_Max_
  commentId: Overload:ComplicatedPrimitives.Comparable.Max
  isSpec: "True"
  fullName: ComplicatedPrimitives.Comparable.Max
  nameWithType: Comparable.Max
- uid: ComplicatedPrimitives.Comparable.Max``1(``0,``0)
  name: Max<T>(T, T)
  href: api/ComplicatedPrimitives.Comparable.html#ComplicatedPrimitives_Comparable_Max__1___0___0_
  commentId: M:ComplicatedPrimitives.Comparable.Max``1(``0,``0)
  name.vb: Max(Of T)(T, T)
  fullName: ComplicatedPrimitives.Comparable.Max<T>(T, T)
  fullName.vb: ComplicatedPrimitives.Comparable.Max(Of T)(T, T)
  nameWithType: Comparable.Max<T>(T, T)
  nameWithType.vb: Comparable.Max(Of T)(T, T)
- uid: ComplicatedPrimitives.Comparable.Max``1(``0,``0,System.Collections.Generic.IComparer{``0})
  name: Max<T>(T, T, IComparer<T>)
  href: api/ComplicatedPrimitives.Comparable.html#ComplicatedPrimitives_Comparable_Max__1___0___0_System_Collections_Generic_IComparer___0__
  commentId: M:ComplicatedPrimitives.Comparable.Max``1(``0,``0,System.Collections.Generic.IComparer{``0})
  name.vb: Max(Of T)(T, T, IComparer(Of T))
  fullName: ComplicatedPrimitives.Comparable.Max<T>(T, T, System.Collections.Generic.IComparer<T>)
  fullName.vb: ComplicatedPrimitives.Comparable.Max(Of T)(T, T, System.Collections.Generic.IComparer(Of T))
  nameWithType: Comparable.Max<T>(T, T, IComparer<T>)
  nameWithType.vb: Comparable.Max(Of T)(T, T, IComparer(Of T))
- uid: ComplicatedPrimitives.Comparable.Max``1(``0,``0,System.Func{``0,``0,System.Int32})
  name: Max<T>(T, T, Func<T, T, Int32>)
  href: api/ComplicatedPrimitives.Comparable.html#ComplicatedPrimitives_Comparable_Max__1___0___0_System_Func___0___0_System_Int32__
  commentId: M:ComplicatedPrimitives.Comparable.Max``1(``0,``0,System.Func{``0,``0,System.Int32})
  name.vb: Max(Of T)(T, T, Func(Of T, T, Int32))
  fullName: ComplicatedPrimitives.Comparable.Max<T>(T, T, System.Func<T, T, System.Int32>)
  fullName.vb: ComplicatedPrimitives.Comparable.Max(Of T)(T, T, System.Func(Of T, T, System.Int32))
  nameWithType: Comparable.Max<T>(T, T, Func<T, T, Int32>)
  nameWithType.vb: Comparable.Max(Of T)(T, T, Func(Of T, T, Int32))
- uid: ComplicatedPrimitives.Comparable.Max``2(``0,``0,System.Func{``0,``1})
  name: Max<T, TValue>(T, T, Func<T, TValue>)
  href: api/ComplicatedPrimitives.Comparable.html#ComplicatedPrimitives_Comparable_Max__2___0___0_System_Func___0___1__
  commentId: M:ComplicatedPrimitives.Comparable.Max``2(``0,``0,System.Func{``0,``1})
  name.vb: Max(Of T, TValue)(T, T, Func(Of T, TValue))
  fullName: ComplicatedPrimitives.Comparable.Max<T, TValue>(T, T, System.Func<T, TValue>)
  fullName.vb: ComplicatedPrimitives.Comparable.Max(Of T, TValue)(T, T, System.Func(Of T, TValue))
  nameWithType: Comparable.Max<T, TValue>(T, T, Func<T, TValue>)
  nameWithType.vb: Comparable.Max(Of T, TValue)(T, T, Func(Of T, TValue))
- uid: ComplicatedPrimitives.Comparable.Max``2(``0,``0,System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  name: Max<T, TValue>(T, T, Func<T, TValue>, IComparer<TValue>)
  href: api/ComplicatedPrimitives.Comparable.html#ComplicatedPrimitives_Comparable_Max__2___0___0_System_Func___0___1__System_Collections_Generic_IComparer___1__
  commentId: M:ComplicatedPrimitives.Comparable.Max``2(``0,``0,System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  name.vb: Max(Of T, TValue)(T, T, Func(Of T, TValue), IComparer(Of TValue))
  fullName: ComplicatedPrimitives.Comparable.Max<T, TValue>(T, T, System.Func<T, TValue>, System.Collections.Generic.IComparer<TValue>)
  fullName.vb: ComplicatedPrimitives.Comparable.Max(Of T, TValue)(T, T, System.Func(Of T, TValue), System.Collections.Generic.IComparer(Of TValue))
  nameWithType: Comparable.Max<T, TValue>(T, T, Func<T, TValue>, IComparer<TValue>)
  nameWithType.vb: Comparable.Max(Of T, TValue)(T, T, Func(Of T, TValue), IComparer(Of TValue))
- uid: ComplicatedPrimitives.Comparable.Max``2(``0,``0,System.Func{``0,``1},System.Func{``1,``1,System.Int32})
  name: Max<T, TValue>(T, T, Func<T, TValue>, Func<TValue, TValue, Int32>)
  href: api/ComplicatedPrimitives.Comparable.html#ComplicatedPrimitives_Comparable_Max__2___0___0_System_Func___0___1__System_Func___1___1_System_Int32__
  commentId: M:ComplicatedPrimitives.Comparable.Max``2(``0,``0,System.Func{``0,``1},System.Func{``1,``1,System.Int32})
  name.vb: Max(Of T, TValue)(T, T, Func(Of T, TValue), Func(Of TValue, TValue, Int32))
  fullName: ComplicatedPrimitives.Comparable.Max<T, TValue>(T, T, System.Func<T, TValue>, System.Func<TValue, TValue, System.Int32>)
  fullName.vb: ComplicatedPrimitives.Comparable.Max(Of T, TValue)(T, T, System.Func(Of T, TValue), System.Func(Of TValue, TValue, System.Int32))
  nameWithType: Comparable.Max<T, TValue>(T, T, Func<T, TValue>, Func<TValue, TValue, Int32>)
  nameWithType.vb: Comparable.Max(Of T, TValue)(T, T, Func(Of T, TValue), Func(Of TValue, TValue, Int32))
- uid: ComplicatedPrimitives.Comparable.Min*
  name: Min
  href: api/ComplicatedPrimitives.Comparable.html#ComplicatedPrimitives_Comparable_Min_
  commentId: Overload:ComplicatedPrimitives.Comparable.Min
  isSpec: "True"
  fullName: ComplicatedPrimitives.Comparable.Min
  nameWithType: Comparable.Min
- uid: ComplicatedPrimitives.Comparable.Min``1(``0,``0)
  name: Min<T>(T, T)
  href: api/ComplicatedPrimitives.Comparable.html#ComplicatedPrimitives_Comparable_Min__1___0___0_
  commentId: M:ComplicatedPrimitives.Comparable.Min``1(``0,``0)
  name.vb: Min(Of T)(T, T)
  fullName: ComplicatedPrimitives.Comparable.Min<T>(T, T)
  fullName.vb: ComplicatedPrimitives.Comparable.Min(Of T)(T, T)
  nameWithType: Comparable.Min<T>(T, T)
  nameWithType.vb: Comparable.Min(Of T)(T, T)
- uid: ComplicatedPrimitives.Comparable.Min``1(``0,``0,System.Collections.Generic.IComparer{``0})
  name: Min<T>(T, T, IComparer<T>)
  href: api/ComplicatedPrimitives.Comparable.html#ComplicatedPrimitives_Comparable_Min__1___0___0_System_Collections_Generic_IComparer___0__
  commentId: M:ComplicatedPrimitives.Comparable.Min``1(``0,``0,System.Collections.Generic.IComparer{``0})
  name.vb: Min(Of T)(T, T, IComparer(Of T))
  fullName: ComplicatedPrimitives.Comparable.Min<T>(T, T, System.Collections.Generic.IComparer<T>)
  fullName.vb: ComplicatedPrimitives.Comparable.Min(Of T)(T, T, System.Collections.Generic.IComparer(Of T))
  nameWithType: Comparable.Min<T>(T, T, IComparer<T>)
  nameWithType.vb: Comparable.Min(Of T)(T, T, IComparer(Of T))
- uid: ComplicatedPrimitives.Comparable.Min``1(``0,``0,System.Func{``0,``0,System.Int32})
  name: Min<T>(T, T, Func<T, T, Int32>)
  href: api/ComplicatedPrimitives.Comparable.html#ComplicatedPrimitives_Comparable_Min__1___0___0_System_Func___0___0_System_Int32__
  commentId: M:ComplicatedPrimitives.Comparable.Min``1(``0,``0,System.Func{``0,``0,System.Int32})
  name.vb: Min(Of T)(T, T, Func(Of T, T, Int32))
  fullName: ComplicatedPrimitives.Comparable.Min<T>(T, T, System.Func<T, T, System.Int32>)
  fullName.vb: ComplicatedPrimitives.Comparable.Min(Of T)(T, T, System.Func(Of T, T, System.Int32))
  nameWithType: Comparable.Min<T>(T, T, Func<T, T, Int32>)
  nameWithType.vb: Comparable.Min(Of T)(T, T, Func(Of T, T, Int32))
- uid: ComplicatedPrimitives.Comparable.Min``2(``0,``0,System.Func{``0,``1})
  name: Min<T, TValue>(T, T, Func<T, TValue>)
  href: api/ComplicatedPrimitives.Comparable.html#ComplicatedPrimitives_Comparable_Min__2___0___0_System_Func___0___1__
  commentId: M:ComplicatedPrimitives.Comparable.Min``2(``0,``0,System.Func{``0,``1})
  name.vb: Min(Of T, TValue)(T, T, Func(Of T, TValue))
  fullName: ComplicatedPrimitives.Comparable.Min<T, TValue>(T, T, System.Func<T, TValue>)
  fullName.vb: ComplicatedPrimitives.Comparable.Min(Of T, TValue)(T, T, System.Func(Of T, TValue))
  nameWithType: Comparable.Min<T, TValue>(T, T, Func<T, TValue>)
  nameWithType.vb: Comparable.Min(Of T, TValue)(T, T, Func(Of T, TValue))
- uid: ComplicatedPrimitives.Comparable.Min``2(``0,``0,System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  name: Min<T, TValue>(T, T, Func<T, TValue>, IComparer<TValue>)
  href: api/ComplicatedPrimitives.Comparable.html#ComplicatedPrimitives_Comparable_Min__2___0___0_System_Func___0___1__System_Collections_Generic_IComparer___1__
  commentId: M:ComplicatedPrimitives.Comparable.Min``2(``0,``0,System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  name.vb: Min(Of T, TValue)(T, T, Func(Of T, TValue), IComparer(Of TValue))
  fullName: ComplicatedPrimitives.Comparable.Min<T, TValue>(T, T, System.Func<T, TValue>, System.Collections.Generic.IComparer<TValue>)
  fullName.vb: ComplicatedPrimitives.Comparable.Min(Of T, TValue)(T, T, System.Func(Of T, TValue), System.Collections.Generic.IComparer(Of TValue))
  nameWithType: Comparable.Min<T, TValue>(T, T, Func<T, TValue>, IComparer<TValue>)
  nameWithType.vb: Comparable.Min(Of T, TValue)(T, T, Func(Of T, TValue), IComparer(Of TValue))
- uid: ComplicatedPrimitives.Comparable.Min``2(``0,``0,System.Func{``0,``1},System.Func{``1,``1,System.Int32})
  name: Min<T, TValue>(T, T, Func<T, TValue>, Func<TValue, TValue, Int32>)
  href: api/ComplicatedPrimitives.Comparable.html#ComplicatedPrimitives_Comparable_Min__2___0___0_System_Func___0___1__System_Func___1___1_System_Int32__
  commentId: M:ComplicatedPrimitives.Comparable.Min``2(``0,``0,System.Func{``0,``1},System.Func{``1,``1,System.Int32})
  name.vb: Min(Of T, TValue)(T, T, Func(Of T, TValue), Func(Of TValue, TValue, Int32))
  fullName: ComplicatedPrimitives.Comparable.Min<T, TValue>(T, T, System.Func<T, TValue>, System.Func<TValue, TValue, System.Int32>)
  fullName.vb: ComplicatedPrimitives.Comparable.Min(Of T, TValue)(T, T, System.Func(Of T, TValue), System.Func(Of TValue, TValue, System.Int32))
  nameWithType: Comparable.Min<T, TValue>(T, T, Func<T, TValue>, Func<TValue, TValue, Int32>)
  nameWithType.vb: Comparable.Min(Of T, TValue)(T, T, Func(Of T, TValue), Func(Of TValue, TValue, Int32))
- uid: ComplicatedPrimitives.Comparable.MinMax*
  name: MinMax
  href: api/ComplicatedPrimitives.Comparable.html#ComplicatedPrimitives_Comparable_MinMax_
  commentId: Overload:ComplicatedPrimitives.Comparable.MinMax
  isSpec: "True"
  fullName: ComplicatedPrimitives.Comparable.MinMax
  nameWithType: Comparable.MinMax
- uid: ComplicatedPrimitives.Comparable.MinMax``1(``0,``0)
  name: MinMax<T>(T, T)
  href: api/ComplicatedPrimitives.Comparable.html#ComplicatedPrimitives_Comparable_MinMax__1___0___0_
  commentId: M:ComplicatedPrimitives.Comparable.MinMax``1(``0,``0)
  name.vb: MinMax(Of T)(T, T)
  fullName: ComplicatedPrimitives.Comparable.MinMax<T>(T, T)
  fullName.vb: ComplicatedPrimitives.Comparable.MinMax(Of T)(T, T)
  nameWithType: Comparable.MinMax<T>(T, T)
  nameWithType.vb: Comparable.MinMax(Of T)(T, T)
- uid: ComplicatedPrimitives.Comparable.MinMax``1(``0,``0,System.Collections.Generic.IComparer{``0})
  name: MinMax<T>(T, T, IComparer<T>)
  href: api/ComplicatedPrimitives.Comparable.html#ComplicatedPrimitives_Comparable_MinMax__1___0___0_System_Collections_Generic_IComparer___0__
  commentId: M:ComplicatedPrimitives.Comparable.MinMax``1(``0,``0,System.Collections.Generic.IComparer{``0})
  name.vb: MinMax(Of T)(T, T, IComparer(Of T))
  fullName: ComplicatedPrimitives.Comparable.MinMax<T>(T, T, System.Collections.Generic.IComparer<T>)
  fullName.vb: ComplicatedPrimitives.Comparable.MinMax(Of T)(T, T, System.Collections.Generic.IComparer(Of T))
  nameWithType: Comparable.MinMax<T>(T, T, IComparer<T>)
  nameWithType.vb: Comparable.MinMax(Of T)(T, T, IComparer(Of T))
- uid: ComplicatedPrimitives.Comparable.MinMax``1(``0,``0,System.Func{``0,``0,System.Int32})
  name: MinMax<T>(T, T, Func<T, T, Int32>)
  href: api/ComplicatedPrimitives.Comparable.html#ComplicatedPrimitives_Comparable_MinMax__1___0___0_System_Func___0___0_System_Int32__
  commentId: M:ComplicatedPrimitives.Comparable.MinMax``1(``0,``0,System.Func{``0,``0,System.Int32})
  name.vb: MinMax(Of T)(T, T, Func(Of T, T, Int32))
  fullName: ComplicatedPrimitives.Comparable.MinMax<T>(T, T, System.Func<T, T, System.Int32>)
  fullName.vb: ComplicatedPrimitives.Comparable.MinMax(Of T)(T, T, System.Func(Of T, T, System.Int32))
  nameWithType: Comparable.MinMax<T>(T, T, Func<T, T, Int32>)
  nameWithType.vb: Comparable.MinMax(Of T)(T, T, Func(Of T, T, Int32))
- uid: ComplicatedPrimitives.Comparable.MinMax``2(``0,``0,System.Func{``0,``1})
  name: MinMax<T, TValue>(T, T, Func<T, TValue>)
  href: api/ComplicatedPrimitives.Comparable.html#ComplicatedPrimitives_Comparable_MinMax__2___0___0_System_Func___0___1__
  commentId: M:ComplicatedPrimitives.Comparable.MinMax``2(``0,``0,System.Func{``0,``1})
  name.vb: MinMax(Of T, TValue)(T, T, Func(Of T, TValue))
  fullName: ComplicatedPrimitives.Comparable.MinMax<T, TValue>(T, T, System.Func<T, TValue>)
  fullName.vb: ComplicatedPrimitives.Comparable.MinMax(Of T, TValue)(T, T, System.Func(Of T, TValue))
  nameWithType: Comparable.MinMax<T, TValue>(T, T, Func<T, TValue>)
  nameWithType.vb: Comparable.MinMax(Of T, TValue)(T, T, Func(Of T, TValue))
- uid: ComplicatedPrimitives.Comparable.MinMax``2(``0,``0,System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  name: MinMax<T, TValue>(T, T, Func<T, TValue>, IComparer<TValue>)
  href: api/ComplicatedPrimitives.Comparable.html#ComplicatedPrimitives_Comparable_MinMax__2___0___0_System_Func___0___1__System_Collections_Generic_IComparer___1__
  commentId: M:ComplicatedPrimitives.Comparable.MinMax``2(``0,``0,System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  name.vb: MinMax(Of T, TValue)(T, T, Func(Of T, TValue), IComparer(Of TValue))
  fullName: ComplicatedPrimitives.Comparable.MinMax<T, TValue>(T, T, System.Func<T, TValue>, System.Collections.Generic.IComparer<TValue>)
  fullName.vb: ComplicatedPrimitives.Comparable.MinMax(Of T, TValue)(T, T, System.Func(Of T, TValue), System.Collections.Generic.IComparer(Of TValue))
  nameWithType: Comparable.MinMax<T, TValue>(T, T, Func<T, TValue>, IComparer<TValue>)
  nameWithType.vb: Comparable.MinMax(Of T, TValue)(T, T, Func(Of T, TValue), IComparer(Of TValue))
- uid: ComplicatedPrimitives.Comparable.MinMax``2(``0,``0,System.Func{``0,``1},System.Func{``1,``1,System.Int32})
  name: MinMax<T, TValue>(T, T, Func<T, TValue>, Func<TValue, TValue, Int32>)
  href: api/ComplicatedPrimitives.Comparable.html#ComplicatedPrimitives_Comparable_MinMax__2___0___0_System_Func___0___1__System_Func___1___1_System_Int32__
  commentId: M:ComplicatedPrimitives.Comparable.MinMax``2(``0,``0,System.Func{``0,``1},System.Func{``1,``1,System.Int32})
  name.vb: MinMax(Of T, TValue)(T, T, Func(Of T, TValue), Func(Of TValue, TValue, Int32))
  fullName: ComplicatedPrimitives.Comparable.MinMax<T, TValue>(T, T, System.Func<T, TValue>, System.Func<TValue, TValue, System.Int32>)
  fullName.vb: ComplicatedPrimitives.Comparable.MinMax(Of T, TValue)(T, T, System.Func(Of T, TValue), System.Func(Of TValue, TValue, System.Int32))
  nameWithType: Comparable.MinMax<T, TValue>(T, T, Func<T, TValue>, Func<TValue, TValue, Int32>)
  nameWithType.vb: Comparable.MinMax(Of T, TValue)(T, T, Func(Of T, TValue), Func(Of TValue, TValue, Int32))
- uid: ComplicatedPrimitives.DefaultValueParser
  name: DefaultValueParser
  href: api/ComplicatedPrimitives.DefaultValueParser.html
  commentId: T:ComplicatedPrimitives.DefaultValueParser
  fullName: ComplicatedPrimitives.DefaultValueParser
  nameWithType: DefaultValueParser
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Byte}#Parse(System.String)
  name: IParser<Byte>.Parse(String)
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_Byte__Parse_System_String_
  commentId: M:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Byte}#Parse(System.String)
  name.vb: ComplicatedPrimitives.IParser<System.Byte>.Parse(String)
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Byte>.Parse(System.String)
  nameWithType: DefaultValueParser.IParser<Byte>.Parse(String)
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.Byte>.Parse(String)
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Byte}#Parse*
  name: IParser<Byte>.Parse
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_Byte__Parse_
  commentId: Overload:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Byte}#Parse
  isSpec: "True"
  name.vb: ComplicatedPrimitives.IParser<System.Byte>.Parse
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Byte>.Parse
  nameWithType: DefaultValueParser.IParser<Byte>.Parse
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.Byte>.Parse
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Byte}#TryParse(System.String,System.Byte@)
  name: IParser<Byte>.TryParse(String, out Byte)
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_Byte__TryParse_System_String_System_Byte__
  commentId: M:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Byte}#TryParse(System.String,System.Byte@)
  name.vb: ComplicatedPrimitives.IParser<System.Byte>.TryParse(String, ByRef Byte)
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Byte>.TryParse(System.String, out System.Byte)
  fullName.vb: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Byte>.TryParse(System.String, ByRef System.Byte)
  nameWithType: DefaultValueParser.IParser<Byte>.TryParse(String, out Byte)
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.Byte>.TryParse(String, ByRef Byte)
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Byte}#TryParse*
  name: IParser<Byte>.TryParse
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_Byte__TryParse_
  commentId: Overload:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Byte}#TryParse
  isSpec: "True"
  name.vb: ComplicatedPrimitives.IParser<System.Byte>.TryParse
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Byte>.TryParse
  nameWithType: DefaultValueParser.IParser<Byte>.TryParse
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.Byte>.TryParse
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#DateTime}#Parse(System.String)
  name: IParser<DateTime>.Parse(String)
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_DateTime__Parse_System_String_
  commentId: M:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#DateTime}#Parse(System.String)
  name.vb: ComplicatedPrimitives.IParser<System.DateTime>.Parse(String)
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.DateTime>.Parse(System.String)
  nameWithType: DefaultValueParser.IParser<DateTime>.Parse(String)
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.DateTime>.Parse(String)
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#DateTime}#Parse*
  name: IParser<DateTime>.Parse
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_DateTime__Parse_
  commentId: Overload:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#DateTime}#Parse
  isSpec: "True"
  name.vb: ComplicatedPrimitives.IParser<System.DateTime>.Parse
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.DateTime>.Parse
  nameWithType: DefaultValueParser.IParser<DateTime>.Parse
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.DateTime>.Parse
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#DateTime}#TryParse(System.String,System.DateTime@)
  name: IParser<DateTime>.TryParse(String, out DateTime)
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_DateTime__TryParse_System_String_System_DateTime__
  commentId: M:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#DateTime}#TryParse(System.String,System.DateTime@)
  name.vb: ComplicatedPrimitives.IParser<System.DateTime>.TryParse(String, ByRef DateTime)
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.DateTime>.TryParse(System.String, out System.DateTime)
  fullName.vb: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.DateTime>.TryParse(System.String, ByRef System.DateTime)
  nameWithType: DefaultValueParser.IParser<DateTime>.TryParse(String, out DateTime)
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.DateTime>.TryParse(String, ByRef DateTime)
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#DateTime}#TryParse*
  name: IParser<DateTime>.TryParse
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_DateTime__TryParse_
  commentId: Overload:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#DateTime}#TryParse
  isSpec: "True"
  name.vb: ComplicatedPrimitives.IParser<System.DateTime>.TryParse
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.DateTime>.TryParse
  nameWithType: DefaultValueParser.IParser<DateTime>.TryParse
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.DateTime>.TryParse
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#DateTimeOffset}#Parse(System.String)
  name: IParser<DateTimeOffset>.Parse(String)
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_DateTimeOffset__Parse_System_String_
  commentId: M:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#DateTimeOffset}#Parse(System.String)
  name.vb: ComplicatedPrimitives.IParser<System.DateTimeOffset>.Parse(String)
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.DateTimeOffset>.Parse(System.String)
  nameWithType: DefaultValueParser.IParser<DateTimeOffset>.Parse(String)
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.DateTimeOffset>.Parse(String)
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#DateTimeOffset}#Parse*
  name: IParser<DateTimeOffset>.Parse
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_DateTimeOffset__Parse_
  commentId: Overload:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#DateTimeOffset}#Parse
  isSpec: "True"
  name.vb: ComplicatedPrimitives.IParser<System.DateTimeOffset>.Parse
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.DateTimeOffset>.Parse
  nameWithType: DefaultValueParser.IParser<DateTimeOffset>.Parse
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.DateTimeOffset>.Parse
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#DateTimeOffset}#TryParse(System.String,System.DateTimeOffset@)
  name: IParser<DateTimeOffset>.TryParse(String, out DateTimeOffset)
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_DateTimeOffset__TryParse_System_String_System_DateTimeOffset__
  commentId: M:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#DateTimeOffset}#TryParse(System.String,System.DateTimeOffset@)
  name.vb: ComplicatedPrimitives.IParser<System.DateTimeOffset>.TryParse(String, ByRef DateTimeOffset)
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.DateTimeOffset>.TryParse(System.String, out System.DateTimeOffset)
  fullName.vb: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.DateTimeOffset>.TryParse(System.String, ByRef System.DateTimeOffset)
  nameWithType: DefaultValueParser.IParser<DateTimeOffset>.TryParse(String, out DateTimeOffset)
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.DateTimeOffset>.TryParse(String, ByRef DateTimeOffset)
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#DateTimeOffset}#TryParse*
  name: IParser<DateTimeOffset>.TryParse
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_DateTimeOffset__TryParse_
  commentId: Overload:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#DateTimeOffset}#TryParse
  isSpec: "True"
  name.vb: ComplicatedPrimitives.IParser<System.DateTimeOffset>.TryParse
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.DateTimeOffset>.TryParse
  nameWithType: DefaultValueParser.IParser<DateTimeOffset>.TryParse
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.DateTimeOffset>.TryParse
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Decimal}#Parse(System.String)
  name: IParser<Decimal>.Parse(String)
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_Decimal__Parse_System_String_
  commentId: M:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Decimal}#Parse(System.String)
  name.vb: ComplicatedPrimitives.IParser<System.Decimal>.Parse(String)
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Decimal>.Parse(System.String)
  nameWithType: DefaultValueParser.IParser<Decimal>.Parse(String)
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.Decimal>.Parse(String)
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Decimal}#Parse*
  name: IParser<Decimal>.Parse
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_Decimal__Parse_
  commentId: Overload:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Decimal}#Parse
  isSpec: "True"
  name.vb: ComplicatedPrimitives.IParser<System.Decimal>.Parse
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Decimal>.Parse
  nameWithType: DefaultValueParser.IParser<Decimal>.Parse
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.Decimal>.Parse
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Decimal}#TryParse(System.String,System.Decimal@)
  name: IParser<Decimal>.TryParse(String, out Decimal)
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_Decimal__TryParse_System_String_System_Decimal__
  commentId: M:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Decimal}#TryParse(System.String,System.Decimal@)
  name.vb: ComplicatedPrimitives.IParser<System.Decimal>.TryParse(String, ByRef Decimal)
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Decimal>.TryParse(System.String, out System.Decimal)
  fullName.vb: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Decimal>.TryParse(System.String, ByRef System.Decimal)
  nameWithType: DefaultValueParser.IParser<Decimal>.TryParse(String, out Decimal)
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.Decimal>.TryParse(String, ByRef Decimal)
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Decimal}#TryParse*
  name: IParser<Decimal>.TryParse
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_Decimal__TryParse_
  commentId: Overload:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Decimal}#TryParse
  isSpec: "True"
  name.vb: ComplicatedPrimitives.IParser<System.Decimal>.TryParse
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Decimal>.TryParse
  nameWithType: DefaultValueParser.IParser<Decimal>.TryParse
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.Decimal>.TryParse
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Double}#Parse(System.String)
  name: IParser<Double>.Parse(String)
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_Double__Parse_System_String_
  commentId: M:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Double}#Parse(System.String)
  name.vb: ComplicatedPrimitives.IParser<System.Double>.Parse(String)
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Double>.Parse(System.String)
  nameWithType: DefaultValueParser.IParser<Double>.Parse(String)
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.Double>.Parse(String)
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Double}#Parse*
  name: IParser<Double>.Parse
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_Double__Parse_
  commentId: Overload:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Double}#Parse
  isSpec: "True"
  name.vb: ComplicatedPrimitives.IParser<System.Double>.Parse
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Double>.Parse
  nameWithType: DefaultValueParser.IParser<Double>.Parse
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.Double>.Parse
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Double}#TryParse(System.String,System.Double@)
  name: IParser<Double>.TryParse(String, out Double)
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_Double__TryParse_System_String_System_Double__
  commentId: M:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Double}#TryParse(System.String,System.Double@)
  name.vb: ComplicatedPrimitives.IParser<System.Double>.TryParse(String, ByRef Double)
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Double>.TryParse(System.String, out System.Double)
  fullName.vb: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Double>.TryParse(System.String, ByRef System.Double)
  nameWithType: DefaultValueParser.IParser<Double>.TryParse(String, out Double)
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.Double>.TryParse(String, ByRef Double)
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Double}#TryParse*
  name: IParser<Double>.TryParse
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_Double__TryParse_
  commentId: Overload:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Double}#TryParse
  isSpec: "True"
  name.vb: ComplicatedPrimitives.IParser<System.Double>.TryParse
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Double>.TryParse
  nameWithType: DefaultValueParser.IParser<Double>.TryParse
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.Double>.TryParse
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Int16}#Parse(System.String)
  name: IParser<Int16>.Parse(String)
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_Int16__Parse_System_String_
  commentId: M:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Int16}#Parse(System.String)
  name.vb: ComplicatedPrimitives.IParser<System.Int16>.Parse(String)
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Int16>.Parse(System.String)
  nameWithType: DefaultValueParser.IParser<Int16>.Parse(String)
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.Int16>.Parse(String)
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Int16}#Parse*
  name: IParser<Int16>.Parse
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_Int16__Parse_
  commentId: Overload:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Int16}#Parse
  isSpec: "True"
  name.vb: ComplicatedPrimitives.IParser<System.Int16>.Parse
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Int16>.Parse
  nameWithType: DefaultValueParser.IParser<Int16>.Parse
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.Int16>.Parse
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Int16}#TryParse(System.String,System.Int16@)
  name: IParser<Int16>.TryParse(String, out Int16)
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_Int16__TryParse_System_String_System_Int16__
  commentId: M:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Int16}#TryParse(System.String,System.Int16@)
  name.vb: ComplicatedPrimitives.IParser<System.Int16>.TryParse(String, ByRef Int16)
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Int16>.TryParse(System.String, out System.Int16)
  fullName.vb: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Int16>.TryParse(System.String, ByRef System.Int16)
  nameWithType: DefaultValueParser.IParser<Int16>.TryParse(String, out Int16)
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.Int16>.TryParse(String, ByRef Int16)
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Int16}#TryParse*
  name: IParser<Int16>.TryParse
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_Int16__TryParse_
  commentId: Overload:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Int16}#TryParse
  isSpec: "True"
  name.vb: ComplicatedPrimitives.IParser<System.Int16>.TryParse
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Int16>.TryParse
  nameWithType: DefaultValueParser.IParser<Int16>.TryParse
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.Int16>.TryParse
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Int32}#Parse(System.String)
  name: IParser<Int32>.Parse(String)
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_Int32__Parse_System_String_
  commentId: M:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Int32}#Parse(System.String)
  name.vb: ComplicatedPrimitives.IParser<System.Int32>.Parse(String)
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Int32>.Parse(System.String)
  nameWithType: DefaultValueParser.IParser<Int32>.Parse(String)
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.Int32>.Parse(String)
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Int32}#Parse*
  name: IParser<Int32>.Parse
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_Int32__Parse_
  commentId: Overload:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Int32}#Parse
  isSpec: "True"
  name.vb: ComplicatedPrimitives.IParser<System.Int32>.Parse
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Int32>.Parse
  nameWithType: DefaultValueParser.IParser<Int32>.Parse
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.Int32>.Parse
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Int32}#TryParse(System.String,System.Int32@)
  name: IParser<Int32>.TryParse(String, out Int32)
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_Int32__TryParse_System_String_System_Int32__
  commentId: M:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Int32}#TryParse(System.String,System.Int32@)
  name.vb: ComplicatedPrimitives.IParser<System.Int32>.TryParse(String, ByRef Int32)
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Int32>.TryParse(System.String, out System.Int32)
  fullName.vb: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Int32>.TryParse(System.String, ByRef System.Int32)
  nameWithType: DefaultValueParser.IParser<Int32>.TryParse(String, out Int32)
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.Int32>.TryParse(String, ByRef Int32)
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Int32}#TryParse*
  name: IParser<Int32>.TryParse
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_Int32__TryParse_
  commentId: Overload:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Int32}#TryParse
  isSpec: "True"
  name.vb: ComplicatedPrimitives.IParser<System.Int32>.TryParse
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Int32>.TryParse
  nameWithType: DefaultValueParser.IParser<Int32>.TryParse
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.Int32>.TryParse
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Int64}#Parse(System.String)
  name: IParser<Int64>.Parse(String)
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_Int64__Parse_System_String_
  commentId: M:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Int64}#Parse(System.String)
  name.vb: ComplicatedPrimitives.IParser<System.Int64>.Parse(String)
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Int64>.Parse(System.String)
  nameWithType: DefaultValueParser.IParser<Int64>.Parse(String)
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.Int64>.Parse(String)
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Int64}#Parse*
  name: IParser<Int64>.Parse
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_Int64__Parse_
  commentId: Overload:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Int64}#Parse
  isSpec: "True"
  name.vb: ComplicatedPrimitives.IParser<System.Int64>.Parse
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Int64>.Parse
  nameWithType: DefaultValueParser.IParser<Int64>.Parse
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.Int64>.Parse
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Int64}#TryParse(System.String,System.Int64@)
  name: IParser<Int64>.TryParse(String, out Int64)
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_Int64__TryParse_System_String_System_Int64__
  commentId: M:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Int64}#TryParse(System.String,System.Int64@)
  name.vb: ComplicatedPrimitives.IParser<System.Int64>.TryParse(String, ByRef Int64)
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Int64>.TryParse(System.String, out System.Int64)
  fullName.vb: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Int64>.TryParse(System.String, ByRef System.Int64)
  nameWithType: DefaultValueParser.IParser<Int64>.TryParse(String, out Int64)
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.Int64>.TryParse(String, ByRef Int64)
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Int64}#TryParse*
  name: IParser<Int64>.TryParse
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_Int64__TryParse_
  commentId: Overload:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Int64}#TryParse
  isSpec: "True"
  name.vb: ComplicatedPrimitives.IParser<System.Int64>.TryParse
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Int64>.TryParse
  nameWithType: DefaultValueParser.IParser<Int64>.TryParse
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.Int64>.TryParse
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Single}#Parse(System.String)
  name: IParser<Single>.Parse(String)
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_Single__Parse_System_String_
  commentId: M:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Single}#Parse(System.String)
  name.vb: ComplicatedPrimitives.IParser<System.Single>.Parse(String)
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Single>.Parse(System.String)
  nameWithType: DefaultValueParser.IParser<Single>.Parse(String)
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.Single>.Parse(String)
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Single}#Parse*
  name: IParser<Single>.Parse
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_Single__Parse_
  commentId: Overload:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Single}#Parse
  isSpec: "True"
  name.vb: ComplicatedPrimitives.IParser<System.Single>.Parse
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Single>.Parse
  nameWithType: DefaultValueParser.IParser<Single>.Parse
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.Single>.Parse
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Single}#TryParse(System.String,System.Single@)
  name: IParser<Single>.TryParse(String, out Single)
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_Single__TryParse_System_String_System_Single__
  commentId: M:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Single}#TryParse(System.String,System.Single@)
  name.vb: ComplicatedPrimitives.IParser<System.Single>.TryParse(String, ByRef Single)
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Single>.TryParse(System.String, out System.Single)
  fullName.vb: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Single>.TryParse(System.String, ByRef System.Single)
  nameWithType: DefaultValueParser.IParser<Single>.TryParse(String, out Single)
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.Single>.TryParse(String, ByRef Single)
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Single}#TryParse*
  name: IParser<Single>.TryParse
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_Single__TryParse_
  commentId: Overload:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#Single}#TryParse
  isSpec: "True"
  name.vb: ComplicatedPrimitives.IParser<System.Single>.TryParse
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.Single>.TryParse
  nameWithType: DefaultValueParser.IParser<Single>.TryParse
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.Single>.TryParse
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#TimeSpan}#Parse(System.String)
  name: IParser<TimeSpan>.Parse(String)
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_TimeSpan__Parse_System_String_
  commentId: M:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#TimeSpan}#Parse(System.String)
  name.vb: ComplicatedPrimitives.IParser<System.TimeSpan>.Parse(String)
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.TimeSpan>.Parse(System.String)
  nameWithType: DefaultValueParser.IParser<TimeSpan>.Parse(String)
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.TimeSpan>.Parse(String)
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#TimeSpan}#Parse*
  name: IParser<TimeSpan>.Parse
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_TimeSpan__Parse_
  commentId: Overload:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#TimeSpan}#Parse
  isSpec: "True"
  name.vb: ComplicatedPrimitives.IParser<System.TimeSpan>.Parse
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.TimeSpan>.Parse
  nameWithType: DefaultValueParser.IParser<TimeSpan>.Parse
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.TimeSpan>.Parse
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#TimeSpan}#TryParse(System.String,System.TimeSpan@)
  name: IParser<TimeSpan>.TryParse(String, out TimeSpan)
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_TimeSpan__TryParse_System_String_System_TimeSpan__
  commentId: M:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#TimeSpan}#TryParse(System.String,System.TimeSpan@)
  name.vb: ComplicatedPrimitives.IParser<System.TimeSpan>.TryParse(String, ByRef TimeSpan)
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.TimeSpan>.TryParse(System.String, out System.TimeSpan)
  fullName.vb: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.TimeSpan>.TryParse(System.String, ByRef System.TimeSpan)
  nameWithType: DefaultValueParser.IParser<TimeSpan>.TryParse(String, out TimeSpan)
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.TimeSpan>.TryParse(String, ByRef TimeSpan)
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#TimeSpan}#TryParse*
  name: IParser<TimeSpan>.TryParse
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_TimeSpan__TryParse_
  commentId: Overload:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#TimeSpan}#TryParse
  isSpec: "True"
  name.vb: ComplicatedPrimitives.IParser<System.TimeSpan>.TryParse
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.TimeSpan>.TryParse
  nameWithType: DefaultValueParser.IParser<TimeSpan>.TryParse
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.TimeSpan>.TryParse
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#UInt16}#Parse(System.String)
  name: IParser<UInt16>.Parse(String)
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_UInt16__Parse_System_String_
  commentId: M:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#UInt16}#Parse(System.String)
  name.vb: ComplicatedPrimitives.IParser<System.UInt16>.Parse(String)
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.UInt16>.Parse(System.String)
  nameWithType: DefaultValueParser.IParser<UInt16>.Parse(String)
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.UInt16>.Parse(String)
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#UInt16}#Parse*
  name: IParser<UInt16>.Parse
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_UInt16__Parse_
  commentId: Overload:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#UInt16}#Parse
  isSpec: "True"
  name.vb: ComplicatedPrimitives.IParser<System.UInt16>.Parse
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.UInt16>.Parse
  nameWithType: DefaultValueParser.IParser<UInt16>.Parse
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.UInt16>.Parse
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#UInt16}#TryParse(System.String,System.UInt16@)
  name: IParser<UInt16>.TryParse(String, out UInt16)
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_UInt16__TryParse_System_String_System_UInt16__
  commentId: M:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#UInt16}#TryParse(System.String,System.UInt16@)
  name.vb: ComplicatedPrimitives.IParser<System.UInt16>.TryParse(String, ByRef UInt16)
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.UInt16>.TryParse(System.String, out System.UInt16)
  fullName.vb: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.UInt16>.TryParse(System.String, ByRef System.UInt16)
  nameWithType: DefaultValueParser.IParser<UInt16>.TryParse(String, out UInt16)
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.UInt16>.TryParse(String, ByRef UInt16)
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#UInt16}#TryParse*
  name: IParser<UInt16>.TryParse
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_UInt16__TryParse_
  commentId: Overload:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#UInt16}#TryParse
  isSpec: "True"
  name.vb: ComplicatedPrimitives.IParser<System.UInt16>.TryParse
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.UInt16>.TryParse
  nameWithType: DefaultValueParser.IParser<UInt16>.TryParse
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.UInt16>.TryParse
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#UInt32}#Parse(System.String)
  name: IParser<UInt32>.Parse(String)
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_UInt32__Parse_System_String_
  commentId: M:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#UInt32}#Parse(System.String)
  name.vb: ComplicatedPrimitives.IParser<System.UInt32>.Parse(String)
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.UInt32>.Parse(System.String)
  nameWithType: DefaultValueParser.IParser<UInt32>.Parse(String)
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.UInt32>.Parse(String)
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#UInt32}#Parse*
  name: IParser<UInt32>.Parse
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_UInt32__Parse_
  commentId: Overload:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#UInt32}#Parse
  isSpec: "True"
  name.vb: ComplicatedPrimitives.IParser<System.UInt32>.Parse
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.UInt32>.Parse
  nameWithType: DefaultValueParser.IParser<UInt32>.Parse
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.UInt32>.Parse
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#UInt32}#TryParse(System.String,System.UInt32@)
  name: IParser<UInt32>.TryParse(String, out UInt32)
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_UInt32__TryParse_System_String_System_UInt32__
  commentId: M:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#UInt32}#TryParse(System.String,System.UInt32@)
  name.vb: ComplicatedPrimitives.IParser<System.UInt32>.TryParse(String, ByRef UInt32)
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.UInt32>.TryParse(System.String, out System.UInt32)
  fullName.vb: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.UInt32>.TryParse(System.String, ByRef System.UInt32)
  nameWithType: DefaultValueParser.IParser<UInt32>.TryParse(String, out UInt32)
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.UInt32>.TryParse(String, ByRef UInt32)
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#UInt32}#TryParse*
  name: IParser<UInt32>.TryParse
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_UInt32__TryParse_
  commentId: Overload:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#UInt32}#TryParse
  isSpec: "True"
  name.vb: ComplicatedPrimitives.IParser<System.UInt32>.TryParse
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.UInt32>.TryParse
  nameWithType: DefaultValueParser.IParser<UInt32>.TryParse
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.UInt32>.TryParse
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#UInt64}#Parse(System.String)
  name: IParser<UInt64>.Parse(String)
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_UInt64__Parse_System_String_
  commentId: M:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#UInt64}#Parse(System.String)
  name.vb: ComplicatedPrimitives.IParser<System.UInt64>.Parse(String)
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.UInt64>.Parse(System.String)
  nameWithType: DefaultValueParser.IParser<UInt64>.Parse(String)
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.UInt64>.Parse(String)
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#UInt64}#Parse*
  name: IParser<UInt64>.Parse
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_UInt64__Parse_
  commentId: Overload:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#UInt64}#Parse
  isSpec: "True"
  name.vb: ComplicatedPrimitives.IParser<System.UInt64>.Parse
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.UInt64>.Parse
  nameWithType: DefaultValueParser.IParser<UInt64>.Parse
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.UInt64>.Parse
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#UInt64}#TryParse(System.String,System.UInt64@)
  name: IParser<UInt64>.TryParse(String, out UInt64)
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_UInt64__TryParse_System_String_System_UInt64__
  commentId: M:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#UInt64}#TryParse(System.String,System.UInt64@)
  name.vb: ComplicatedPrimitives.IParser<System.UInt64>.TryParse(String, ByRef UInt64)
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.UInt64>.TryParse(System.String, out System.UInt64)
  fullName.vb: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.UInt64>.TryParse(System.String, ByRef System.UInt64)
  nameWithType: DefaultValueParser.IParser<UInt64>.TryParse(String, out UInt64)
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.UInt64>.TryParse(String, ByRef UInt64)
- uid: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#UInt64}#TryParse*
  name: IParser<UInt64>.TryParse
  href: api/ComplicatedPrimitives.DefaultValueParser.html#ComplicatedPrimitives_DefaultValueParser_ComplicatedPrimitives_IParser_System_UInt64__TryParse_
  commentId: Overload:ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives#IParser{System#UInt64}#TryParse
  isSpec: "True"
  name.vb: ComplicatedPrimitives.IParser<System.UInt64>.TryParse
  fullName: ComplicatedPrimitives.DefaultValueParser.ComplicatedPrimitives.IParser<System.UInt64>.TryParse
  nameWithType: DefaultValueParser.IParser<UInt64>.TryParse
  nameWithType.vb: DefaultValueParser.ComplicatedPrimitives.IParser<System.UInt64>.TryParse
- uid: ComplicatedPrimitives.DirectedLimit
  name: DirectedLimit
  href: api/ComplicatedPrimitives.DirectedLimit.html
  commentId: T:ComplicatedPrimitives.DirectedLimit
  fullName: ComplicatedPrimitives.DirectedLimit
  nameWithType: DirectedLimit
- uid: ComplicatedPrimitives.DirectedLimit.ProperSubset*
  name: ProperSubset
  href: api/ComplicatedPrimitives.DirectedLimit.html#ComplicatedPrimitives_DirectedLimit_ProperSubset_
  commentId: Overload:ComplicatedPrimitives.DirectedLimit.ProperSubset
  isSpec: "True"
  fullName: ComplicatedPrimitives.DirectedLimit.ProperSubset
  nameWithType: DirectedLimit.ProperSubset
- uid: ComplicatedPrimitives.DirectedLimit.ProperSubset``1(ComplicatedPrimitives.DirectedLimit{``0},ComplicatedPrimitives.DirectedLimit{``0})
  name: ProperSubset<T>(DirectedLimit<T>, DirectedLimit<T>)
  href: api/ComplicatedPrimitives.DirectedLimit.html#ComplicatedPrimitives_DirectedLimit_ProperSubset__1_ComplicatedPrimitives_DirectedLimit___0__ComplicatedPrimitives_DirectedLimit___0__
  commentId: M:ComplicatedPrimitives.DirectedLimit.ProperSubset``1(ComplicatedPrimitives.DirectedLimit{``0},ComplicatedPrimitives.DirectedLimit{``0})
  name.vb: ProperSubset(Of T)(DirectedLimit(Of T), DirectedLimit(Of T))
  fullName: ComplicatedPrimitives.DirectedLimit.ProperSubset<T>(ComplicatedPrimitives.DirectedLimit<T>, ComplicatedPrimitives.DirectedLimit<T>)
  fullName.vb: ComplicatedPrimitives.DirectedLimit.ProperSubset(Of T)(ComplicatedPrimitives.DirectedLimit(Of T), ComplicatedPrimitives.DirectedLimit(Of T))
  nameWithType: DirectedLimit.ProperSubset<T>(DirectedLimit<T>, DirectedLimit<T>)
  nameWithType.vb: DirectedLimit.ProperSubset(Of T)(DirectedLimit(Of T), DirectedLimit(Of T))
- uid: ComplicatedPrimitives.DirectedLimit.ProperSuperset*
  name: ProperSuperset
  href: api/ComplicatedPrimitives.DirectedLimit.html#ComplicatedPrimitives_DirectedLimit_ProperSuperset_
  commentId: Overload:ComplicatedPrimitives.DirectedLimit.ProperSuperset
  isSpec: "True"
  fullName: ComplicatedPrimitives.DirectedLimit.ProperSuperset
  nameWithType: DirectedLimit.ProperSuperset
- uid: ComplicatedPrimitives.DirectedLimit.ProperSuperset``1(ComplicatedPrimitives.DirectedLimit{``0},ComplicatedPrimitives.DirectedLimit{``0})
  name: ProperSuperset<T>(DirectedLimit<T>, DirectedLimit<T>)
  href: api/ComplicatedPrimitives.DirectedLimit.html#ComplicatedPrimitives_DirectedLimit_ProperSuperset__1_ComplicatedPrimitives_DirectedLimit___0__ComplicatedPrimitives_DirectedLimit___0__
  commentId: M:ComplicatedPrimitives.DirectedLimit.ProperSuperset``1(ComplicatedPrimitives.DirectedLimit{``0},ComplicatedPrimitives.DirectedLimit{``0})
  name.vb: ProperSuperset(Of T)(DirectedLimit(Of T), DirectedLimit(Of T))
  fullName: ComplicatedPrimitives.DirectedLimit.ProperSuperset<T>(ComplicatedPrimitives.DirectedLimit<T>, ComplicatedPrimitives.DirectedLimit<T>)
  fullName.vb: ComplicatedPrimitives.DirectedLimit.ProperSuperset(Of T)(ComplicatedPrimitives.DirectedLimit(Of T), ComplicatedPrimitives.DirectedLimit(Of T))
  nameWithType: DirectedLimit.ProperSuperset<T>(DirectedLimit<T>, DirectedLimit<T>)
  nameWithType.vb: DirectedLimit.ProperSuperset(Of T)(DirectedLimit(Of T), DirectedLimit(Of T))
- uid: ComplicatedPrimitives.DirectedLimit.Subset*
  name: Subset
  href: api/ComplicatedPrimitives.DirectedLimit.html#ComplicatedPrimitives_DirectedLimit_Subset_
  commentId: Overload:ComplicatedPrimitives.DirectedLimit.Subset
  isSpec: "True"
  fullName: ComplicatedPrimitives.DirectedLimit.Subset
  nameWithType: DirectedLimit.Subset
- uid: ComplicatedPrimitives.DirectedLimit.Subset``1(ComplicatedPrimitives.DirectedLimit{``0},ComplicatedPrimitives.DirectedLimit{``0})
  name: Subset<T>(DirectedLimit<T>, DirectedLimit<T>)
  href: api/ComplicatedPrimitives.DirectedLimit.html#ComplicatedPrimitives_DirectedLimit_Subset__1_ComplicatedPrimitives_DirectedLimit___0__ComplicatedPrimitives_DirectedLimit___0__
  commentId: M:ComplicatedPrimitives.DirectedLimit.Subset``1(ComplicatedPrimitives.DirectedLimit{``0},ComplicatedPrimitives.DirectedLimit{``0})
  name.vb: Subset(Of T)(DirectedLimit(Of T), DirectedLimit(Of T))
  fullName: ComplicatedPrimitives.DirectedLimit.Subset<T>(ComplicatedPrimitives.DirectedLimit<T>, ComplicatedPrimitives.DirectedLimit<T>)
  fullName.vb: ComplicatedPrimitives.DirectedLimit.Subset(Of T)(ComplicatedPrimitives.DirectedLimit(Of T), ComplicatedPrimitives.DirectedLimit(Of T))
  nameWithType: DirectedLimit.Subset<T>(DirectedLimit<T>, DirectedLimit<T>)
  nameWithType.vb: DirectedLimit.Subset(Of T)(DirectedLimit(Of T), DirectedLimit(Of T))
- uid: ComplicatedPrimitives.DirectedLimit.Superset*
  name: Superset
  href: api/ComplicatedPrimitives.DirectedLimit.html#ComplicatedPrimitives_DirectedLimit_Superset_
  commentId: Overload:ComplicatedPrimitives.DirectedLimit.Superset
  isSpec: "True"
  fullName: ComplicatedPrimitives.DirectedLimit.Superset
  nameWithType: DirectedLimit.Superset
- uid: ComplicatedPrimitives.DirectedLimit.Superset``1(ComplicatedPrimitives.DirectedLimit{``0},ComplicatedPrimitives.DirectedLimit{``0})
  name: Superset<T>(DirectedLimit<T>, DirectedLimit<T>)
  href: api/ComplicatedPrimitives.DirectedLimit.html#ComplicatedPrimitives_DirectedLimit_Superset__1_ComplicatedPrimitives_DirectedLimit___0__ComplicatedPrimitives_DirectedLimit___0__
  commentId: M:ComplicatedPrimitives.DirectedLimit.Superset``1(ComplicatedPrimitives.DirectedLimit{``0},ComplicatedPrimitives.DirectedLimit{``0})
  name.vb: Superset(Of T)(DirectedLimit(Of T), DirectedLimit(Of T))
  fullName: ComplicatedPrimitives.DirectedLimit.Superset<T>(ComplicatedPrimitives.DirectedLimit<T>, ComplicatedPrimitives.DirectedLimit<T>)
  fullName.vb: ComplicatedPrimitives.DirectedLimit.Superset(Of T)(ComplicatedPrimitives.DirectedLimit(Of T), ComplicatedPrimitives.DirectedLimit(Of T))
  nameWithType: DirectedLimit.Superset<T>(DirectedLimit<T>, DirectedLimit<T>)
  nameWithType.vb: DirectedLimit.Superset(Of T)(DirectedLimit(Of T), DirectedLimit(Of T))
- uid: ComplicatedPrimitives.DirectedLimit`1
  name: DirectedLimit<T>
  href: api/ComplicatedPrimitives.DirectedLimit-1.html
  commentId: T:ComplicatedPrimitives.DirectedLimit`1
  name.vb: DirectedLimit(Of T)
  fullName: ComplicatedPrimitives.DirectedLimit<T>
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T)
  nameWithType: DirectedLimit<T>
  nameWithType.vb: DirectedLimit(Of T)
- uid: ComplicatedPrimitives.DirectedLimit`1.#ctor(`0,ComplicatedPrimitives.LimitPointType,ComplicatedPrimitives.LimitSide)
  name: DirectedLimit(T, LimitPointType, LimitSide)
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1__ctor__0_ComplicatedPrimitives_LimitPointType_ComplicatedPrimitives_LimitSide_
  commentId: M:ComplicatedPrimitives.DirectedLimit`1.#ctor(`0,ComplicatedPrimitives.LimitPointType,ComplicatedPrimitives.LimitSide)
  fullName: ComplicatedPrimitives.DirectedLimit<T>.DirectedLimit(T, ComplicatedPrimitives.LimitPointType, ComplicatedPrimitives.LimitSide)
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).DirectedLimit(T, ComplicatedPrimitives.LimitPointType, ComplicatedPrimitives.LimitSide)
  nameWithType: DirectedLimit<T>.DirectedLimit(T, LimitPointType, LimitSide)
  nameWithType.vb: DirectedLimit(Of T).DirectedLimit(T, LimitPointType, LimitSide)
- uid: ComplicatedPrimitives.DirectedLimit`1.#ctor(ComplicatedPrimitives.LimitPoint{`0},ComplicatedPrimitives.LimitSide)
  name: DirectedLimit(LimitPoint<T>, LimitSide)
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1__ctor_ComplicatedPrimitives_LimitPoint__0__ComplicatedPrimitives_LimitSide_
  commentId: M:ComplicatedPrimitives.DirectedLimit`1.#ctor(ComplicatedPrimitives.LimitPoint{`0},ComplicatedPrimitives.LimitSide)
  name.vb: DirectedLimit(LimitPoint(Of T), LimitSide)
  fullName: ComplicatedPrimitives.DirectedLimit<T>.DirectedLimit(ComplicatedPrimitives.LimitPoint<T>, ComplicatedPrimitives.LimitSide)
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).DirectedLimit(ComplicatedPrimitives.LimitPoint(Of T), ComplicatedPrimitives.LimitSide)
  nameWithType: DirectedLimit<T>.DirectedLimit(LimitPoint<T>, LimitSide)
  nameWithType.vb: DirectedLimit(Of T).DirectedLimit(LimitPoint(Of T), LimitSide)
- uid: ComplicatedPrimitives.DirectedLimit`1.#ctor*
  name: DirectedLimit
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1__ctor_
  commentId: Overload:ComplicatedPrimitives.DirectedLimit`1.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.DirectedLimit<T>.DirectedLimit
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).DirectedLimit
  nameWithType: DirectedLimit<T>.DirectedLimit
  nameWithType.vb: DirectedLimit(Of T).DirectedLimit
- uid: ComplicatedPrimitives.DirectedLimit`1.ClosedSign
  name: ClosedSign
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_ClosedSign
  commentId: F:ComplicatedPrimitives.DirectedLimit`1.ClosedSign
  fullName: ComplicatedPrimitives.DirectedLimit<T>.ClosedSign
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).ClosedSign
  nameWithType: DirectedLimit<T>.ClosedSign
  nameWithType.vb: DirectedLimit(Of T).ClosedSign
- uid: ComplicatedPrimitives.DirectedLimit`1.CompareTo(ComplicatedPrimitives.DirectedLimit{`0})
  name: CompareTo(DirectedLimit<T>)
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_CompareTo_ComplicatedPrimitives_DirectedLimit__0__
  commentId: M:ComplicatedPrimitives.DirectedLimit`1.CompareTo(ComplicatedPrimitives.DirectedLimit{`0})
  name.vb: CompareTo(DirectedLimit(Of T))
  fullName: ComplicatedPrimitives.DirectedLimit<T>.CompareTo(ComplicatedPrimitives.DirectedLimit<T>)
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).CompareTo(ComplicatedPrimitives.DirectedLimit(Of T))
  nameWithType: DirectedLimit<T>.CompareTo(DirectedLimit<T>)
  nameWithType.vb: DirectedLimit(Of T).CompareTo(DirectedLimit(Of T))
- uid: ComplicatedPrimitives.DirectedLimit`1.CompareTo*
  name: CompareTo
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_CompareTo_
  commentId: Overload:ComplicatedPrimitives.DirectedLimit`1.CompareTo
  isSpec: "True"
  fullName: ComplicatedPrimitives.DirectedLimit<T>.CompareTo
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).CompareTo
  nameWithType: DirectedLimit<T>.CompareTo
  nameWithType.vb: DirectedLimit(Of T).CompareTo
- uid: ComplicatedPrimitives.DirectedLimit`1.Complements(ComplicatedPrimitives.DirectedLimit{`0})
  name: Complements(DirectedLimit<T>)
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_Complements_ComplicatedPrimitives_DirectedLimit__0__
  commentId: M:ComplicatedPrimitives.DirectedLimit`1.Complements(ComplicatedPrimitives.DirectedLimit{`0})
  name.vb: Complements(DirectedLimit(Of T))
  fullName: ComplicatedPrimitives.DirectedLimit<T>.Complements(ComplicatedPrimitives.DirectedLimit<T>)
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).Complements(ComplicatedPrimitives.DirectedLimit(Of T))
  nameWithType: DirectedLimit<T>.Complements(DirectedLimit<T>)
  nameWithType.vb: DirectedLimit(Of T).Complements(DirectedLimit(Of T))
- uid: ComplicatedPrimitives.DirectedLimit`1.Complements*
  name: Complements
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_Complements_
  commentId: Overload:ComplicatedPrimitives.DirectedLimit`1.Complements
  isSpec: "True"
  fullName: ComplicatedPrimitives.DirectedLimit<T>.Complements
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).Complements
  nameWithType: DirectedLimit<T>.Complements
  nameWithType.vb: DirectedLimit(Of T).Complements
- uid: ComplicatedPrimitives.DirectedLimit`1.Contains(`0)
  name: Contains(T)
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_Contains__0_
  commentId: M:ComplicatedPrimitives.DirectedLimit`1.Contains(`0)
  fullName: ComplicatedPrimitives.DirectedLimit<T>.Contains(T)
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).Contains(T)
  nameWithType: DirectedLimit<T>.Contains(T)
  nameWithType.vb: DirectedLimit(Of T).Contains(T)
- uid: ComplicatedPrimitives.DirectedLimit`1.Contains*
  name: Contains
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_Contains_
  commentId: Overload:ComplicatedPrimitives.DirectedLimit`1.Contains
  isSpec: "True"
  fullName: ComplicatedPrimitives.DirectedLimit<T>.Contains
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).Contains
  nameWithType: DirectedLimit<T>.Contains
  nameWithType.vb: DirectedLimit(Of T).Contains
- uid: ComplicatedPrimitives.DirectedLimit`1.Equals(ComplicatedPrimitives.DirectedLimit{`0})
  name: Equals(DirectedLimit<T>)
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_Equals_ComplicatedPrimitives_DirectedLimit__0__
  commentId: M:ComplicatedPrimitives.DirectedLimit`1.Equals(ComplicatedPrimitives.DirectedLimit{`0})
  name.vb: Equals(DirectedLimit(Of T))
  fullName: ComplicatedPrimitives.DirectedLimit<T>.Equals(ComplicatedPrimitives.DirectedLimit<T>)
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).Equals(ComplicatedPrimitives.DirectedLimit(Of T))
  nameWithType: DirectedLimit<T>.Equals(DirectedLimit<T>)
  nameWithType.vb: DirectedLimit(Of T).Equals(DirectedLimit(Of T))
- uid: ComplicatedPrimitives.DirectedLimit`1.Equals(System.Object)
  name: Equals(Object)
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_Equals_System_Object_
  commentId: M:ComplicatedPrimitives.DirectedLimit`1.Equals(System.Object)
  fullName: ComplicatedPrimitives.DirectedLimit<T>.Equals(System.Object)
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).Equals(System.Object)
  nameWithType: DirectedLimit<T>.Equals(Object)
  nameWithType.vb: DirectedLimit(Of T).Equals(Object)
- uid: ComplicatedPrimitives.DirectedLimit`1.Equals*
  name: Equals
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_Equals_
  commentId: Overload:ComplicatedPrimitives.DirectedLimit`1.Equals
  isSpec: "True"
  fullName: ComplicatedPrimitives.DirectedLimit<T>.Equals
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).Equals
  nameWithType: DirectedLimit<T>.Equals
  nameWithType.vb: DirectedLimit(Of T).Equals
- uid: ComplicatedPrimitives.DirectedLimit`1.GetComplement
  name: GetComplement()
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_GetComplement
  commentId: M:ComplicatedPrimitives.DirectedLimit`1.GetComplement
  fullName: ComplicatedPrimitives.DirectedLimit<T>.GetComplement()
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).GetComplement()
  nameWithType: DirectedLimit<T>.GetComplement()
  nameWithType.vb: DirectedLimit(Of T).GetComplement()
- uid: ComplicatedPrimitives.DirectedLimit`1.GetComplement*
  name: GetComplement
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_GetComplement_
  commentId: Overload:ComplicatedPrimitives.DirectedLimit`1.GetComplement
  isSpec: "True"
  fullName: ComplicatedPrimitives.DirectedLimit<T>.GetComplement
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).GetComplement
  nameWithType: DirectedLimit<T>.GetComplement
  nameWithType.vb: DirectedLimit(Of T).GetComplement
- uid: ComplicatedPrimitives.DirectedLimit`1.GetHashCode
  name: GetHashCode()
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_GetHashCode
  commentId: M:ComplicatedPrimitives.DirectedLimit`1.GetHashCode
  fullName: ComplicatedPrimitives.DirectedLimit<T>.GetHashCode()
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).GetHashCode()
  nameWithType: DirectedLimit<T>.GetHashCode()
  nameWithType.vb: DirectedLimit(Of T).GetHashCode()
- uid: ComplicatedPrimitives.DirectedLimit`1.GetHashCode*
  name: GetHashCode
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_GetHashCode_
  commentId: Overload:ComplicatedPrimitives.DirectedLimit`1.GetHashCode
  isSpec: "True"
  fullName: ComplicatedPrimitives.DirectedLimit<T>.GetHashCode
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).GetHashCode
  nameWithType: DirectedLimit<T>.GetHashCode
  nameWithType.vb: DirectedLimit(Of T).GetHashCode
- uid: ComplicatedPrimitives.DirectedLimit`1.IntersectsWith(ComplicatedPrimitives.DirectedLimit{`0})
  name: IntersectsWith(DirectedLimit<T>)
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_IntersectsWith_ComplicatedPrimitives_DirectedLimit__0__
  commentId: M:ComplicatedPrimitives.DirectedLimit`1.IntersectsWith(ComplicatedPrimitives.DirectedLimit{`0})
  name.vb: IntersectsWith(DirectedLimit(Of T))
  fullName: ComplicatedPrimitives.DirectedLimit<T>.IntersectsWith(ComplicatedPrimitives.DirectedLimit<T>)
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).IntersectsWith(ComplicatedPrimitives.DirectedLimit(Of T))
  nameWithType: DirectedLimit<T>.IntersectsWith(DirectedLimit<T>)
  nameWithType.vb: DirectedLimit(Of T).IntersectsWith(DirectedLimit(Of T))
- uid: ComplicatedPrimitives.DirectedLimit`1.IntersectsWith*
  name: IntersectsWith
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_IntersectsWith_
  commentId: Overload:ComplicatedPrimitives.DirectedLimit`1.IntersectsWith
  isSpec: "True"
  fullName: ComplicatedPrimitives.DirectedLimit<T>.IntersectsWith
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).IntersectsWith
  nameWithType: DirectedLimit<T>.IntersectsWith
  nameWithType.vb: DirectedLimit(Of T).IntersectsWith
- uid: ComplicatedPrimitives.DirectedLimit`1.IsDefined
  name: IsDefined
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_IsDefined
  commentId: P:ComplicatedPrimitives.DirectedLimit`1.IsDefined
  fullName: ComplicatedPrimitives.DirectedLimit<T>.IsDefined
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).IsDefined
  nameWithType: DirectedLimit<T>.IsDefined
  nameWithType.vb: DirectedLimit(Of T).IsDefined
- uid: ComplicatedPrimitives.DirectedLimit`1.IsDefined*
  name: IsDefined
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_IsDefined_
  commentId: Overload:ComplicatedPrimitives.DirectedLimit`1.IsDefined
  isSpec: "True"
  fullName: ComplicatedPrimitives.DirectedLimit<T>.IsDefined
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).IsDefined
  nameWithType: DirectedLimit<T>.IsDefined
  nameWithType.vb: DirectedLimit(Of T).IsDefined
- uid: ComplicatedPrimitives.DirectedLimit`1.IsProperSubsetOf(ComplicatedPrimitives.DirectedLimit{`0})
  name: IsProperSubsetOf(DirectedLimit<T>)
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_IsProperSubsetOf_ComplicatedPrimitives_DirectedLimit__0__
  commentId: M:ComplicatedPrimitives.DirectedLimit`1.IsProperSubsetOf(ComplicatedPrimitives.DirectedLimit{`0})
  name.vb: IsProperSubsetOf(DirectedLimit(Of T))
  fullName: ComplicatedPrimitives.DirectedLimit<T>.IsProperSubsetOf(ComplicatedPrimitives.DirectedLimit<T>)
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).IsProperSubsetOf(ComplicatedPrimitives.DirectedLimit(Of T))
  nameWithType: DirectedLimit<T>.IsProperSubsetOf(DirectedLimit<T>)
  nameWithType.vb: DirectedLimit(Of T).IsProperSubsetOf(DirectedLimit(Of T))
- uid: ComplicatedPrimitives.DirectedLimit`1.IsProperSubsetOf*
  name: IsProperSubsetOf
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_IsProperSubsetOf_
  commentId: Overload:ComplicatedPrimitives.DirectedLimit`1.IsProperSubsetOf
  isSpec: "True"
  fullName: ComplicatedPrimitives.DirectedLimit<T>.IsProperSubsetOf
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).IsProperSubsetOf
  nameWithType: DirectedLimit<T>.IsProperSubsetOf
  nameWithType.vb: DirectedLimit(Of T).IsProperSubsetOf
- uid: ComplicatedPrimitives.DirectedLimit`1.IsProperSupersetOf(ComplicatedPrimitives.DirectedLimit{`0})
  name: IsProperSupersetOf(DirectedLimit<T>)
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_IsProperSupersetOf_ComplicatedPrimitives_DirectedLimit__0__
  commentId: M:ComplicatedPrimitives.DirectedLimit`1.IsProperSupersetOf(ComplicatedPrimitives.DirectedLimit{`0})
  name.vb: IsProperSupersetOf(DirectedLimit(Of T))
  fullName: ComplicatedPrimitives.DirectedLimit<T>.IsProperSupersetOf(ComplicatedPrimitives.DirectedLimit<T>)
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).IsProperSupersetOf(ComplicatedPrimitives.DirectedLimit(Of T))
  nameWithType: DirectedLimit<T>.IsProperSupersetOf(DirectedLimit<T>)
  nameWithType.vb: DirectedLimit(Of T).IsProperSupersetOf(DirectedLimit(Of T))
- uid: ComplicatedPrimitives.DirectedLimit`1.IsProperSupersetOf*
  name: IsProperSupersetOf
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_IsProperSupersetOf_
  commentId: Overload:ComplicatedPrimitives.DirectedLimit`1.IsProperSupersetOf
  isSpec: "True"
  fullName: ComplicatedPrimitives.DirectedLimit<T>.IsProperSupersetOf
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).IsProperSupersetOf
  nameWithType: DirectedLimit<T>.IsProperSupersetOf
  nameWithType.vb: DirectedLimit(Of T).IsProperSupersetOf
- uid: ComplicatedPrimitives.DirectedLimit`1.IsSubsetOf(ComplicatedPrimitives.DirectedLimit{`0})
  name: IsSubsetOf(DirectedLimit<T>)
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_IsSubsetOf_ComplicatedPrimitives_DirectedLimit__0__
  commentId: M:ComplicatedPrimitives.DirectedLimit`1.IsSubsetOf(ComplicatedPrimitives.DirectedLimit{`0})
  name.vb: IsSubsetOf(DirectedLimit(Of T))
  fullName: ComplicatedPrimitives.DirectedLimit<T>.IsSubsetOf(ComplicatedPrimitives.DirectedLimit<T>)
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).IsSubsetOf(ComplicatedPrimitives.DirectedLimit(Of T))
  nameWithType: DirectedLimit<T>.IsSubsetOf(DirectedLimit<T>)
  nameWithType.vb: DirectedLimit(Of T).IsSubsetOf(DirectedLimit(Of T))
- uid: ComplicatedPrimitives.DirectedLimit`1.IsSubsetOf*
  name: IsSubsetOf
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_IsSubsetOf_
  commentId: Overload:ComplicatedPrimitives.DirectedLimit`1.IsSubsetOf
  isSpec: "True"
  fullName: ComplicatedPrimitives.DirectedLimit<T>.IsSubsetOf
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).IsSubsetOf
  nameWithType: DirectedLimit<T>.IsSubsetOf
  nameWithType.vb: DirectedLimit(Of T).IsSubsetOf
- uid: ComplicatedPrimitives.DirectedLimit`1.IsSupersetOf(ComplicatedPrimitives.DirectedLimit{`0})
  name: IsSupersetOf(DirectedLimit<T>)
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_IsSupersetOf_ComplicatedPrimitives_DirectedLimit__0__
  commentId: M:ComplicatedPrimitives.DirectedLimit`1.IsSupersetOf(ComplicatedPrimitives.DirectedLimit{`0})
  name.vb: IsSupersetOf(DirectedLimit(Of T))
  fullName: ComplicatedPrimitives.DirectedLimit<T>.IsSupersetOf(ComplicatedPrimitives.DirectedLimit<T>)
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).IsSupersetOf(ComplicatedPrimitives.DirectedLimit(Of T))
  nameWithType: DirectedLimit<T>.IsSupersetOf(DirectedLimit<T>)
  nameWithType.vb: DirectedLimit(Of T).IsSupersetOf(DirectedLimit(Of T))
- uid: ComplicatedPrimitives.DirectedLimit`1.IsSupersetOf*
  name: IsSupersetOf
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_IsSupersetOf_
  commentId: Overload:ComplicatedPrimitives.DirectedLimit`1.IsSupersetOf
  isSpec: "True"
  fullName: ComplicatedPrimitives.DirectedLimit<T>.IsSupersetOf
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).IsSupersetOf
  nameWithType: DirectedLimit<T>.IsSupersetOf
  nameWithType.vb: DirectedLimit(Of T).IsSupersetOf
- uid: ComplicatedPrimitives.DirectedLimit`1.IsUndefined
  name: IsUndefined
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_IsUndefined
  commentId: P:ComplicatedPrimitives.DirectedLimit`1.IsUndefined
  fullName: ComplicatedPrimitives.DirectedLimit<T>.IsUndefined
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).IsUndefined
  nameWithType: DirectedLimit<T>.IsUndefined
  nameWithType.vb: DirectedLimit(Of T).IsUndefined
- uid: ComplicatedPrimitives.DirectedLimit`1.IsUndefined*
  name: IsUndefined
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_IsUndefined_
  commentId: Overload:ComplicatedPrimitives.DirectedLimit`1.IsUndefined
  isSpec: "True"
  fullName: ComplicatedPrimitives.DirectedLimit<T>.IsUndefined
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).IsUndefined
  nameWithType: DirectedLimit<T>.IsUndefined
  nameWithType.vb: DirectedLimit(Of T).IsUndefined
- uid: ComplicatedPrimitives.DirectedLimit`1.LeftInfinity
  name: LeftInfinity
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_LeftInfinity
  commentId: F:ComplicatedPrimitives.DirectedLimit`1.LeftInfinity
  fullName: ComplicatedPrimitives.DirectedLimit<T>.LeftInfinity
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).LeftInfinity
  nameWithType: DirectedLimit<T>.LeftInfinity
  nameWithType.vb: DirectedLimit(Of T).LeftInfinity
- uid: ComplicatedPrimitives.DirectedLimit`1.Map*
  name: Map
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_Map_
  commentId: Overload:ComplicatedPrimitives.DirectedLimit`1.Map
  isSpec: "True"
  fullName: ComplicatedPrimitives.DirectedLimit<T>.Map
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).Map
  nameWithType: DirectedLimit<T>.Map
  nameWithType.vb: DirectedLimit(Of T).Map
- uid: ComplicatedPrimitives.DirectedLimit`1.Map``1(System.Func{`0,``0})
  name: Map<TResult>(Func<T, TResult>)
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_Map__1_System_Func__0___0__
  commentId: M:ComplicatedPrimitives.DirectedLimit`1.Map``1(System.Func{`0,``0})
  name.vb: Map(Of TResult)(Func(Of T, TResult))
  fullName: ComplicatedPrimitives.DirectedLimit<T>.Map<TResult>(System.Func<T, TResult>)
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).Map(Of TResult)(System.Func(Of T, TResult))
  nameWithType: DirectedLimit<T>.Map<TResult>(Func<T, TResult>)
  nameWithType.vb: DirectedLimit(Of T).Map(Of TResult)(Func(Of T, TResult))
- uid: ComplicatedPrimitives.DirectedLimit`1.op_Equality(ComplicatedPrimitives.DirectedLimit{`0},ComplicatedPrimitives.DirectedLimit{`0})
  name: Equality(DirectedLimit<T>, DirectedLimit<T>)
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_op_Equality_ComplicatedPrimitives_DirectedLimit__0__ComplicatedPrimitives_DirectedLimit__0__
  commentId: M:ComplicatedPrimitives.DirectedLimit`1.op_Equality(ComplicatedPrimitives.DirectedLimit{`0},ComplicatedPrimitives.DirectedLimit{`0})
  name.vb: Equality(DirectedLimit(Of T), DirectedLimit(Of T))
  fullName: ComplicatedPrimitives.DirectedLimit<T>.Equality(ComplicatedPrimitives.DirectedLimit<T>, ComplicatedPrimitives.DirectedLimit<T>)
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).Equality(ComplicatedPrimitives.DirectedLimit(Of T), ComplicatedPrimitives.DirectedLimit(Of T))
  nameWithType: DirectedLimit<T>.Equality(DirectedLimit<T>, DirectedLimit<T>)
  nameWithType.vb: DirectedLimit(Of T).Equality(DirectedLimit(Of T), DirectedLimit(Of T))
- uid: ComplicatedPrimitives.DirectedLimit`1.op_Equality*
  name: Equality
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_op_Equality_
  commentId: Overload:ComplicatedPrimitives.DirectedLimit`1.op_Equality
  isSpec: "True"
  fullName: ComplicatedPrimitives.DirectedLimit<T>.Equality
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).Equality
  nameWithType: DirectedLimit<T>.Equality
  nameWithType.vb: DirectedLimit(Of T).Equality
- uid: ComplicatedPrimitives.DirectedLimit`1.op_Inequality(ComplicatedPrimitives.DirectedLimit{`0},ComplicatedPrimitives.DirectedLimit{`0})
  name: Inequality(DirectedLimit<T>, DirectedLimit<T>)
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_op_Inequality_ComplicatedPrimitives_DirectedLimit__0__ComplicatedPrimitives_DirectedLimit__0__
  commentId: M:ComplicatedPrimitives.DirectedLimit`1.op_Inequality(ComplicatedPrimitives.DirectedLimit{`0},ComplicatedPrimitives.DirectedLimit{`0})
  name.vb: Inequality(DirectedLimit(Of T), DirectedLimit(Of T))
  fullName: ComplicatedPrimitives.DirectedLimit<T>.Inequality(ComplicatedPrimitives.DirectedLimit<T>, ComplicatedPrimitives.DirectedLimit<T>)
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).Inequality(ComplicatedPrimitives.DirectedLimit(Of T), ComplicatedPrimitives.DirectedLimit(Of T))
  nameWithType: DirectedLimit<T>.Inequality(DirectedLimit<T>, DirectedLimit<T>)
  nameWithType.vb: DirectedLimit(Of T).Inequality(DirectedLimit(Of T), DirectedLimit(Of T))
- uid: ComplicatedPrimitives.DirectedLimit`1.op_Inequality*
  name: Inequality
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_op_Inequality_
  commentId: Overload:ComplicatedPrimitives.DirectedLimit`1.op_Inequality
  isSpec: "True"
  fullName: ComplicatedPrimitives.DirectedLimit<T>.Inequality
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).Inequality
  nameWithType: DirectedLimit<T>.Inequality
  nameWithType.vb: DirectedLimit(Of T).Inequality
- uid: ComplicatedPrimitives.DirectedLimit`1.op_OnesComplement(ComplicatedPrimitives.DirectedLimit{`0})
  name: OnesComplement(DirectedLimit<T>)
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_op_OnesComplement_ComplicatedPrimitives_DirectedLimit__0__
  commentId: M:ComplicatedPrimitives.DirectedLimit`1.op_OnesComplement(ComplicatedPrimitives.DirectedLimit{`0})
  name.vb: OnesComplement(DirectedLimit(Of T))
  fullName: ComplicatedPrimitives.DirectedLimit<T>.OnesComplement(ComplicatedPrimitives.DirectedLimit<T>)
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).OnesComplement(ComplicatedPrimitives.DirectedLimit(Of T))
  nameWithType: DirectedLimit<T>.OnesComplement(DirectedLimit<T>)
  nameWithType.vb: DirectedLimit(Of T).OnesComplement(DirectedLimit(Of T))
- uid: ComplicatedPrimitives.DirectedLimit`1.op_OnesComplement*
  name: OnesComplement
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_op_OnesComplement_
  commentId: Overload:ComplicatedPrimitives.DirectedLimit`1.op_OnesComplement
  isSpec: "True"
  fullName: ComplicatedPrimitives.DirectedLimit<T>.OnesComplement
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).OnesComplement
  nameWithType: DirectedLimit<T>.OnesComplement
  nameWithType.vb: DirectedLimit(Of T).OnesComplement
- uid: ComplicatedPrimitives.DirectedLimit`1.OpenSign
  name: OpenSign
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_OpenSign
  commentId: F:ComplicatedPrimitives.DirectedLimit`1.OpenSign
  fullName: ComplicatedPrimitives.DirectedLimit<T>.OpenSign
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).OpenSign
  nameWithType: DirectedLimit<T>.OpenSign
  nameWithType.vb: DirectedLimit(Of T).OpenSign
- uid: ComplicatedPrimitives.DirectedLimit`1.Point
  name: Point
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_Point
  commentId: P:ComplicatedPrimitives.DirectedLimit`1.Point
  fullName: ComplicatedPrimitives.DirectedLimit<T>.Point
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).Point
  nameWithType: DirectedLimit<T>.Point
  nameWithType.vb: DirectedLimit(Of T).Point
- uid: ComplicatedPrimitives.DirectedLimit`1.Point*
  name: Point
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_Point_
  commentId: Overload:ComplicatedPrimitives.DirectedLimit`1.Point
  isSpec: "True"
  fullName: ComplicatedPrimitives.DirectedLimit<T>.Point
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).Point
  nameWithType: DirectedLimit<T>.Point
  nameWithType.vb: DirectedLimit(Of T).Point
- uid: ComplicatedPrimitives.DirectedLimit`1.RightInfinity
  name: RightInfinity
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_RightInfinity
  commentId: F:ComplicatedPrimitives.DirectedLimit`1.RightInfinity
  fullName: ComplicatedPrimitives.DirectedLimit<T>.RightInfinity
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).RightInfinity
  nameWithType: DirectedLimit<T>.RightInfinity
  nameWithType.vb: DirectedLimit(Of T).RightInfinity
- uid: ComplicatedPrimitives.DirectedLimit`1.Side
  name: Side
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_Side
  commentId: P:ComplicatedPrimitives.DirectedLimit`1.Side
  fullName: ComplicatedPrimitives.DirectedLimit<T>.Side
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).Side
  nameWithType: DirectedLimit<T>.Side
  nameWithType.vb: DirectedLimit(Of T).Side
- uid: ComplicatedPrimitives.DirectedLimit`1.Side*
  name: Side
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_Side_
  commentId: Overload:ComplicatedPrimitives.DirectedLimit`1.Side
  isSpec: "True"
  fullName: ComplicatedPrimitives.DirectedLimit<T>.Side
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).Side
  nameWithType: DirectedLimit<T>.Side
  nameWithType.vb: DirectedLimit(Of T).Side
- uid: ComplicatedPrimitives.DirectedLimit`1.ToString
  name: ToString()
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_ToString
  commentId: M:ComplicatedPrimitives.DirectedLimit`1.ToString
  fullName: ComplicatedPrimitives.DirectedLimit<T>.ToString()
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).ToString()
  nameWithType: DirectedLimit<T>.ToString()
  nameWithType.vb: DirectedLimit(Of T).ToString()
- uid: ComplicatedPrimitives.DirectedLimit`1.ToString*
  name: ToString
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_ToString_
  commentId: Overload:ComplicatedPrimitives.DirectedLimit`1.ToString
  isSpec: "True"
  fullName: ComplicatedPrimitives.DirectedLimit<T>.ToString
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).ToString
  nameWithType: DirectedLimit<T>.ToString
  nameWithType.vb: DirectedLimit(Of T).ToString
- uid: ComplicatedPrimitives.DirectedLimit`1.Translate(System.Func{`0,`0})
  name: Translate(Func<T, T>)
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_Translate_System_Func__0__0__
  commentId: M:ComplicatedPrimitives.DirectedLimit`1.Translate(System.Func{`0,`0})
  name.vb: Translate(Func(Of T, T))
  fullName: ComplicatedPrimitives.DirectedLimit<T>.Translate(System.Func<T, T>)
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).Translate(System.Func(Of T, T))
  nameWithType: DirectedLimit<T>.Translate(Func<T, T>)
  nameWithType.vb: DirectedLimit(Of T).Translate(Func(Of T, T))
- uid: ComplicatedPrimitives.DirectedLimit`1.Translate*
  name: Translate
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_Translate_
  commentId: Overload:ComplicatedPrimitives.DirectedLimit`1.Translate
  isSpec: "True"
  fullName: ComplicatedPrimitives.DirectedLimit<T>.Translate
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).Translate
  nameWithType: DirectedLimit<T>.Translate
  nameWithType.vb: DirectedLimit(Of T).Translate
- uid: ComplicatedPrimitives.DirectedLimit`1.Type
  name: Type
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_Type
  commentId: P:ComplicatedPrimitives.DirectedLimit`1.Type
  fullName: ComplicatedPrimitives.DirectedLimit<T>.Type
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).Type
  nameWithType: DirectedLimit<T>.Type
  nameWithType.vb: DirectedLimit(Of T).Type
- uid: ComplicatedPrimitives.DirectedLimit`1.Type*
  name: Type
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_Type_
  commentId: Overload:ComplicatedPrimitives.DirectedLimit`1.Type
  isSpec: "True"
  fullName: ComplicatedPrimitives.DirectedLimit<T>.Type
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).Type
  nameWithType: DirectedLimit<T>.Type
  nameWithType.vb: DirectedLimit(Of T).Type
- uid: ComplicatedPrimitives.DirectedLimit`1.Undefined
  name: Undefined
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_Undefined
  commentId: F:ComplicatedPrimitives.DirectedLimit`1.Undefined
  fullName: ComplicatedPrimitives.DirectedLimit<T>.Undefined
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).Undefined
  nameWithType: DirectedLimit<T>.Undefined
  nameWithType.vb: DirectedLimit(Of T).Undefined
- uid: ComplicatedPrimitives.DirectedLimit`1.UndefinedString
  name: UndefinedString
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_UndefinedString
  commentId: F:ComplicatedPrimitives.DirectedLimit`1.UndefinedString
  fullName: ComplicatedPrimitives.DirectedLimit<T>.UndefinedString
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).UndefinedString
  nameWithType: DirectedLimit<T>.UndefinedString
  nameWithType.vb: DirectedLimit(Of T).UndefinedString
- uid: ComplicatedPrimitives.DirectedLimit`1.Value
  name: Value
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_Value
  commentId: P:ComplicatedPrimitives.DirectedLimit`1.Value
  fullName: ComplicatedPrimitives.DirectedLimit<T>.Value
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).Value
  nameWithType: DirectedLimit<T>.Value
  nameWithType.vb: DirectedLimit(Of T).Value
- uid: ComplicatedPrimitives.DirectedLimit`1.Value*
  name: Value
  href: api/ComplicatedPrimitives.DirectedLimit-1.html#ComplicatedPrimitives_DirectedLimit_1_Value_
  commentId: Overload:ComplicatedPrimitives.DirectedLimit`1.Value
  isSpec: "True"
  fullName: ComplicatedPrimitives.DirectedLimit<T>.Value
  fullName.vb: ComplicatedPrimitives.DirectedLimit(Of T).Value
  nameWithType: DirectedLimit<T>.Value
  nameWithType.vb: DirectedLimit(Of T).Value
- uid: ComplicatedPrimitives.IComparativeSet`2
  name: IComparativeSet<TSet, T>
  href: api/ComplicatedPrimitives.IComparativeSet-2.html
  commentId: T:ComplicatedPrimitives.IComparativeSet`2
  name.vb: IComparativeSet(Of TSet, T)
  fullName: ComplicatedPrimitives.IComparativeSet<TSet, T>
  fullName.vb: ComplicatedPrimitives.IComparativeSet(Of TSet, T)
  nameWithType: IComparativeSet<TSet, T>
  nameWithType.vb: IComparativeSet(Of TSet, T)
- uid: ComplicatedPrimitives.IComparativeSet`2.Contains(`1)
  name: Contains(T)
  href: api/ComplicatedPrimitives.IComparativeSet-2.html#ComplicatedPrimitives_IComparativeSet_2_Contains__1_
  commentId: M:ComplicatedPrimitives.IComparativeSet`2.Contains(`1)
  fullName: ComplicatedPrimitives.IComparativeSet<TSet, T>.Contains(T)
  fullName.vb: ComplicatedPrimitives.IComparativeSet(Of TSet, T).Contains(T)
  nameWithType: IComparativeSet<TSet, T>.Contains(T)
  nameWithType.vb: IComparativeSet(Of TSet, T).Contains(T)
- uid: ComplicatedPrimitives.IComparativeSet`2.Contains*
  name: Contains
  href: api/ComplicatedPrimitives.IComparativeSet-2.html#ComplicatedPrimitives_IComparativeSet_2_Contains_
  commentId: Overload:ComplicatedPrimitives.IComparativeSet`2.Contains
  isSpec: "True"
  fullName: ComplicatedPrimitives.IComparativeSet<TSet, T>.Contains
  fullName.vb: ComplicatedPrimitives.IComparativeSet(Of TSet, T).Contains
  nameWithType: IComparativeSet<TSet, T>.Contains
  nameWithType.vb: IComparativeSet(Of TSet, T).Contains
- uid: ComplicatedPrimitives.IComparativeSet`2.IntersectsWith(`0)
  name: IntersectsWith(TSet)
  href: api/ComplicatedPrimitives.IComparativeSet-2.html#ComplicatedPrimitives_IComparativeSet_2_IntersectsWith__0_
  commentId: M:ComplicatedPrimitives.IComparativeSet`2.IntersectsWith(`0)
  fullName: ComplicatedPrimitives.IComparativeSet<TSet, T>.IntersectsWith(TSet)
  fullName.vb: ComplicatedPrimitives.IComparativeSet(Of TSet, T).IntersectsWith(TSet)
  nameWithType: IComparativeSet<TSet, T>.IntersectsWith(TSet)
  nameWithType.vb: IComparativeSet(Of TSet, T).IntersectsWith(TSet)
- uid: ComplicatedPrimitives.IComparativeSet`2.IntersectsWith*
  name: IntersectsWith
  href: api/ComplicatedPrimitives.IComparativeSet-2.html#ComplicatedPrimitives_IComparativeSet_2_IntersectsWith_
  commentId: Overload:ComplicatedPrimitives.IComparativeSet`2.IntersectsWith
  isSpec: "True"
  fullName: ComplicatedPrimitives.IComparativeSet<TSet, T>.IntersectsWith
  fullName.vb: ComplicatedPrimitives.IComparativeSet(Of TSet, T).IntersectsWith
  nameWithType: IComparativeSet<TSet, T>.IntersectsWith
  nameWithType.vb: IComparativeSet(Of TSet, T).IntersectsWith
- uid: ComplicatedPrimitives.IComparativeSet`2.IsProperSubsetOf(`0)
  name: IsProperSubsetOf(TSet)
  href: api/ComplicatedPrimitives.IComparativeSet-2.html#ComplicatedPrimitives_IComparativeSet_2_IsProperSubsetOf__0_
  commentId: M:ComplicatedPrimitives.IComparativeSet`2.IsProperSubsetOf(`0)
  fullName: ComplicatedPrimitives.IComparativeSet<TSet, T>.IsProperSubsetOf(TSet)
  fullName.vb: ComplicatedPrimitives.IComparativeSet(Of TSet, T).IsProperSubsetOf(TSet)
  nameWithType: IComparativeSet<TSet, T>.IsProperSubsetOf(TSet)
  nameWithType.vb: IComparativeSet(Of TSet, T).IsProperSubsetOf(TSet)
- uid: ComplicatedPrimitives.IComparativeSet`2.IsProperSubsetOf*
  name: IsProperSubsetOf
  href: api/ComplicatedPrimitives.IComparativeSet-2.html#ComplicatedPrimitives_IComparativeSet_2_IsProperSubsetOf_
  commentId: Overload:ComplicatedPrimitives.IComparativeSet`2.IsProperSubsetOf
  isSpec: "True"
  fullName: ComplicatedPrimitives.IComparativeSet<TSet, T>.IsProperSubsetOf
  fullName.vb: ComplicatedPrimitives.IComparativeSet(Of TSet, T).IsProperSubsetOf
  nameWithType: IComparativeSet<TSet, T>.IsProperSubsetOf
  nameWithType.vb: IComparativeSet(Of TSet, T).IsProperSubsetOf
- uid: ComplicatedPrimitives.IComparativeSet`2.IsProperSupersetOf(`0)
  name: IsProperSupersetOf(TSet)
  href: api/ComplicatedPrimitives.IComparativeSet-2.html#ComplicatedPrimitives_IComparativeSet_2_IsProperSupersetOf__0_
  commentId: M:ComplicatedPrimitives.IComparativeSet`2.IsProperSupersetOf(`0)
  fullName: ComplicatedPrimitives.IComparativeSet<TSet, T>.IsProperSupersetOf(TSet)
  fullName.vb: ComplicatedPrimitives.IComparativeSet(Of TSet, T).IsProperSupersetOf(TSet)
  nameWithType: IComparativeSet<TSet, T>.IsProperSupersetOf(TSet)
  nameWithType.vb: IComparativeSet(Of TSet, T).IsProperSupersetOf(TSet)
- uid: ComplicatedPrimitives.IComparativeSet`2.IsProperSupersetOf*
  name: IsProperSupersetOf
  href: api/ComplicatedPrimitives.IComparativeSet-2.html#ComplicatedPrimitives_IComparativeSet_2_IsProperSupersetOf_
  commentId: Overload:ComplicatedPrimitives.IComparativeSet`2.IsProperSupersetOf
  isSpec: "True"
  fullName: ComplicatedPrimitives.IComparativeSet<TSet, T>.IsProperSupersetOf
  fullName.vb: ComplicatedPrimitives.IComparativeSet(Of TSet, T).IsProperSupersetOf
  nameWithType: IComparativeSet<TSet, T>.IsProperSupersetOf
  nameWithType.vb: IComparativeSet(Of TSet, T).IsProperSupersetOf
- uid: ComplicatedPrimitives.IComparativeSet`2.IsSubsetOf(`0)
  name: IsSubsetOf(TSet)
  href: api/ComplicatedPrimitives.IComparativeSet-2.html#ComplicatedPrimitives_IComparativeSet_2_IsSubsetOf__0_
  commentId: M:ComplicatedPrimitives.IComparativeSet`2.IsSubsetOf(`0)
  fullName: ComplicatedPrimitives.IComparativeSet<TSet, T>.IsSubsetOf(TSet)
  fullName.vb: ComplicatedPrimitives.IComparativeSet(Of TSet, T).IsSubsetOf(TSet)
  nameWithType: IComparativeSet<TSet, T>.IsSubsetOf(TSet)
  nameWithType.vb: IComparativeSet(Of TSet, T).IsSubsetOf(TSet)
- uid: ComplicatedPrimitives.IComparativeSet`2.IsSubsetOf*
  name: IsSubsetOf
  href: api/ComplicatedPrimitives.IComparativeSet-2.html#ComplicatedPrimitives_IComparativeSet_2_IsSubsetOf_
  commentId: Overload:ComplicatedPrimitives.IComparativeSet`2.IsSubsetOf
  isSpec: "True"
  fullName: ComplicatedPrimitives.IComparativeSet<TSet, T>.IsSubsetOf
  fullName.vb: ComplicatedPrimitives.IComparativeSet(Of TSet, T).IsSubsetOf
  nameWithType: IComparativeSet<TSet, T>.IsSubsetOf
  nameWithType.vb: IComparativeSet(Of TSet, T).IsSubsetOf
- uid: ComplicatedPrimitives.IComparativeSet`2.IsSupersetOf(`0)
  name: IsSupersetOf(TSet)
  href: api/ComplicatedPrimitives.IComparativeSet-2.html#ComplicatedPrimitives_IComparativeSet_2_IsSupersetOf__0_
  commentId: M:ComplicatedPrimitives.IComparativeSet`2.IsSupersetOf(`0)
  fullName: ComplicatedPrimitives.IComparativeSet<TSet, T>.IsSupersetOf(TSet)
  fullName.vb: ComplicatedPrimitives.IComparativeSet(Of TSet, T).IsSupersetOf(TSet)
  nameWithType: IComparativeSet<TSet, T>.IsSupersetOf(TSet)
  nameWithType.vb: IComparativeSet(Of TSet, T).IsSupersetOf(TSet)
- uid: ComplicatedPrimitives.IComparativeSet`2.IsSupersetOf*
  name: IsSupersetOf
  href: api/ComplicatedPrimitives.IComparativeSet-2.html#ComplicatedPrimitives_IComparativeSet_2_IsSupersetOf_
  commentId: Overload:ComplicatedPrimitives.IComparativeSet`2.IsSupersetOf
  isSpec: "True"
  fullName: ComplicatedPrimitives.IComparativeSet<TSet, T>.IsSupersetOf
  fullName.vb: ComplicatedPrimitives.IComparativeSet(Of TSet, T).IsSupersetOf
  nameWithType: IComparativeSet<TSet, T>.IsSupersetOf
  nameWithType.vb: IComparativeSet(Of TSet, T).IsSupersetOf
- uid: ComplicatedPrimitives.IParser`1
  name: IParser<T>
  href: api/ComplicatedPrimitives.IParser-1.html
  commentId: T:ComplicatedPrimitives.IParser`1
  name.vb: IParser(Of T)
  fullName: ComplicatedPrimitives.IParser<T>
  fullName.vb: ComplicatedPrimitives.IParser(Of T)
  nameWithType: IParser<T>
  nameWithType.vb: IParser(Of T)
- uid: ComplicatedPrimitives.IParser`1.Parse(System.String)
  name: Parse(String)
  href: api/ComplicatedPrimitives.IParser-1.html#ComplicatedPrimitives_IParser_1_Parse_System_String_
  commentId: M:ComplicatedPrimitives.IParser`1.Parse(System.String)
  fullName: ComplicatedPrimitives.IParser<T>.Parse(System.String)
  fullName.vb: ComplicatedPrimitives.IParser(Of T).Parse(System.String)
  nameWithType: IParser<T>.Parse(String)
  nameWithType.vb: IParser(Of T).Parse(String)
- uid: ComplicatedPrimitives.IParser`1.Parse*
  name: Parse
  href: api/ComplicatedPrimitives.IParser-1.html#ComplicatedPrimitives_IParser_1_Parse_
  commentId: Overload:ComplicatedPrimitives.IParser`1.Parse
  isSpec: "True"
  fullName: ComplicatedPrimitives.IParser<T>.Parse
  fullName.vb: ComplicatedPrimitives.IParser(Of T).Parse
  nameWithType: IParser<T>.Parse
  nameWithType.vb: IParser(Of T).Parse
- uid: ComplicatedPrimitives.IParser`1.TryParse(System.String,`0@)
  name: TryParse(String, out T)
  href: api/ComplicatedPrimitives.IParser-1.html#ComplicatedPrimitives_IParser_1_TryParse_System_String__0__
  commentId: M:ComplicatedPrimitives.IParser`1.TryParse(System.String,`0@)
  name.vb: TryParse(String, ByRef T)
  fullName: ComplicatedPrimitives.IParser<T>.TryParse(System.String, out T)
  fullName.vb: ComplicatedPrimitives.IParser(Of T).TryParse(System.String, ByRef T)
  nameWithType: IParser<T>.TryParse(String, out T)
  nameWithType.vb: IParser(Of T).TryParse(String, ByRef T)
- uid: ComplicatedPrimitives.IParser`1.TryParse*
  name: TryParse
  href: api/ComplicatedPrimitives.IParser-1.html#ComplicatedPrimitives_IParser_1_TryParse_
  commentId: Overload:ComplicatedPrimitives.IParser`1.TryParse
  isSpec: "True"
  fullName: ComplicatedPrimitives.IParser<T>.TryParse
  fullName.vb: ComplicatedPrimitives.IParser(Of T).TryParse
  nameWithType: IParser<T>.TryParse
  nameWithType.vb: IParser(Of T).TryParse
- uid: ComplicatedPrimitives.IRangeParser`1
  name: IRangeParser<T>
  href: api/ComplicatedPrimitives.IRangeParser-1.html
  commentId: T:ComplicatedPrimitives.IRangeParser`1
  name.vb: IRangeParser(Of T)
  fullName: ComplicatedPrimitives.IRangeParser<T>
  fullName.vb: ComplicatedPrimitives.IRangeParser(Of T)
  nameWithType: IRangeParser<T>
  nameWithType.vb: IRangeParser(Of T)
- uid: ComplicatedPrimitives.LimitPoint`1
  name: LimitPoint<T>
  href: api/ComplicatedPrimitives.LimitPoint-1.html
  commentId: T:ComplicatedPrimitives.LimitPoint`1
  name.vb: LimitPoint(Of T)
  fullName: ComplicatedPrimitives.LimitPoint<T>
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T)
  nameWithType: LimitPoint<T>
  nameWithType.vb: LimitPoint(Of T)
- uid: ComplicatedPrimitives.LimitPoint`1.#ctor(`0,ComplicatedPrimitives.LimitPointType)
  name: LimitPoint(T, LimitPointType)
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1__ctor__0_ComplicatedPrimitives_LimitPointType_
  commentId: M:ComplicatedPrimitives.LimitPoint`1.#ctor(`0,ComplicatedPrimitives.LimitPointType)
  fullName: ComplicatedPrimitives.LimitPoint<T>.LimitPoint(T, ComplicatedPrimitives.LimitPointType)
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).LimitPoint(T, ComplicatedPrimitives.LimitPointType)
  nameWithType: LimitPoint<T>.LimitPoint(T, LimitPointType)
  nameWithType.vb: LimitPoint(Of T).LimitPoint(T, LimitPointType)
- uid: ComplicatedPrimitives.LimitPoint`1.#ctor*
  name: LimitPoint
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1__ctor_
  commentId: Overload:ComplicatedPrimitives.LimitPoint`1.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.LimitPoint<T>.LimitPoint
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).LimitPoint
  nameWithType: LimitPoint<T>.LimitPoint
  nameWithType.vb: LimitPoint(Of T).LimitPoint
- uid: ComplicatedPrimitives.LimitPoint`1.AsClosed
  name: AsClosed()
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_AsClosed
  commentId: M:ComplicatedPrimitives.LimitPoint`1.AsClosed
  fullName: ComplicatedPrimitives.LimitPoint<T>.AsClosed()
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).AsClosed()
  nameWithType: LimitPoint<T>.AsClosed()
  nameWithType.vb: LimitPoint(Of T).AsClosed()
- uid: ComplicatedPrimitives.LimitPoint`1.AsClosed*
  name: AsClosed
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_AsClosed_
  commentId: Overload:ComplicatedPrimitives.LimitPoint`1.AsClosed
  isSpec: "True"
  fullName: ComplicatedPrimitives.LimitPoint<T>.AsClosed
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).AsClosed
  nameWithType: LimitPoint<T>.AsClosed
  nameWithType.vb: LimitPoint(Of T).AsClosed
- uid: ComplicatedPrimitives.LimitPoint`1.AsOpen
  name: AsOpen()
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_AsOpen
  commentId: M:ComplicatedPrimitives.LimitPoint`1.AsOpen
  fullName: ComplicatedPrimitives.LimitPoint<T>.AsOpen()
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).AsOpen()
  nameWithType: LimitPoint<T>.AsOpen()
  nameWithType.vb: LimitPoint(Of T).AsOpen()
- uid: ComplicatedPrimitives.LimitPoint`1.AsOpen*
  name: AsOpen
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_AsOpen_
  commentId: Overload:ComplicatedPrimitives.LimitPoint`1.AsOpen
  isSpec: "True"
  fullName: ComplicatedPrimitives.LimitPoint<T>.AsOpen
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).AsOpen
  nameWithType: LimitPoint<T>.AsOpen
  nameWithType.vb: LimitPoint(Of T).AsOpen
- uid: ComplicatedPrimitives.LimitPoint`1.Equals(ComplicatedPrimitives.LimitPoint{`0})
  name: Equals(LimitPoint<T>)
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_Equals_ComplicatedPrimitives_LimitPoint__0__
  commentId: M:ComplicatedPrimitives.LimitPoint`1.Equals(ComplicatedPrimitives.LimitPoint{`0})
  name.vb: Equals(LimitPoint(Of T))
  fullName: ComplicatedPrimitives.LimitPoint<T>.Equals(ComplicatedPrimitives.LimitPoint<T>)
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).Equals(ComplicatedPrimitives.LimitPoint(Of T))
  nameWithType: LimitPoint<T>.Equals(LimitPoint<T>)
  nameWithType.vb: LimitPoint(Of T).Equals(LimitPoint(Of T))
- uid: ComplicatedPrimitives.LimitPoint`1.Equals(System.Object)
  name: Equals(Object)
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_Equals_System_Object_
  commentId: M:ComplicatedPrimitives.LimitPoint`1.Equals(System.Object)
  fullName: ComplicatedPrimitives.LimitPoint<T>.Equals(System.Object)
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).Equals(System.Object)
  nameWithType: LimitPoint<T>.Equals(Object)
  nameWithType.vb: LimitPoint(Of T).Equals(Object)
- uid: ComplicatedPrimitives.LimitPoint`1.Equals*
  name: Equals
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_Equals_
  commentId: Overload:ComplicatedPrimitives.LimitPoint`1.Equals
  isSpec: "True"
  fullName: ComplicatedPrimitives.LimitPoint<T>.Equals
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).Equals
  nameWithType: LimitPoint<T>.Equals
  nameWithType.vb: LimitPoint(Of T).Equals
- uid: ComplicatedPrimitives.LimitPoint`1.GetHashCode
  name: GetHashCode()
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_GetHashCode
  commentId: M:ComplicatedPrimitives.LimitPoint`1.GetHashCode
  fullName: ComplicatedPrimitives.LimitPoint<T>.GetHashCode()
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).GetHashCode()
  nameWithType: LimitPoint<T>.GetHashCode()
  nameWithType.vb: LimitPoint(Of T).GetHashCode()
- uid: ComplicatedPrimitives.LimitPoint`1.GetHashCode*
  name: GetHashCode
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_GetHashCode_
  commentId: Overload:ComplicatedPrimitives.LimitPoint`1.GetHashCode
  isSpec: "True"
  fullName: ComplicatedPrimitives.LimitPoint<T>.GetHashCode
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).GetHashCode
  nameWithType: LimitPoint<T>.GetHashCode
  nameWithType.vb: LimitPoint(Of T).GetHashCode
- uid: ComplicatedPrimitives.LimitPoint`1.Infinity
  name: Infinity
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_Infinity
  commentId: F:ComplicatedPrimitives.LimitPoint`1.Infinity
  fullName: ComplicatedPrimitives.LimitPoint<T>.Infinity
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).Infinity
  nameWithType: LimitPoint<T>.Infinity
  nameWithType.vb: LimitPoint(Of T).Infinity
- uid: ComplicatedPrimitives.LimitPoint`1.IsFinite
  name: IsFinite
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_IsFinite
  commentId: P:ComplicatedPrimitives.LimitPoint`1.IsFinite
  fullName: ComplicatedPrimitives.LimitPoint<T>.IsFinite
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).IsFinite
  nameWithType: LimitPoint<T>.IsFinite
  nameWithType.vb: LimitPoint(Of T).IsFinite
- uid: ComplicatedPrimitives.LimitPoint`1.IsFinite*
  name: IsFinite
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_IsFinite_
  commentId: Overload:ComplicatedPrimitives.LimitPoint`1.IsFinite
  isSpec: "True"
  fullName: ComplicatedPrimitives.LimitPoint<T>.IsFinite
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).IsFinite
  nameWithType: LimitPoint<T>.IsFinite
  nameWithType.vb: LimitPoint(Of T).IsFinite
- uid: ComplicatedPrimitives.LimitPoint`1.IsInfinite
  name: IsInfinite
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_IsInfinite
  commentId: P:ComplicatedPrimitives.LimitPoint`1.IsInfinite
  fullName: ComplicatedPrimitives.LimitPoint<T>.IsInfinite
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).IsInfinite
  nameWithType: LimitPoint<T>.IsInfinite
  nameWithType.vb: LimitPoint(Of T).IsInfinite
- uid: ComplicatedPrimitives.LimitPoint`1.IsInfinite*
  name: IsInfinite
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_IsInfinite_
  commentId: Overload:ComplicatedPrimitives.LimitPoint`1.IsInfinite
  isSpec: "True"
  fullName: ComplicatedPrimitives.LimitPoint<T>.IsInfinite
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).IsInfinite
  nameWithType: LimitPoint<T>.IsInfinite
  nameWithType.vb: LimitPoint(Of T).IsInfinite
- uid: ComplicatedPrimitives.LimitPoint`1.LeftContains(`0)
  name: LeftContains(T)
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_LeftContains__0_
  commentId: M:ComplicatedPrimitives.LimitPoint`1.LeftContains(`0)
  fullName: ComplicatedPrimitives.LimitPoint<T>.LeftContains(T)
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).LeftContains(T)
  nameWithType: LimitPoint<T>.LeftContains(T)
  nameWithType.vb: LimitPoint(Of T).LeftContains(T)
- uid: ComplicatedPrimitives.LimitPoint`1.LeftContains*
  name: LeftContains
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_LeftContains_
  commentId: Overload:ComplicatedPrimitives.LimitPoint`1.LeftContains
  isSpec: "True"
  fullName: ComplicatedPrimitives.LimitPoint<T>.LeftContains
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).LeftContains
  nameWithType: LimitPoint<T>.LeftContains
  nameWithType.vb: LimitPoint(Of T).LeftContains
- uid: ComplicatedPrimitives.LimitPoint`1.Map*
  name: Map
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_Map_
  commentId: Overload:ComplicatedPrimitives.LimitPoint`1.Map
  isSpec: "True"
  fullName: ComplicatedPrimitives.LimitPoint<T>.Map
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).Map
  nameWithType: LimitPoint<T>.Map
  nameWithType.vb: LimitPoint(Of T).Map
- uid: ComplicatedPrimitives.LimitPoint`1.Map``1(System.Func{`0,``0})
  name: Map<TResult>(Func<T, TResult>)
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_Map__1_System_Func__0___0__
  commentId: M:ComplicatedPrimitives.LimitPoint`1.Map``1(System.Func{`0,``0})
  name.vb: Map(Of TResult)(Func(Of T, TResult))
  fullName: ComplicatedPrimitives.LimitPoint<T>.Map<TResult>(System.Func<T, TResult>)
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).Map(Of TResult)(System.Func(Of T, TResult))
  nameWithType: LimitPoint<T>.Map<TResult>(Func<T, TResult>)
  nameWithType.vb: LimitPoint(Of T).Map(Of TResult)(Func(Of T, TResult))
- uid: ComplicatedPrimitives.LimitPoint`1.op_Equality(ComplicatedPrimitives.LimitPoint{`0},ComplicatedPrimitives.LimitPoint{`0})
  name: Equality(LimitPoint<T>, LimitPoint<T>)
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_op_Equality_ComplicatedPrimitives_LimitPoint__0__ComplicatedPrimitives_LimitPoint__0__
  commentId: M:ComplicatedPrimitives.LimitPoint`1.op_Equality(ComplicatedPrimitives.LimitPoint{`0},ComplicatedPrimitives.LimitPoint{`0})
  name.vb: Equality(LimitPoint(Of T), LimitPoint(Of T))
  fullName: ComplicatedPrimitives.LimitPoint<T>.Equality(ComplicatedPrimitives.LimitPoint<T>, ComplicatedPrimitives.LimitPoint<T>)
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).Equality(ComplicatedPrimitives.LimitPoint(Of T), ComplicatedPrimitives.LimitPoint(Of T))
  nameWithType: LimitPoint<T>.Equality(LimitPoint<T>, LimitPoint<T>)
  nameWithType.vb: LimitPoint(Of T).Equality(LimitPoint(Of T), LimitPoint(Of T))
- uid: ComplicatedPrimitives.LimitPoint`1.op_Equality*
  name: Equality
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_op_Equality_
  commentId: Overload:ComplicatedPrimitives.LimitPoint`1.op_Equality
  isSpec: "True"
  fullName: ComplicatedPrimitives.LimitPoint<T>.Equality
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).Equality
  nameWithType: LimitPoint<T>.Equality
  nameWithType.vb: LimitPoint(Of T).Equality
- uid: ComplicatedPrimitives.LimitPoint`1.op_Inequality(ComplicatedPrimitives.LimitPoint{`0},ComplicatedPrimitives.LimitPoint{`0})
  name: Inequality(LimitPoint<T>, LimitPoint<T>)
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_op_Inequality_ComplicatedPrimitives_LimitPoint__0__ComplicatedPrimitives_LimitPoint__0__
  commentId: M:ComplicatedPrimitives.LimitPoint`1.op_Inequality(ComplicatedPrimitives.LimitPoint{`0},ComplicatedPrimitives.LimitPoint{`0})
  name.vb: Inequality(LimitPoint(Of T), LimitPoint(Of T))
  fullName: ComplicatedPrimitives.LimitPoint<T>.Inequality(ComplicatedPrimitives.LimitPoint<T>, ComplicatedPrimitives.LimitPoint<T>)
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).Inequality(ComplicatedPrimitives.LimitPoint(Of T), ComplicatedPrimitives.LimitPoint(Of T))
  nameWithType: LimitPoint<T>.Inequality(LimitPoint<T>, LimitPoint<T>)
  nameWithType.vb: LimitPoint(Of T).Inequality(LimitPoint(Of T), LimitPoint(Of T))
- uid: ComplicatedPrimitives.LimitPoint`1.op_Inequality*
  name: Inequality
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_op_Inequality_
  commentId: Overload:ComplicatedPrimitives.LimitPoint`1.op_Inequality
  isSpec: "True"
  fullName: ComplicatedPrimitives.LimitPoint<T>.Inequality
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).Inequality
  nameWithType: LimitPoint<T>.Inequality
  nameWithType.vb: LimitPoint(Of T).Inequality
- uid: ComplicatedPrimitives.LimitPoint`1.RightContains(`0)
  name: RightContains(T)
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_RightContains__0_
  commentId: M:ComplicatedPrimitives.LimitPoint`1.RightContains(`0)
  fullName: ComplicatedPrimitives.LimitPoint<T>.RightContains(T)
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).RightContains(T)
  nameWithType: LimitPoint<T>.RightContains(T)
  nameWithType.vb: LimitPoint(Of T).RightContains(T)
- uid: ComplicatedPrimitives.LimitPoint`1.RightContains*
  name: RightContains
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_RightContains_
  commentId: Overload:ComplicatedPrimitives.LimitPoint`1.RightContains
  isSpec: "True"
  fullName: ComplicatedPrimitives.LimitPoint<T>.RightContains
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).RightContains
  nameWithType: LimitPoint<T>.RightContains
  nameWithType.vb: LimitPoint(Of T).RightContains
- uid: ComplicatedPrimitives.LimitPoint`1.ToString
  name: ToString()
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_ToString
  commentId: M:ComplicatedPrimitives.LimitPoint`1.ToString
  fullName: ComplicatedPrimitives.LimitPoint<T>.ToString()
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).ToString()
  nameWithType: LimitPoint<T>.ToString()
  nameWithType.vb: LimitPoint(Of T).ToString()
- uid: ComplicatedPrimitives.LimitPoint`1.ToString*
  name: ToString
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_ToString_
  commentId: Overload:ComplicatedPrimitives.LimitPoint`1.ToString
  isSpec: "True"
  fullName: ComplicatedPrimitives.LimitPoint<T>.ToString
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).ToString
  nameWithType: LimitPoint<T>.ToString
  nameWithType.vb: LimitPoint(Of T).ToString
- uid: ComplicatedPrimitives.LimitPoint`1.Translate(System.Func{`0,`0})
  name: Translate(Func<T, T>)
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_Translate_System_Func__0__0__
  commentId: M:ComplicatedPrimitives.LimitPoint`1.Translate(System.Func{`0,`0})
  name.vb: Translate(Func(Of T, T))
  fullName: ComplicatedPrimitives.LimitPoint<T>.Translate(System.Func<T, T>)
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).Translate(System.Func(Of T, T))
  nameWithType: LimitPoint<T>.Translate(Func<T, T>)
  nameWithType.vb: LimitPoint(Of T).Translate(Func(Of T, T))
- uid: ComplicatedPrimitives.LimitPoint`1.Translate*
  name: Translate
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_Translate_
  commentId: Overload:ComplicatedPrimitives.LimitPoint`1.Translate
  isSpec: "True"
  fullName: ComplicatedPrimitives.LimitPoint<T>.Translate
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).Translate
  nameWithType: LimitPoint<T>.Translate
  nameWithType.vb: LimitPoint(Of T).Translate
- uid: ComplicatedPrimitives.LimitPoint`1.Type
  name: Type
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_Type
  commentId: P:ComplicatedPrimitives.LimitPoint`1.Type
  fullName: ComplicatedPrimitives.LimitPoint<T>.Type
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).Type
  nameWithType: LimitPoint<T>.Type
  nameWithType.vb: LimitPoint(Of T).Type
- uid: ComplicatedPrimitives.LimitPoint`1.Type*
  name: Type
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_Type_
  commentId: Overload:ComplicatedPrimitives.LimitPoint`1.Type
  isSpec: "True"
  fullName: ComplicatedPrimitives.LimitPoint<T>.Type
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).Type
  nameWithType: LimitPoint<T>.Type
  nameWithType.vb: LimitPoint(Of T).Type
- uid: ComplicatedPrimitives.LimitPoint`1.Value
  name: Value
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_Value
  commentId: P:ComplicatedPrimitives.LimitPoint`1.Value
  fullName: ComplicatedPrimitives.LimitPoint<T>.Value
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).Value
  nameWithType: LimitPoint<T>.Value
  nameWithType.vb: LimitPoint(Of T).Value
- uid: ComplicatedPrimitives.LimitPoint`1.Value*
  name: Value
  href: api/ComplicatedPrimitives.LimitPoint-1.html#ComplicatedPrimitives_LimitPoint_1_Value_
  commentId: Overload:ComplicatedPrimitives.LimitPoint`1.Value
  isSpec: "True"
  fullName: ComplicatedPrimitives.LimitPoint<T>.Value
  fullName.vb: ComplicatedPrimitives.LimitPoint(Of T).Value
  nameWithType: LimitPoint<T>.Value
  nameWithType.vb: LimitPoint(Of T).Value
- uid: ComplicatedPrimitives.LimitPointType
  name: LimitPointType
  href: api/ComplicatedPrimitives.LimitPointType.html
  commentId: T:ComplicatedPrimitives.LimitPointType
  fullName: ComplicatedPrimitives.LimitPointType
  nameWithType: LimitPointType
- uid: ComplicatedPrimitives.LimitPointType.Closed
  name: Closed
  href: api/ComplicatedPrimitives.LimitPointType.html#ComplicatedPrimitives_LimitPointType_Closed
  commentId: F:ComplicatedPrimitives.LimitPointType.Closed
  fullName: ComplicatedPrimitives.LimitPointType.Closed
  nameWithType: LimitPointType.Closed
- uid: ComplicatedPrimitives.LimitPointType.Open
  name: Open
  href: api/ComplicatedPrimitives.LimitPointType.html#ComplicatedPrimitives_LimitPointType_Open
  commentId: F:ComplicatedPrimitives.LimitPointType.Open
  fullName: ComplicatedPrimitives.LimitPointType.Open
  nameWithType: LimitPointType.Open
- uid: ComplicatedPrimitives.LimitPointTypeExtensions
  name: LimitPointTypeExtensions
  href: api/ComplicatedPrimitives.LimitPointTypeExtensions.html
  commentId: T:ComplicatedPrimitives.LimitPointTypeExtensions
  fullName: ComplicatedPrimitives.LimitPointTypeExtensions
  nameWithType: LimitPointTypeExtensions
- uid: ComplicatedPrimitives.LimitPointTypeExtensions.Flip(ComplicatedPrimitives.LimitPointType)
  name: Flip(LimitPointType)
  href: api/ComplicatedPrimitives.LimitPointTypeExtensions.html#ComplicatedPrimitives_LimitPointTypeExtensions_Flip_ComplicatedPrimitives_LimitPointType_
  commentId: M:ComplicatedPrimitives.LimitPointTypeExtensions.Flip(ComplicatedPrimitives.LimitPointType)
  fullName: ComplicatedPrimitives.LimitPointTypeExtensions.Flip(ComplicatedPrimitives.LimitPointType)
  nameWithType: LimitPointTypeExtensions.Flip(LimitPointType)
- uid: ComplicatedPrimitives.LimitPointTypeExtensions.Flip*
  name: Flip
  href: api/ComplicatedPrimitives.LimitPointTypeExtensions.html#ComplicatedPrimitives_LimitPointTypeExtensions_Flip_
  commentId: Overload:ComplicatedPrimitives.LimitPointTypeExtensions.Flip
  isSpec: "True"
  fullName: ComplicatedPrimitives.LimitPointTypeExtensions.Flip
  nameWithType: LimitPointTypeExtensions.Flip
- uid: ComplicatedPrimitives.LimitPointTypeExtensions.Match*
  name: Match
  href: api/ComplicatedPrimitives.LimitPointTypeExtensions.html#ComplicatedPrimitives_LimitPointTypeExtensions_Match_
  commentId: Overload:ComplicatedPrimitives.LimitPointTypeExtensions.Match
  isSpec: "True"
  fullName: ComplicatedPrimitives.LimitPointTypeExtensions.Match
  nameWithType: LimitPointTypeExtensions.Match
- uid: ComplicatedPrimitives.LimitPointTypeExtensions.Match``1(ComplicatedPrimitives.LimitPointType,``0,``0)
  name: Match<TResult>(LimitPointType, TResult, TResult)
  href: api/ComplicatedPrimitives.LimitPointTypeExtensions.html#ComplicatedPrimitives_LimitPointTypeExtensions_Match__1_ComplicatedPrimitives_LimitPointType___0___0_
  commentId: M:ComplicatedPrimitives.LimitPointTypeExtensions.Match``1(ComplicatedPrimitives.LimitPointType,``0,``0)
  name.vb: Match(Of TResult)(LimitPointType, TResult, TResult)
  fullName: ComplicatedPrimitives.LimitPointTypeExtensions.Match<TResult>(ComplicatedPrimitives.LimitPointType, TResult, TResult)
  fullName.vb: ComplicatedPrimitives.LimitPointTypeExtensions.Match(Of TResult)(ComplicatedPrimitives.LimitPointType, TResult, TResult)
  nameWithType: LimitPointTypeExtensions.Match<TResult>(LimitPointType, TResult, TResult)
  nameWithType.vb: LimitPointTypeExtensions.Match(Of TResult)(LimitPointType, TResult, TResult)
- uid: ComplicatedPrimitives.LimitPointTypeExtensions.Match``1(ComplicatedPrimitives.LimitPointType,System.Func{``0},System.Func{``0})
  name: Match<TResult>(LimitPointType, Func<TResult>, Func<TResult>)
  href: api/ComplicatedPrimitives.LimitPointTypeExtensions.html#ComplicatedPrimitives_LimitPointTypeExtensions_Match__1_ComplicatedPrimitives_LimitPointType_System_Func___0__System_Func___0__
  commentId: M:ComplicatedPrimitives.LimitPointTypeExtensions.Match``1(ComplicatedPrimitives.LimitPointType,System.Func{``0},System.Func{``0})
  name.vb: Match(Of TResult)(LimitPointType, Func(Of TResult), Func(Of TResult))
  fullName: ComplicatedPrimitives.LimitPointTypeExtensions.Match<TResult>(ComplicatedPrimitives.LimitPointType, System.Func<TResult>, System.Func<TResult>)
  fullName.vb: ComplicatedPrimitives.LimitPointTypeExtensions.Match(Of TResult)(ComplicatedPrimitives.LimitPointType, System.Func(Of TResult), System.Func(Of TResult))
  nameWithType: LimitPointTypeExtensions.Match<TResult>(LimitPointType, Func<TResult>, Func<TResult>)
  nameWithType.vb: LimitPointTypeExtensions.Match(Of TResult)(LimitPointType, Func(Of TResult), Func(Of TResult))
- uid: ComplicatedPrimitives.LimitSide
  name: LimitSide
  href: api/ComplicatedPrimitives.LimitSide.html
  commentId: T:ComplicatedPrimitives.LimitSide
  fullName: ComplicatedPrimitives.LimitSide
  nameWithType: LimitSide
- uid: ComplicatedPrimitives.LimitSide.Left
  name: Left
  href: api/ComplicatedPrimitives.LimitSide.html#ComplicatedPrimitives_LimitSide_Left
  commentId: F:ComplicatedPrimitives.LimitSide.Left
  fullName: ComplicatedPrimitives.LimitSide.Left
  nameWithType: LimitSide.Left
- uid: ComplicatedPrimitives.LimitSide.Right
  name: Right
  href: api/ComplicatedPrimitives.LimitSide.html#ComplicatedPrimitives_LimitSide_Right
  commentId: F:ComplicatedPrimitives.LimitSide.Right
  fullName: ComplicatedPrimitives.LimitSide.Right
  nameWithType: LimitSide.Right
- uid: ComplicatedPrimitives.LimitSide.Undefined
  name: Undefined
  href: api/ComplicatedPrimitives.LimitSide.html#ComplicatedPrimitives_LimitSide_Undefined
  commentId: F:ComplicatedPrimitives.LimitSide.Undefined
  fullName: ComplicatedPrimitives.LimitSide.Undefined
  nameWithType: LimitSide.Undefined
- uid: ComplicatedPrimitives.LimitSideExtensions
  name: LimitSideExtensions
  href: api/ComplicatedPrimitives.LimitSideExtensions.html
  commentId: T:ComplicatedPrimitives.LimitSideExtensions
  fullName: ComplicatedPrimitives.LimitSideExtensions
  nameWithType: LimitSideExtensions
- uid: ComplicatedPrimitives.LimitSideExtensions.Flip(ComplicatedPrimitives.LimitSide)
  name: Flip(LimitSide)
  href: api/ComplicatedPrimitives.LimitSideExtensions.html#ComplicatedPrimitives_LimitSideExtensions_Flip_ComplicatedPrimitives_LimitSide_
  commentId: M:ComplicatedPrimitives.LimitSideExtensions.Flip(ComplicatedPrimitives.LimitSide)
  fullName: ComplicatedPrimitives.LimitSideExtensions.Flip(ComplicatedPrimitives.LimitSide)
  nameWithType: LimitSideExtensions.Flip(LimitSide)
- uid: ComplicatedPrimitives.LimitSideExtensions.Flip*
  name: Flip
  href: api/ComplicatedPrimitives.LimitSideExtensions.html#ComplicatedPrimitives_LimitSideExtensions_Flip_
  commentId: Overload:ComplicatedPrimitives.LimitSideExtensions.Flip
  isSpec: "True"
  fullName: ComplicatedPrimitives.LimitSideExtensions.Flip
  nameWithType: LimitSideExtensions.Flip
- uid: ComplicatedPrimitives.LimitSideExtensions.Match*
  name: Match
  href: api/ComplicatedPrimitives.LimitSideExtensions.html#ComplicatedPrimitives_LimitSideExtensions_Match_
  commentId: Overload:ComplicatedPrimitives.LimitSideExtensions.Match
  isSpec: "True"
  fullName: ComplicatedPrimitives.LimitSideExtensions.Match
  nameWithType: LimitSideExtensions.Match
- uid: ComplicatedPrimitives.LimitSideExtensions.Match``1(ComplicatedPrimitives.LimitSide,System.Func{``0},System.Func{``0},System.Func{``0},System.Func{``0})
  name: Match<TResult>(LimitSide, Func<TResult>, Func<TResult>, Func<TResult>, Func<TResult>)
  href: api/ComplicatedPrimitives.LimitSideExtensions.html#ComplicatedPrimitives_LimitSideExtensions_Match__1_ComplicatedPrimitives_LimitSide_System_Func___0__System_Func___0__System_Func___0__System_Func___0__
  commentId: M:ComplicatedPrimitives.LimitSideExtensions.Match``1(ComplicatedPrimitives.LimitSide,System.Func{``0},System.Func{``0},System.Func{``0},System.Func{``0})
  name.vb: Match(Of TResult)(LimitSide, Func(Of TResult), Func(Of TResult), Func(Of TResult), Func(Of TResult))
  fullName: ComplicatedPrimitives.LimitSideExtensions.Match<TResult>(ComplicatedPrimitives.LimitSide, System.Func<TResult>, System.Func<TResult>, System.Func<TResult>, System.Func<TResult>)
  fullName.vb: ComplicatedPrimitives.LimitSideExtensions.Match(Of TResult)(ComplicatedPrimitives.LimitSide, System.Func(Of TResult), System.Func(Of TResult), System.Func(Of TResult), System.Func(Of TResult))
  nameWithType: LimitSideExtensions.Match<TResult>(LimitSide, Func<TResult>, Func<TResult>, Func<TResult>, Func<TResult>)
  nameWithType.vb: LimitSideExtensions.Match(Of TResult)(LimitSide, Func(Of TResult), Func(Of TResult), Func(Of TResult), Func(Of TResult))
- uid: ComplicatedPrimitives.ParsingException
  name: ParsingException
  href: api/ComplicatedPrimitives.ParsingException.html
  commentId: T:ComplicatedPrimitives.ParsingException
  fullName: ComplicatedPrimitives.ParsingException
  nameWithType: ParsingException
- uid: ComplicatedPrimitives.ParsingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  name: ParsingException(SerializationInfo, StreamingContext)
  href: api/ComplicatedPrimitives.ParsingException.html#ComplicatedPrimitives_ParsingException__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_
  commentId: M:ComplicatedPrimitives.ParsingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  fullName: ComplicatedPrimitives.ParsingException.ParsingException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  nameWithType: ParsingException.ParsingException(SerializationInfo, StreamingContext)
- uid: ComplicatedPrimitives.ParsingException.#ctor(System.String)
  name: ParsingException(String)
  href: api/ComplicatedPrimitives.ParsingException.html#ComplicatedPrimitives_ParsingException__ctor_System_String_
  commentId: M:ComplicatedPrimitives.ParsingException.#ctor(System.String)
  fullName: ComplicatedPrimitives.ParsingException.ParsingException(System.String)
  nameWithType: ParsingException.ParsingException(String)
- uid: ComplicatedPrimitives.ParsingException.#ctor(System.String,System.String)
  name: ParsingException(String, String)
  href: api/ComplicatedPrimitives.ParsingException.html#ComplicatedPrimitives_ParsingException__ctor_System_String_System_String_
  commentId: M:ComplicatedPrimitives.ParsingException.#ctor(System.String,System.String)
  fullName: ComplicatedPrimitives.ParsingException.ParsingException(System.String, System.String)
  nameWithType: ParsingException.ParsingException(String, String)
- uid: ComplicatedPrimitives.ParsingException.#ctor(System.String,System.String,System.Exception)
  name: ParsingException(String, String, Exception)
  href: api/ComplicatedPrimitives.ParsingException.html#ComplicatedPrimitives_ParsingException__ctor_System_String_System_String_System_Exception_
  commentId: M:ComplicatedPrimitives.ParsingException.#ctor(System.String,System.String,System.Exception)
  fullName: ComplicatedPrimitives.ParsingException.ParsingException(System.String, System.String, System.Exception)
  nameWithType: ParsingException.ParsingException(String, String, Exception)
- uid: ComplicatedPrimitives.ParsingException.#ctor*
  name: ParsingException
  href: api/ComplicatedPrimitives.ParsingException.html#ComplicatedPrimitives_ParsingException__ctor_
  commentId: Overload:ComplicatedPrimitives.ParsingException.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.ParsingException.ParsingException
  nameWithType: ParsingException.ParsingException
- uid: ComplicatedPrimitives.ParsingException.DefaultMessage
  name: DefaultMessage
  href: api/ComplicatedPrimitives.ParsingException.html#ComplicatedPrimitives_ParsingException_DefaultMessage
  commentId: F:ComplicatedPrimitives.ParsingException.DefaultMessage
  fullName: ComplicatedPrimitives.ParsingException.DefaultMessage
  nameWithType: ParsingException.DefaultMessage
- uid: ComplicatedPrimitives.ParsingException.Format
  name: Format
  href: api/ComplicatedPrimitives.ParsingException.html#ComplicatedPrimitives_ParsingException_Format
  commentId: P:ComplicatedPrimitives.ParsingException.Format
  fullName: ComplicatedPrimitives.ParsingException.Format
  nameWithType: ParsingException.Format
- uid: ComplicatedPrimitives.ParsingException.Format*
  name: Format
  href: api/ComplicatedPrimitives.ParsingException.html#ComplicatedPrimitives_ParsingException_Format_
  commentId: Overload:ComplicatedPrimitives.ParsingException.Format
  isSpec: "True"
  fullName: ComplicatedPrimitives.ParsingException.Format
  nameWithType: ParsingException.Format
- uid: ComplicatedPrimitives.ParsingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  name: GetObjectData(SerializationInfo, StreamingContext)
  href: api/ComplicatedPrimitives.ParsingException.html#ComplicatedPrimitives_ParsingException_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_
  commentId: M:ComplicatedPrimitives.ParsingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  fullName: ComplicatedPrimitives.ParsingException.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  nameWithType: ParsingException.GetObjectData(SerializationInfo, StreamingContext)
- uid: ComplicatedPrimitives.ParsingException.GetObjectData*
  name: GetObjectData
  href: api/ComplicatedPrimitives.ParsingException.html#ComplicatedPrimitives_ParsingException_GetObjectData_
  commentId: Overload:ComplicatedPrimitives.ParsingException.GetObjectData
  isSpec: "True"
  fullName: ComplicatedPrimitives.ParsingException.GetObjectData
  nameWithType: ParsingException.GetObjectData
- uid: ComplicatedPrimitives.Range`1
  name: Range<T>
  href: api/ComplicatedPrimitives.Range-1.html
  commentId: T:ComplicatedPrimitives.Range`1
  name.vb: Range(Of T)
  fullName: ComplicatedPrimitives.Range<T>
  fullName.vb: ComplicatedPrimitives.Range(Of T)
  nameWithType: Range<T>
  nameWithType.vb: Range(Of T)
- uid: ComplicatedPrimitives.Range`1.#ctor(`0,`0,ComplicatedPrimitives.LimitPointType,ComplicatedPrimitives.LimitPointType)
  name: Range(T, T, LimitPointType, LimitPointType)
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1__ctor__0__0_ComplicatedPrimitives_LimitPointType_ComplicatedPrimitives_LimitPointType_
  commentId: M:ComplicatedPrimitives.Range`1.#ctor(`0,`0,ComplicatedPrimitives.LimitPointType,ComplicatedPrimitives.LimitPointType)
  fullName: ComplicatedPrimitives.Range<T>.Range(T, T, ComplicatedPrimitives.LimitPointType, ComplicatedPrimitives.LimitPointType)
  fullName.vb: ComplicatedPrimitives.Range(Of T).Range(T, T, ComplicatedPrimitives.LimitPointType, ComplicatedPrimitives.LimitPointType)
  nameWithType: Range<T>.Range(T, T, LimitPointType, LimitPointType)
  nameWithType.vb: Range(Of T).Range(T, T, LimitPointType, LimitPointType)
- uid: ComplicatedPrimitives.Range`1.#ctor(ComplicatedPrimitives.DirectedLimit{`0},ComplicatedPrimitives.DirectedLimit{`0})
  name: Range(DirectedLimit<T>, DirectedLimit<T>)
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1__ctor_ComplicatedPrimitives_DirectedLimit__0__ComplicatedPrimitives_DirectedLimit__0__
  commentId: M:ComplicatedPrimitives.Range`1.#ctor(ComplicatedPrimitives.DirectedLimit{`0},ComplicatedPrimitives.DirectedLimit{`0})
  name.vb: Range(DirectedLimit(Of T), DirectedLimit(Of T))
  fullName: ComplicatedPrimitives.Range<T>.Range(ComplicatedPrimitives.DirectedLimit<T>, ComplicatedPrimitives.DirectedLimit<T>)
  fullName.vb: ComplicatedPrimitives.Range(Of T).Range(ComplicatedPrimitives.DirectedLimit(Of T), ComplicatedPrimitives.DirectedLimit(Of T))
  nameWithType: Range<T>.Range(DirectedLimit<T>, DirectedLimit<T>)
  nameWithType.vb: Range(Of T).Range(DirectedLimit(Of T), DirectedLimit(Of T))
- uid: ComplicatedPrimitives.Range`1.#ctor(ComplicatedPrimitives.LimitPoint{`0},ComplicatedPrimitives.LimitPoint{`0})
  name: Range(LimitPoint<T>, LimitPoint<T>)
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1__ctor_ComplicatedPrimitives_LimitPoint__0__ComplicatedPrimitives_LimitPoint__0__
  commentId: M:ComplicatedPrimitives.Range`1.#ctor(ComplicatedPrimitives.LimitPoint{`0},ComplicatedPrimitives.LimitPoint{`0})
  name.vb: Range(LimitPoint(Of T), LimitPoint(Of T))
  fullName: ComplicatedPrimitives.Range<T>.Range(ComplicatedPrimitives.LimitPoint<T>, ComplicatedPrimitives.LimitPoint<T>)
  fullName.vb: ComplicatedPrimitives.Range(Of T).Range(ComplicatedPrimitives.LimitPoint(Of T), ComplicatedPrimitives.LimitPoint(Of T))
  nameWithType: Range<T>.Range(LimitPoint<T>, LimitPoint<T>)
  nameWithType.vb: Range(Of T).Range(LimitPoint(Of T), LimitPoint(Of T))
- uid: ComplicatedPrimitives.Range`1.#ctor*
  name: Range
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1__ctor_
  commentId: Overload:ComplicatedPrimitives.Range`1.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.Range
  fullName.vb: ComplicatedPrimitives.Range(Of T).Range
  nameWithType: Range<T>.Range
  nameWithType.vb: Range(Of T).Range
- uid: ComplicatedPrimitives.Range`1.Contains(`0)
  name: Contains(T)
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_Contains__0_
  commentId: M:ComplicatedPrimitives.Range`1.Contains(`0)
  fullName: ComplicatedPrimitives.Range<T>.Contains(T)
  fullName.vb: ComplicatedPrimitives.Range(Of T).Contains(T)
  nameWithType: Range<T>.Contains(T)
  nameWithType.vb: Range(Of T).Contains(T)
- uid: ComplicatedPrimitives.Range`1.Contains*
  name: Contains
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_Contains_
  commentId: Overload:ComplicatedPrimitives.Range`1.Contains
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.Contains
  fullName.vb: ComplicatedPrimitives.Range(Of T).Contains
  nameWithType: Range<T>.Contains
  nameWithType.vb: Range(Of T).Contains
- uid: ComplicatedPrimitives.Range`1.Empty
  name: Empty
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_Empty
  commentId: F:ComplicatedPrimitives.Range`1.Empty
  fullName: ComplicatedPrimitives.Range<T>.Empty
  fullName.vb: ComplicatedPrimitives.Range(Of T).Empty
  nameWithType: Range<T>.Empty
  nameWithType.vb: Range(Of T).Empty
- uid: ComplicatedPrimitives.Range`1.Equals(ComplicatedPrimitives.Range{`0})
  name: Equals(Range<T>)
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_Equals_ComplicatedPrimitives_Range__0__
  commentId: M:ComplicatedPrimitives.Range`1.Equals(ComplicatedPrimitives.Range{`0})
  name.vb: Equals(Range(Of T))
  fullName: ComplicatedPrimitives.Range<T>.Equals(ComplicatedPrimitives.Range<T>)
  fullName.vb: ComplicatedPrimitives.Range(Of T).Equals(ComplicatedPrimitives.Range(Of T))
  nameWithType: Range<T>.Equals(Range<T>)
  nameWithType.vb: Range(Of T).Equals(Range(Of T))
- uid: ComplicatedPrimitives.Range`1.Equals(System.Object)
  name: Equals(Object)
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_Equals_System_Object_
  commentId: M:ComplicatedPrimitives.Range`1.Equals(System.Object)
  fullName: ComplicatedPrimitives.Range<T>.Equals(System.Object)
  fullName.vb: ComplicatedPrimitives.Range(Of T).Equals(System.Object)
  nameWithType: Range<T>.Equals(Object)
  nameWithType.vb: Range(Of T).Equals(Object)
- uid: ComplicatedPrimitives.Range`1.Equals*
  name: Equals
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_Equals_
  commentId: Overload:ComplicatedPrimitives.Range`1.Equals
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.Equals
  fullName.vb: ComplicatedPrimitives.Range(Of T).Equals
  nameWithType: Range<T>.Equals
  nameWithType.vb: Range(Of T).Equals
- uid: ComplicatedPrimitives.Range`1.GetAbsoluteComplement
  name: GetAbsoluteComplement()
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_GetAbsoluteComplement
  commentId: M:ComplicatedPrimitives.Range`1.GetAbsoluteComplement
  fullName: ComplicatedPrimitives.Range<T>.GetAbsoluteComplement()
  fullName.vb: ComplicatedPrimitives.Range(Of T).GetAbsoluteComplement()
  nameWithType: Range<T>.GetAbsoluteComplement()
  nameWithType.vb: Range(Of T).GetAbsoluteComplement()
- uid: ComplicatedPrimitives.Range`1.GetAbsoluteComplement*
  name: GetAbsoluteComplement
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_GetAbsoluteComplement_
  commentId: Overload:ComplicatedPrimitives.Range`1.GetAbsoluteComplement
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.GetAbsoluteComplement
  fullName.vb: ComplicatedPrimitives.Range(Of T).GetAbsoluteComplement
  nameWithType: Range<T>.GetAbsoluteComplement
  nameWithType.vb: Range(Of T).GetAbsoluteComplement
- uid: ComplicatedPrimitives.Range`1.GetComplementIn(ComplicatedPrimitives.Range{`0})
  name: GetComplementIn(Range<T>)
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_GetComplementIn_ComplicatedPrimitives_Range__0__
  commentId: M:ComplicatedPrimitives.Range`1.GetComplementIn(ComplicatedPrimitives.Range{`0})
  name.vb: GetComplementIn(Range(Of T))
  fullName: ComplicatedPrimitives.Range<T>.GetComplementIn(ComplicatedPrimitives.Range<T>)
  fullName.vb: ComplicatedPrimitives.Range(Of T).GetComplementIn(ComplicatedPrimitives.Range(Of T))
  nameWithType: Range<T>.GetComplementIn(Range<T>)
  nameWithType.vb: Range(Of T).GetComplementIn(Range(Of T))
- uid: ComplicatedPrimitives.Range`1.GetComplementIn*
  name: GetComplementIn
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_GetComplementIn_
  commentId: Overload:ComplicatedPrimitives.Range`1.GetComplementIn
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.GetComplementIn
  fullName.vb: ComplicatedPrimitives.Range(Of T).GetComplementIn
  nameWithType: Range<T>.GetComplementIn
  nameWithType.vb: Range(Of T).GetComplementIn
- uid: ComplicatedPrimitives.Range`1.GetHashCode
  name: GetHashCode()
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_GetHashCode
  commentId: M:ComplicatedPrimitives.Range`1.GetHashCode
  fullName: ComplicatedPrimitives.Range<T>.GetHashCode()
  fullName.vb: ComplicatedPrimitives.Range(Of T).GetHashCode()
  nameWithType: Range<T>.GetHashCode()
  nameWithType.vb: Range(Of T).GetHashCode()
- uid: ComplicatedPrimitives.Range`1.GetHashCode*
  name: GetHashCode
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_GetHashCode_
  commentId: Overload:ComplicatedPrimitives.Range`1.GetHashCode
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.GetHashCode
  fullName.vb: ComplicatedPrimitives.Range(Of T).GetHashCode
  nameWithType: Range<T>.GetHashCode
  nameWithType.vb: Range(Of T).GetHashCode
- uid: ComplicatedPrimitives.Range`1.Infinite
  name: Infinite
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_Infinite
  commentId: F:ComplicatedPrimitives.Range`1.Infinite
  fullName: ComplicatedPrimitives.Range<T>.Infinite
  fullName.vb: ComplicatedPrimitives.Range(Of T).Infinite
  nameWithType: Range<T>.Infinite
  nameWithType.vb: Range(Of T).Infinite
- uid: ComplicatedPrimitives.Range`1.Intersects(ComplicatedPrimitives.Range{`0})
  name: Intersects(Range<T>)
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_Intersects_ComplicatedPrimitives_Range__0__
  commentId: M:ComplicatedPrimitives.Range`1.Intersects(ComplicatedPrimitives.Range{`0})
  name.vb: Intersects(Range(Of T))
  fullName: ComplicatedPrimitives.Range<T>.Intersects(ComplicatedPrimitives.Range<T>)
  fullName.vb: ComplicatedPrimitives.Range(Of T).Intersects(ComplicatedPrimitives.Range(Of T))
  nameWithType: Range<T>.Intersects(Range<T>)
  nameWithType.vb: Range(Of T).Intersects(Range(Of T))
- uid: ComplicatedPrimitives.Range`1.Intersects*
  name: Intersects
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_Intersects_
  commentId: Overload:ComplicatedPrimitives.Range`1.Intersects
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.Intersects
  fullName.vb: ComplicatedPrimitives.Range(Of T).Intersects
  nameWithType: Range<T>.Intersects
  nameWithType.vb: Range(Of T).Intersects
- uid: ComplicatedPrimitives.Range`1.IntersectWith(ComplicatedPrimitives.Range{`0})
  name: IntersectWith(Range<T>)
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_IntersectWith_ComplicatedPrimitives_Range__0__
  commentId: M:ComplicatedPrimitives.Range`1.IntersectWith(ComplicatedPrimitives.Range{`0})
  name.vb: IntersectWith(Range(Of T))
  fullName: ComplicatedPrimitives.Range<T>.IntersectWith(ComplicatedPrimitives.Range<T>)
  fullName.vb: ComplicatedPrimitives.Range(Of T).IntersectWith(ComplicatedPrimitives.Range(Of T))
  nameWithType: Range<T>.IntersectWith(Range<T>)
  nameWithType.vb: Range(Of T).IntersectWith(Range(Of T))
- uid: ComplicatedPrimitives.Range`1.IntersectWith*
  name: IntersectWith
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_IntersectWith_
  commentId: Overload:ComplicatedPrimitives.Range`1.IntersectWith
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.IntersectWith
  fullName.vb: ComplicatedPrimitives.Range(Of T).IntersectWith
  nameWithType: Range<T>.IntersectWith
  nameWithType.vb: Range(Of T).IntersectWith
- uid: ComplicatedPrimitives.Range`1.IsEmpty
  name: IsEmpty
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_IsEmpty
  commentId: P:ComplicatedPrimitives.Range`1.IsEmpty
  fullName: ComplicatedPrimitives.Range<T>.IsEmpty
  fullName.vb: ComplicatedPrimitives.Range(Of T).IsEmpty
  nameWithType: Range<T>.IsEmpty
  nameWithType.vb: Range(Of T).IsEmpty
- uid: ComplicatedPrimitives.Range`1.IsEmpty*
  name: IsEmpty
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_IsEmpty_
  commentId: Overload:ComplicatedPrimitives.Range`1.IsEmpty
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.IsEmpty
  fullName.vb: ComplicatedPrimitives.Range(Of T).IsEmpty
  nameWithType: Range<T>.IsEmpty
  nameWithType.vb: Range(Of T).IsEmpty
- uid: ComplicatedPrimitives.Range`1.IsFinite
  name: IsFinite
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_IsFinite
  commentId: P:ComplicatedPrimitives.Range`1.IsFinite
  fullName: ComplicatedPrimitives.Range<T>.IsFinite
  fullName.vb: ComplicatedPrimitives.Range(Of T).IsFinite
  nameWithType: Range<T>.IsFinite
  nameWithType.vb: Range(Of T).IsFinite
- uid: ComplicatedPrimitives.Range`1.IsFinite*
  name: IsFinite
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_IsFinite_
  commentId: Overload:ComplicatedPrimitives.Range`1.IsFinite
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.IsFinite
  fullName.vb: ComplicatedPrimitives.Range(Of T).IsFinite
  nameWithType: Range<T>.IsFinite
  nameWithType.vb: Range(Of T).IsFinite
- uid: ComplicatedPrimitives.Range`1.IsInfinite
  name: IsInfinite
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_IsInfinite
  commentId: P:ComplicatedPrimitives.Range`1.IsInfinite
  fullName: ComplicatedPrimitives.Range<T>.IsInfinite
  fullName.vb: ComplicatedPrimitives.Range(Of T).IsInfinite
  nameWithType: Range<T>.IsInfinite
  nameWithType.vb: Range(Of T).IsInfinite
- uid: ComplicatedPrimitives.Range`1.IsInfinite*
  name: IsInfinite
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_IsInfinite_
  commentId: Overload:ComplicatedPrimitives.Range`1.IsInfinite
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.IsInfinite
  fullName.vb: ComplicatedPrimitives.Range(Of T).IsInfinite
  nameWithType: Range<T>.IsInfinite
  nameWithType.vb: Range(Of T).IsInfinite
- uid: ComplicatedPrimitives.Range`1.IsInfiniteLeft
  name: IsInfiniteLeft
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_IsInfiniteLeft
  commentId: P:ComplicatedPrimitives.Range`1.IsInfiniteLeft
  fullName: ComplicatedPrimitives.Range<T>.IsInfiniteLeft
  fullName.vb: ComplicatedPrimitives.Range(Of T).IsInfiniteLeft
  nameWithType: Range<T>.IsInfiniteLeft
  nameWithType.vb: Range(Of T).IsInfiniteLeft
- uid: ComplicatedPrimitives.Range`1.IsInfiniteLeft*
  name: IsInfiniteLeft
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_IsInfiniteLeft_
  commentId: Overload:ComplicatedPrimitives.Range`1.IsInfiniteLeft
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.IsInfiniteLeft
  fullName.vb: ComplicatedPrimitives.Range(Of T).IsInfiniteLeft
  nameWithType: Range<T>.IsInfiniteLeft
  nameWithType.vb: Range(Of T).IsInfiniteLeft
- uid: ComplicatedPrimitives.Range`1.IsInfiniteRight
  name: IsInfiniteRight
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_IsInfiniteRight
  commentId: P:ComplicatedPrimitives.Range`1.IsInfiniteRight
  fullName: ComplicatedPrimitives.Range<T>.IsInfiniteRight
  fullName.vb: ComplicatedPrimitives.Range(Of T).IsInfiniteRight
  nameWithType: Range<T>.IsInfiniteRight
  nameWithType.vb: Range(Of T).IsInfiniteRight
- uid: ComplicatedPrimitives.Range`1.IsInfiniteRight*
  name: IsInfiniteRight
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_IsInfiniteRight_
  commentId: Overload:ComplicatedPrimitives.Range`1.IsInfiniteRight
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.IsInfiniteRight
  fullName.vb: ComplicatedPrimitives.Range(Of T).IsInfiniteRight
  nameWithType: Range<T>.IsInfiniteRight
  nameWithType.vb: Range(Of T).IsInfiniteRight
- uid: ComplicatedPrimitives.Range`1.IsNotEmpty
  name: IsNotEmpty
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_IsNotEmpty
  commentId: P:ComplicatedPrimitives.Range`1.IsNotEmpty
  fullName: ComplicatedPrimitives.Range<T>.IsNotEmpty
  fullName.vb: ComplicatedPrimitives.Range(Of T).IsNotEmpty
  nameWithType: Range<T>.IsNotEmpty
  nameWithType.vb: Range(Of T).IsNotEmpty
- uid: ComplicatedPrimitives.Range`1.IsNotEmpty*
  name: IsNotEmpty
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_IsNotEmpty_
  commentId: Overload:ComplicatedPrimitives.Range`1.IsNotEmpty
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.IsNotEmpty
  fullName.vb: ComplicatedPrimitives.Range(Of T).IsNotEmpty
  nameWithType: Range<T>.IsNotEmpty
  nameWithType.vb: Range(Of T).IsNotEmpty
- uid: ComplicatedPrimitives.Range`1.IsProperSubsetOf(ComplicatedPrimitives.Range{`0})
  name: IsProperSubsetOf(Range<T>)
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_IsProperSubsetOf_ComplicatedPrimitives_Range__0__
  commentId: M:ComplicatedPrimitives.Range`1.IsProperSubsetOf(ComplicatedPrimitives.Range{`0})
  name.vb: IsProperSubsetOf(Range(Of T))
  fullName: ComplicatedPrimitives.Range<T>.IsProperSubsetOf(ComplicatedPrimitives.Range<T>)
  fullName.vb: ComplicatedPrimitives.Range(Of T).IsProperSubsetOf(ComplicatedPrimitives.Range(Of T))
  nameWithType: Range<T>.IsProperSubsetOf(Range<T>)
  nameWithType.vb: Range(Of T).IsProperSubsetOf(Range(Of T))
- uid: ComplicatedPrimitives.Range`1.IsProperSubsetOf*
  name: IsProperSubsetOf
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_IsProperSubsetOf_
  commentId: Overload:ComplicatedPrimitives.Range`1.IsProperSubsetOf
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.IsProperSubsetOf
  fullName.vb: ComplicatedPrimitives.Range(Of T).IsProperSubsetOf
  nameWithType: Range<T>.IsProperSubsetOf
  nameWithType.vb: Range(Of T).IsProperSubsetOf
- uid: ComplicatedPrimitives.Range`1.IsProperSupersetOf(ComplicatedPrimitives.Range{`0})
  name: IsProperSupersetOf(Range<T>)
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_IsProperSupersetOf_ComplicatedPrimitives_Range__0__
  commentId: M:ComplicatedPrimitives.Range`1.IsProperSupersetOf(ComplicatedPrimitives.Range{`0})
  name.vb: IsProperSupersetOf(Range(Of T))
  fullName: ComplicatedPrimitives.Range<T>.IsProperSupersetOf(ComplicatedPrimitives.Range<T>)
  fullName.vb: ComplicatedPrimitives.Range(Of T).IsProperSupersetOf(ComplicatedPrimitives.Range(Of T))
  nameWithType: Range<T>.IsProperSupersetOf(Range<T>)
  nameWithType.vb: Range(Of T).IsProperSupersetOf(Range(Of T))
- uid: ComplicatedPrimitives.Range`1.IsProperSupersetOf*
  name: IsProperSupersetOf
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_IsProperSupersetOf_
  commentId: Overload:ComplicatedPrimitives.Range`1.IsProperSupersetOf
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.IsProperSupersetOf
  fullName.vb: ComplicatedPrimitives.Range(Of T).IsProperSupersetOf
  nameWithType: Range<T>.IsProperSupersetOf
  nameWithType.vb: Range(Of T).IsProperSupersetOf
- uid: ComplicatedPrimitives.Range`1.IsSubsetOf(ComplicatedPrimitives.Range{`0})
  name: IsSubsetOf(Range<T>)
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_IsSubsetOf_ComplicatedPrimitives_Range__0__
  commentId: M:ComplicatedPrimitives.Range`1.IsSubsetOf(ComplicatedPrimitives.Range{`0})
  name.vb: IsSubsetOf(Range(Of T))
  fullName: ComplicatedPrimitives.Range<T>.IsSubsetOf(ComplicatedPrimitives.Range<T>)
  fullName.vb: ComplicatedPrimitives.Range(Of T).IsSubsetOf(ComplicatedPrimitives.Range(Of T))
  nameWithType: Range<T>.IsSubsetOf(Range<T>)
  nameWithType.vb: Range(Of T).IsSubsetOf(Range(Of T))
- uid: ComplicatedPrimitives.Range`1.IsSubsetOf*
  name: IsSubsetOf
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_IsSubsetOf_
  commentId: Overload:ComplicatedPrimitives.Range`1.IsSubsetOf
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.IsSubsetOf
  fullName.vb: ComplicatedPrimitives.Range(Of T).IsSubsetOf
  nameWithType: Range<T>.IsSubsetOf
  nameWithType.vb: Range(Of T).IsSubsetOf
- uid: ComplicatedPrimitives.Range`1.IsSupersetOf(ComplicatedPrimitives.Range{`0})
  name: IsSupersetOf(Range<T>)
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_IsSupersetOf_ComplicatedPrimitives_Range__0__
  commentId: M:ComplicatedPrimitives.Range`1.IsSupersetOf(ComplicatedPrimitives.Range{`0})
  name.vb: IsSupersetOf(Range(Of T))
  fullName: ComplicatedPrimitives.Range<T>.IsSupersetOf(ComplicatedPrimitives.Range<T>)
  fullName.vb: ComplicatedPrimitives.Range(Of T).IsSupersetOf(ComplicatedPrimitives.Range(Of T))
  nameWithType: Range<T>.IsSupersetOf(Range<T>)
  nameWithType.vb: Range(Of T).IsSupersetOf(Range(Of T))
- uid: ComplicatedPrimitives.Range`1.IsSupersetOf*
  name: IsSupersetOf
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_IsSupersetOf_
  commentId: Overload:ComplicatedPrimitives.Range`1.IsSupersetOf
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.IsSupersetOf
  fullName.vb: ComplicatedPrimitives.Range(Of T).IsSupersetOf
  nameWithType: Range<T>.IsSupersetOf
  nameWithType.vb: Range(Of T).IsSupersetOf
- uid: ComplicatedPrimitives.Range`1.Left
  name: Left
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_Left
  commentId: P:ComplicatedPrimitives.Range`1.Left
  fullName: ComplicatedPrimitives.Range<T>.Left
  fullName.vb: ComplicatedPrimitives.Range(Of T).Left
  nameWithType: Range<T>.Left
  nameWithType.vb: Range(Of T).Left
- uid: ComplicatedPrimitives.Range`1.Left*
  name: Left
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_Left_
  commentId: Overload:ComplicatedPrimitives.Range`1.Left
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.Left
  fullName.vb: ComplicatedPrimitives.Range(Of T).Left
  nameWithType: Range<T>.Left
  nameWithType.vb: Range(Of T).Left
- uid: ComplicatedPrimitives.Range`1.LeftValue
  name: LeftValue
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_LeftValue
  commentId: P:ComplicatedPrimitives.Range`1.LeftValue
  fullName: ComplicatedPrimitives.Range<T>.LeftValue
  fullName.vb: ComplicatedPrimitives.Range(Of T).LeftValue
  nameWithType: Range<T>.LeftValue
  nameWithType.vb: Range(Of T).LeftValue
- uid: ComplicatedPrimitives.Range`1.LeftValue*
  name: LeftValue
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_LeftValue_
  commentId: Overload:ComplicatedPrimitives.Range`1.LeftValue
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.LeftValue
  fullName.vb: ComplicatedPrimitives.Range(Of T).LeftValue
  nameWithType: Range<T>.LeftValue
  nameWithType.vb: Range(Of T).LeftValue
- uid: ComplicatedPrimitives.Range`1.Map*
  name: Map
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_Map_
  commentId: Overload:ComplicatedPrimitives.Range`1.Map
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.Map
  fullName.vb: ComplicatedPrimitives.Range(Of T).Map
  nameWithType: Range<T>.Map
  nameWithType.vb: Range(Of T).Map
- uid: ComplicatedPrimitives.Range`1.Map``1(System.Func{`0,``0})
  name: Map<TResult>(Func<T, TResult>)
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_Map__1_System_Func__0___0__
  commentId: M:ComplicatedPrimitives.Range`1.Map``1(System.Func{`0,``0})
  name.vb: Map(Of TResult)(Func(Of T, TResult))
  fullName: ComplicatedPrimitives.Range<T>.Map<TResult>(System.Func<T, TResult>)
  fullName.vb: ComplicatedPrimitives.Range(Of T).Map(Of TResult)(System.Func(Of T, TResult))
  nameWithType: Range<T>.Map<TResult>(Func<T, TResult>)
  nameWithType.vb: Range(Of T).Map(Of TResult)(Func(Of T, TResult))
- uid: ComplicatedPrimitives.Range`1.op_Addition(ComplicatedPrimitives.Range{`0},ComplicatedPrimitives.Range{`0})
  name: Addition(Range<T>, Range<T>)
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_op_Addition_ComplicatedPrimitives_Range__0__ComplicatedPrimitives_Range__0__
  commentId: M:ComplicatedPrimitives.Range`1.op_Addition(ComplicatedPrimitives.Range{`0},ComplicatedPrimitives.Range{`0})
  name.vb: Addition(Range(Of T), Range(Of T))
  fullName: ComplicatedPrimitives.Range<T>.Addition(ComplicatedPrimitives.Range<T>, ComplicatedPrimitives.Range<T>)
  fullName.vb: ComplicatedPrimitives.Range(Of T).Addition(ComplicatedPrimitives.Range(Of T), ComplicatedPrimitives.Range(Of T))
  nameWithType: Range<T>.Addition(Range<T>, Range<T>)
  nameWithType.vb: Range(Of T).Addition(Range(Of T), Range(Of T))
- uid: ComplicatedPrimitives.Range`1.op_Addition*
  name: Addition
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_op_Addition_
  commentId: Overload:ComplicatedPrimitives.Range`1.op_Addition
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.Addition
  fullName.vb: ComplicatedPrimitives.Range(Of T).Addition
  nameWithType: Range<T>.Addition
  nameWithType.vb: Range(Of T).Addition
- uid: ComplicatedPrimitives.Range`1.op_Equality(ComplicatedPrimitives.Range{`0},ComplicatedPrimitives.Range{`0})
  name: Equality(Range<T>, Range<T>)
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_op_Equality_ComplicatedPrimitives_Range__0__ComplicatedPrimitives_Range__0__
  commentId: M:ComplicatedPrimitives.Range`1.op_Equality(ComplicatedPrimitives.Range{`0},ComplicatedPrimitives.Range{`0})
  name.vb: Equality(Range(Of T), Range(Of T))
  fullName: ComplicatedPrimitives.Range<T>.Equality(ComplicatedPrimitives.Range<T>, ComplicatedPrimitives.Range<T>)
  fullName.vb: ComplicatedPrimitives.Range(Of T).Equality(ComplicatedPrimitives.Range(Of T), ComplicatedPrimitives.Range(Of T))
  nameWithType: Range<T>.Equality(Range<T>, Range<T>)
  nameWithType.vb: Range(Of T).Equality(Range(Of T), Range(Of T))
- uid: ComplicatedPrimitives.Range`1.op_Equality*
  name: Equality
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_op_Equality_
  commentId: Overload:ComplicatedPrimitives.Range`1.op_Equality
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.Equality
  fullName.vb: ComplicatedPrimitives.Range(Of T).Equality
  nameWithType: Range<T>.Equality
  nameWithType.vb: Range(Of T).Equality
- uid: ComplicatedPrimitives.Range`1.op_Inequality(ComplicatedPrimitives.Range{`0},ComplicatedPrimitives.Range{`0})
  name: Inequality(Range<T>, Range<T>)
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_op_Inequality_ComplicatedPrimitives_Range__0__ComplicatedPrimitives_Range__0__
  commentId: M:ComplicatedPrimitives.Range`1.op_Inequality(ComplicatedPrimitives.Range{`0},ComplicatedPrimitives.Range{`0})
  name.vb: Inequality(Range(Of T), Range(Of T))
  fullName: ComplicatedPrimitives.Range<T>.Inequality(ComplicatedPrimitives.Range<T>, ComplicatedPrimitives.Range<T>)
  fullName.vb: ComplicatedPrimitives.Range(Of T).Inequality(ComplicatedPrimitives.Range(Of T), ComplicatedPrimitives.Range(Of T))
  nameWithType: Range<T>.Inequality(Range<T>, Range<T>)
  nameWithType.vb: Range(Of T).Inequality(Range(Of T), Range(Of T))
- uid: ComplicatedPrimitives.Range`1.op_Inequality*
  name: Inequality
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_op_Inequality_
  commentId: Overload:ComplicatedPrimitives.Range`1.op_Inequality
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.Inequality
  fullName.vb: ComplicatedPrimitives.Range(Of T).Inequality
  nameWithType: Range<T>.Inequality
  nameWithType.vb: Range(Of T).Inequality
- uid: ComplicatedPrimitives.Range`1.op_Multiply(ComplicatedPrimitives.Range{`0},ComplicatedPrimitives.Range{`0})
  name: Multiply(Range<T>, Range<T>)
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_op_Multiply_ComplicatedPrimitives_Range__0__ComplicatedPrimitives_Range__0__
  commentId: M:ComplicatedPrimitives.Range`1.op_Multiply(ComplicatedPrimitives.Range{`0},ComplicatedPrimitives.Range{`0})
  name.vb: Multiply(Range(Of T), Range(Of T))
  fullName: ComplicatedPrimitives.Range<T>.Multiply(ComplicatedPrimitives.Range<T>, ComplicatedPrimitives.Range<T>)
  fullName.vb: ComplicatedPrimitives.Range(Of T).Multiply(ComplicatedPrimitives.Range(Of T), ComplicatedPrimitives.Range(Of T))
  nameWithType: Range<T>.Multiply(Range<T>, Range<T>)
  nameWithType.vb: Range(Of T).Multiply(Range(Of T), Range(Of T))
- uid: ComplicatedPrimitives.Range`1.op_Multiply*
  name: Multiply
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_op_Multiply_
  commentId: Overload:ComplicatedPrimitives.Range`1.op_Multiply
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.Multiply
  fullName.vb: ComplicatedPrimitives.Range(Of T).Multiply
  nameWithType: Range<T>.Multiply
  nameWithType.vb: Range(Of T).Multiply
- uid: ComplicatedPrimitives.Range`1.op_Subtraction(ComplicatedPrimitives.Range{`0},ComplicatedPrimitives.Range{`0})
  name: Subtraction(Range<T>, Range<T>)
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_op_Subtraction_ComplicatedPrimitives_Range__0__ComplicatedPrimitives_Range__0__
  commentId: M:ComplicatedPrimitives.Range`1.op_Subtraction(ComplicatedPrimitives.Range{`0},ComplicatedPrimitives.Range{`0})
  name.vb: Subtraction(Range(Of T), Range(Of T))
  fullName: ComplicatedPrimitives.Range<T>.Subtraction(ComplicatedPrimitives.Range<T>, ComplicatedPrimitives.Range<T>)
  fullName.vb: ComplicatedPrimitives.Range(Of T).Subtraction(ComplicatedPrimitives.Range(Of T), ComplicatedPrimitives.Range(Of T))
  nameWithType: Range<T>.Subtraction(Range<T>, Range<T>)
  nameWithType.vb: Range(Of T).Subtraction(Range(Of T), Range(Of T))
- uid: ComplicatedPrimitives.Range`1.op_Subtraction*
  name: Subtraction
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_op_Subtraction_
  commentId: Overload:ComplicatedPrimitives.Range`1.op_Subtraction
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.Subtraction
  fullName.vb: ComplicatedPrimitives.Range(Of T).Subtraction
  nameWithType: Range<T>.Subtraction
  nameWithType.vb: Range(Of T).Subtraction
- uid: ComplicatedPrimitives.Range`1.Right
  name: Right
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_Right
  commentId: P:ComplicatedPrimitives.Range`1.Right
  fullName: ComplicatedPrimitives.Range<T>.Right
  fullName.vb: ComplicatedPrimitives.Range(Of T).Right
  nameWithType: Range<T>.Right
  nameWithType.vb: Range(Of T).Right
- uid: ComplicatedPrimitives.Range`1.Right*
  name: Right
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_Right_
  commentId: Overload:ComplicatedPrimitives.Range`1.Right
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.Right
  fullName.vb: ComplicatedPrimitives.Range(Of T).Right
  nameWithType: Range<T>.Right
  nameWithType.vb: Range(Of T).Right
- uid: ComplicatedPrimitives.Range`1.RightValue
  name: RightValue
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_RightValue
  commentId: P:ComplicatedPrimitives.Range`1.RightValue
  fullName: ComplicatedPrimitives.Range<T>.RightValue
  fullName.vb: ComplicatedPrimitives.Range(Of T).RightValue
  nameWithType: Range<T>.RightValue
  nameWithType.vb: Range(Of T).RightValue
- uid: ComplicatedPrimitives.Range`1.RightValue*
  name: RightValue
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_RightValue_
  commentId: Overload:ComplicatedPrimitives.Range`1.RightValue
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.RightValue
  fullName.vb: ComplicatedPrimitives.Range(Of T).RightValue
  nameWithType: Range<T>.RightValue
  nameWithType.vb: Range(Of T).RightValue
- uid: ComplicatedPrimitives.Range`1.ToString
  name: ToString()
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_ToString
  commentId: M:ComplicatedPrimitives.Range`1.ToString
  fullName: ComplicatedPrimitives.Range<T>.ToString()
  fullName.vb: ComplicatedPrimitives.Range(Of T).ToString()
  nameWithType: Range<T>.ToString()
  nameWithType.vb: Range(Of T).ToString()
- uid: ComplicatedPrimitives.Range`1.ToString*
  name: ToString
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_ToString_
  commentId: Overload:ComplicatedPrimitives.Range`1.ToString
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.ToString
  fullName.vb: ComplicatedPrimitives.Range(Of T).ToString
  nameWithType: Range<T>.ToString
  nameWithType.vb: Range(Of T).ToString
- uid: ComplicatedPrimitives.Range`1.Translate(System.Func{`0,`0})
  name: Translate(Func<T, T>)
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_Translate_System_Func__0__0__
  commentId: M:ComplicatedPrimitives.Range`1.Translate(System.Func{`0,`0})
  name.vb: Translate(Func(Of T, T))
  fullName: ComplicatedPrimitives.Range<T>.Translate(System.Func<T, T>)
  fullName.vb: ComplicatedPrimitives.Range(Of T).Translate(System.Func(Of T, T))
  nameWithType: Range<T>.Translate(Func<T, T>)
  nameWithType.vb: Range(Of T).Translate(Func(Of T, T))
- uid: ComplicatedPrimitives.Range`1.Translate*
  name: Translate
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_Translate_
  commentId: Overload:ComplicatedPrimitives.Range`1.Translate
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.Translate
  fullName.vb: ComplicatedPrimitives.Range(Of T).Translate
  nameWithType: Range<T>.Translate
  nameWithType.vb: Range(Of T).Translate
- uid: ComplicatedPrimitives.Range`1.TryIntersectWith(ComplicatedPrimitives.Range{`0},ComplicatedPrimitives.Range{`0}@)
  name: TryIntersectWith(Range<T>, out Range<T>)
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_TryIntersectWith_ComplicatedPrimitives_Range__0__ComplicatedPrimitives_Range__0___
  commentId: M:ComplicatedPrimitives.Range`1.TryIntersectWith(ComplicatedPrimitives.Range{`0},ComplicatedPrimitives.Range{`0}@)
  name.vb: TryIntersectWith(Range(Of T), ByRef Range(Of T))
  fullName: ComplicatedPrimitives.Range<T>.TryIntersectWith(ComplicatedPrimitives.Range<T>, out ComplicatedPrimitives.Range<T>)
  fullName.vb: ComplicatedPrimitives.Range(Of T).TryIntersectWith(ComplicatedPrimitives.Range(Of T), ByRef ComplicatedPrimitives.Range(Of T))
  nameWithType: Range<T>.TryIntersectWith(Range<T>, out Range<T>)
  nameWithType.vb: Range(Of T).TryIntersectWith(Range(Of T), ByRef Range(Of T))
- uid: ComplicatedPrimitives.Range`1.TryIntersectWith*
  name: TryIntersectWith
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_TryIntersectWith_
  commentId: Overload:ComplicatedPrimitives.Range`1.TryIntersectWith
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.TryIntersectWith
  fullName.vb: ComplicatedPrimitives.Range(Of T).TryIntersectWith
  nameWithType: Range<T>.TryIntersectWith
  nameWithType.vb: Range(Of T).TryIntersectWith
- uid: ComplicatedPrimitives.Range`1.UnionWith(ComplicatedPrimitives.Range{`0})
  name: UnionWith(Range<T>)
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_UnionWith_ComplicatedPrimitives_Range__0__
  commentId: M:ComplicatedPrimitives.Range`1.UnionWith(ComplicatedPrimitives.Range{`0})
  name.vb: UnionWith(Range(Of T))
  fullName: ComplicatedPrimitives.Range<T>.UnionWith(ComplicatedPrimitives.Range<T>)
  fullName.vb: ComplicatedPrimitives.Range(Of T).UnionWith(ComplicatedPrimitives.Range(Of T))
  nameWithType: Range<T>.UnionWith(Range<T>)
  nameWithType.vb: Range(Of T).UnionWith(Range(Of T))
- uid: ComplicatedPrimitives.Range`1.UnionWith*
  name: UnionWith
  href: api/ComplicatedPrimitives.Range-1.html#ComplicatedPrimitives_Range_1_UnionWith_
  commentId: Overload:ComplicatedPrimitives.Range`1.UnionWith
  isSpec: "True"
  fullName: ComplicatedPrimitives.Range<T>.UnionWith
  fullName.vb: ComplicatedPrimitives.Range(Of T).UnionWith
  nameWithType: Range<T>.UnionWith
  nameWithType.vb: Range(Of T).UnionWith
- uid: ComplicatedPrimitives.RangeExtensions
  name: RangeExtensions
  href: api/ComplicatedPrimitives.RangeExtensions.html
  commentId: T:ComplicatedPrimitives.RangeExtensions
  fullName: ComplicatedPrimitives.RangeExtensions
  nameWithType: RangeExtensions
- uid: ComplicatedPrimitives.RangeExtensions.Merge*
  name: Merge
  href: api/ComplicatedPrimitives.RangeExtensions.html#ComplicatedPrimitives_RangeExtensions_Merge_
  commentId: Overload:ComplicatedPrimitives.RangeExtensions.Merge
  isSpec: "True"
  fullName: ComplicatedPrimitives.RangeExtensions.Merge
  nameWithType: RangeExtensions.Merge
- uid: ComplicatedPrimitives.RangeExtensions.Merge``1(System.Collections.Generic.IEnumerable{ComplicatedPrimitives.Range{``0}})
  name: Merge<T>(IEnumerable<Range<T>>)
  href: api/ComplicatedPrimitives.RangeExtensions.html#ComplicatedPrimitives_RangeExtensions_Merge__1_System_Collections_Generic_IEnumerable_ComplicatedPrimitives_Range___0___
  commentId: M:ComplicatedPrimitives.RangeExtensions.Merge``1(System.Collections.Generic.IEnumerable{ComplicatedPrimitives.Range{``0}})
  name.vb: Merge(Of T)(IEnumerable(Of Range(Of T)))
  fullName: ComplicatedPrimitives.RangeExtensions.Merge<T>(System.Collections.Generic.IEnumerable<ComplicatedPrimitives.Range<T>>)
  fullName.vb: ComplicatedPrimitives.RangeExtensions.Merge(Of T)(System.Collections.Generic.IEnumerable(Of ComplicatedPrimitives.Range(Of T)))
  nameWithType: RangeExtensions.Merge<T>(IEnumerable<Range<T>>)
  nameWithType.vb: RangeExtensions.Merge(Of T)(IEnumerable(Of Range(Of T)))
- uid: ComplicatedPrimitives.RangeParser`1
  name: RangeParser<T>
  href: api/ComplicatedPrimitives.RangeParser-1.html
  commentId: T:ComplicatedPrimitives.RangeParser`1
  name.vb: RangeParser(Of T)
  fullName: ComplicatedPrimitives.RangeParser<T>
  fullName.vb: ComplicatedPrimitives.RangeParser(Of T)
  nameWithType: RangeParser<T>
  nameWithType.vb: RangeParser(Of T)
- uid: ComplicatedPrimitives.RangeParser`1.#ctor(ComplicatedPrimitives.IParser{`0})
  name: RangeParser(IParser<T>)
  href: api/ComplicatedPrimitives.RangeParser-1.html#ComplicatedPrimitives_RangeParser_1__ctor_ComplicatedPrimitives_IParser__0__
  commentId: M:ComplicatedPrimitives.RangeParser`1.#ctor(ComplicatedPrimitives.IParser{`0})
  name.vb: RangeParser(IParser(Of T))
  fullName: ComplicatedPrimitives.RangeParser<T>.RangeParser(ComplicatedPrimitives.IParser<T>)
  fullName.vb: ComplicatedPrimitives.RangeParser(Of T).RangeParser(ComplicatedPrimitives.IParser(Of T))
  nameWithType: RangeParser<T>.RangeParser(IParser<T>)
  nameWithType.vb: RangeParser(Of T).RangeParser(IParser(Of T))
- uid: ComplicatedPrimitives.RangeParser`1.#ctor*
  name: RangeParser
  href: api/ComplicatedPrimitives.RangeParser-1.html#ComplicatedPrimitives_RangeParser_1__ctor_
  commentId: Overload:ComplicatedPrimitives.RangeParser`1.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.RangeParser<T>.RangeParser
  fullName.vb: ComplicatedPrimitives.RangeParser(Of T).RangeParser
  nameWithType: RangeParser<T>.RangeParser
  nameWithType.vb: RangeParser(Of T).RangeParser
- uid: ComplicatedPrimitives.RangeParser`1.Parse(System.String)
  name: Parse(String)
  href: api/ComplicatedPrimitives.RangeParser-1.html#ComplicatedPrimitives_RangeParser_1_Parse_System_String_
  commentId: M:ComplicatedPrimitives.RangeParser`1.Parse(System.String)
  fullName: ComplicatedPrimitives.RangeParser<T>.Parse(System.String)
  fullName.vb: ComplicatedPrimitives.RangeParser(Of T).Parse(System.String)
  nameWithType: RangeParser<T>.Parse(String)
  nameWithType.vb: RangeParser(Of T).Parse(String)
- uid: ComplicatedPrimitives.RangeParser`1.Parse*
  name: Parse
  href: api/ComplicatedPrimitives.RangeParser-1.html#ComplicatedPrimitives_RangeParser_1_Parse_
  commentId: Overload:ComplicatedPrimitives.RangeParser`1.Parse
  isSpec: "True"
  fullName: ComplicatedPrimitives.RangeParser<T>.Parse
  fullName.vb: ComplicatedPrimitives.RangeParser(Of T).Parse
  nameWithType: RangeParser<T>.Parse
  nameWithType.vb: RangeParser(Of T).Parse
- uid: ComplicatedPrimitives.RangeParser`1.TryParse(System.String,ComplicatedPrimitives.Range{`0}@)
  name: TryParse(String, out Range<T>)
  href: api/ComplicatedPrimitives.RangeParser-1.html#ComplicatedPrimitives_RangeParser_1_TryParse_System_String_ComplicatedPrimitives_Range__0___
  commentId: M:ComplicatedPrimitives.RangeParser`1.TryParse(System.String,ComplicatedPrimitives.Range{`0}@)
  name.vb: TryParse(String, ByRef Range(Of T))
  fullName: ComplicatedPrimitives.RangeParser<T>.TryParse(System.String, out ComplicatedPrimitives.Range<T>)
  fullName.vb: ComplicatedPrimitives.RangeParser(Of T).TryParse(System.String, ByRef ComplicatedPrimitives.Range(Of T))
  nameWithType: RangeParser<T>.TryParse(String, out Range<T>)
  nameWithType.vb: RangeParser(Of T).TryParse(String, ByRef Range(Of T))
- uid: ComplicatedPrimitives.RangeParser`1.TryParse*
  name: TryParse
  href: api/ComplicatedPrimitives.RangeParser-1.html#ComplicatedPrimitives_RangeParser_1_TryParse_
  commentId: Overload:ComplicatedPrimitives.RangeParser`1.TryParse
  isSpec: "True"
  fullName: ComplicatedPrimitives.RangeParser<T>.TryParse
  fullName.vb: ComplicatedPrimitives.RangeParser(Of T).TryParse
  nameWithType: RangeParser<T>.TryParse
  nameWithType.vb: RangeParser(Of T).TryParse
- uid: ComplicatedPrimitives.RangeUnion`1
  name: RangeUnion<T>
  href: api/ComplicatedPrimitives.RangeUnion-1.html
  commentId: T:ComplicatedPrimitives.RangeUnion`1
  name.vb: RangeUnion(Of T)
  fullName: ComplicatedPrimitives.RangeUnion<T>
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T)
  nameWithType: RangeUnion<T>
  nameWithType.vb: RangeUnion(Of T)
- uid: ComplicatedPrimitives.RangeUnion`1.#ctor(ComplicatedPrimitives.Range{`0})
  name: RangeUnion(Range<T>)
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1__ctor_ComplicatedPrimitives_Range__0__
  commentId: M:ComplicatedPrimitives.RangeUnion`1.#ctor(ComplicatedPrimitives.Range{`0})
  name.vb: RangeUnion(Range(Of T))
  fullName: ComplicatedPrimitives.RangeUnion<T>.RangeUnion(ComplicatedPrimitives.Range<T>)
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).RangeUnion(ComplicatedPrimitives.Range(Of T))
  nameWithType: RangeUnion<T>.RangeUnion(Range<T>)
  nameWithType.vb: RangeUnion(Of T).RangeUnion(Range(Of T))
- uid: ComplicatedPrimitives.RangeUnion`1.#ctor(System.Collections.Generic.IEnumerable{ComplicatedPrimitives.Range{`0}})
  name: RangeUnion(IEnumerable<Range<T>>)
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1__ctor_System_Collections_Generic_IEnumerable_ComplicatedPrimitives_Range__0___
  commentId: M:ComplicatedPrimitives.RangeUnion`1.#ctor(System.Collections.Generic.IEnumerable{ComplicatedPrimitives.Range{`0}})
  name.vb: RangeUnion(IEnumerable(Of Range(Of T)))
  fullName: ComplicatedPrimitives.RangeUnion<T>.RangeUnion(System.Collections.Generic.IEnumerable<ComplicatedPrimitives.Range<T>>)
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).RangeUnion(System.Collections.Generic.IEnumerable(Of ComplicatedPrimitives.Range(Of T)))
  nameWithType: RangeUnion<T>.RangeUnion(IEnumerable<Range<T>>)
  nameWithType.vb: RangeUnion(Of T).RangeUnion(IEnumerable(Of Range(Of T)))
- uid: ComplicatedPrimitives.RangeUnion`1.#ctor*
  name: RangeUnion
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1__ctor_
  commentId: Overload:ComplicatedPrimitives.RangeUnion`1.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.RangeUnion<T>.RangeUnion
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).RangeUnion
  nameWithType: RangeUnion<T>.RangeUnion
  nameWithType.vb: RangeUnion(Of T).RangeUnion
- uid: ComplicatedPrimitives.RangeUnion`1.AsNormalized
  name: AsNormalized()
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1_AsNormalized
  commentId: M:ComplicatedPrimitives.RangeUnion`1.AsNormalized
  fullName: ComplicatedPrimitives.RangeUnion<T>.AsNormalized()
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).AsNormalized()
  nameWithType: RangeUnion<T>.AsNormalized()
  nameWithType.vb: RangeUnion(Of T).AsNormalized()
- uid: ComplicatedPrimitives.RangeUnion`1.AsNormalized*
  name: AsNormalized
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1_AsNormalized_
  commentId: Overload:ComplicatedPrimitives.RangeUnion`1.AsNormalized
  isSpec: "True"
  fullName: ComplicatedPrimitives.RangeUnion<T>.AsNormalized
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).AsNormalized
  nameWithType: RangeUnion<T>.AsNormalized
  nameWithType.vb: RangeUnion(Of T).AsNormalized
- uid: ComplicatedPrimitives.RangeUnion`1.Contains(`0)
  name: Contains(T)
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1_Contains__0_
  commentId: M:ComplicatedPrimitives.RangeUnion`1.Contains(`0)
  fullName: ComplicatedPrimitives.RangeUnion<T>.Contains(T)
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).Contains(T)
  nameWithType: RangeUnion<T>.Contains(T)
  nameWithType.vb: RangeUnion(Of T).Contains(T)
- uid: ComplicatedPrimitives.RangeUnion`1.Contains*
  name: Contains
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1_Contains_
  commentId: Overload:ComplicatedPrimitives.RangeUnion`1.Contains
  isSpec: "True"
  fullName: ComplicatedPrimitives.RangeUnion<T>.Contains
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).Contains
  nameWithType: RangeUnion<T>.Contains
  nameWithType.vb: RangeUnion(Of T).Contains
- uid: ComplicatedPrimitives.RangeUnion`1.Empty
  name: Empty
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1_Empty
  commentId: P:ComplicatedPrimitives.RangeUnion`1.Empty
  fullName: ComplicatedPrimitives.RangeUnion<T>.Empty
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).Empty
  nameWithType: RangeUnion<T>.Empty
  nameWithType.vb: RangeUnion(Of T).Empty
- uid: ComplicatedPrimitives.RangeUnion`1.Empty*
  name: Empty
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1_Empty_
  commentId: Overload:ComplicatedPrimitives.RangeUnion`1.Empty
  isSpec: "True"
  fullName: ComplicatedPrimitives.RangeUnion<T>.Empty
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).Empty
  nameWithType: RangeUnion<T>.Empty
  nameWithType.vb: RangeUnion(Of T).Empty
- uid: ComplicatedPrimitives.RangeUnion`1.GetEnumerator
  name: GetEnumerator()
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1_GetEnumerator
  commentId: M:ComplicatedPrimitives.RangeUnion`1.GetEnumerator
  fullName: ComplicatedPrimitives.RangeUnion<T>.GetEnumerator()
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).GetEnumerator()
  nameWithType: RangeUnion<T>.GetEnumerator()
  nameWithType.vb: RangeUnion(Of T).GetEnumerator()
- uid: ComplicatedPrimitives.RangeUnion`1.GetEnumerator*
  name: GetEnumerator
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1_GetEnumerator_
  commentId: Overload:ComplicatedPrimitives.RangeUnion`1.GetEnumerator
  isSpec: "True"
  fullName: ComplicatedPrimitives.RangeUnion<T>.GetEnumerator
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).GetEnumerator
  nameWithType: RangeUnion<T>.GetEnumerator
  nameWithType.vb: RangeUnion(Of T).GetEnumerator
- uid: ComplicatedPrimitives.RangeUnion`1.IntersectsWith(ComplicatedPrimitives.Range{`0})
  name: IntersectsWith(Range<T>)
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1_IntersectsWith_ComplicatedPrimitives_Range__0__
  commentId: M:ComplicatedPrimitives.RangeUnion`1.IntersectsWith(ComplicatedPrimitives.Range{`0})
  name.vb: IntersectsWith(Range(Of T))
  fullName: ComplicatedPrimitives.RangeUnion<T>.IntersectsWith(ComplicatedPrimitives.Range<T>)
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).IntersectsWith(ComplicatedPrimitives.Range(Of T))
  nameWithType: RangeUnion<T>.IntersectsWith(Range<T>)
  nameWithType.vb: RangeUnion(Of T).IntersectsWith(Range(Of T))
- uid: ComplicatedPrimitives.RangeUnion`1.IntersectsWith*
  name: IntersectsWith
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1_IntersectsWith_
  commentId: Overload:ComplicatedPrimitives.RangeUnion`1.IntersectsWith
  isSpec: "True"
  fullName: ComplicatedPrimitives.RangeUnion<T>.IntersectsWith
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).IntersectsWith
  nameWithType: RangeUnion<T>.IntersectsWith
  nameWithType.vb: RangeUnion(Of T).IntersectsWith
- uid: ComplicatedPrimitives.RangeUnion`1.IntersectWith(ComplicatedPrimitives.Range{`0})
  name: IntersectWith(Range<T>)
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1_IntersectWith_ComplicatedPrimitives_Range__0__
  commentId: M:ComplicatedPrimitives.RangeUnion`1.IntersectWith(ComplicatedPrimitives.Range{`0})
  name.vb: IntersectWith(Range(Of T))
  fullName: ComplicatedPrimitives.RangeUnion<T>.IntersectWith(ComplicatedPrimitives.Range<T>)
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).IntersectWith(ComplicatedPrimitives.Range(Of T))
  nameWithType: RangeUnion<T>.IntersectWith(Range<T>)
  nameWithType.vb: RangeUnion(Of T).IntersectWith(Range(Of T))
- uid: ComplicatedPrimitives.RangeUnion`1.IntersectWith*
  name: IntersectWith
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1_IntersectWith_
  commentId: Overload:ComplicatedPrimitives.RangeUnion`1.IntersectWith
  isSpec: "True"
  fullName: ComplicatedPrimitives.RangeUnion<T>.IntersectWith
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).IntersectWith
  nameWithType: RangeUnion<T>.IntersectWith
  nameWithType.vb: RangeUnion(Of T).IntersectWith
- uid: ComplicatedPrimitives.RangeUnion`1.IsEmpty
  name: IsEmpty
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1_IsEmpty
  commentId: P:ComplicatedPrimitives.RangeUnion`1.IsEmpty
  fullName: ComplicatedPrimitives.RangeUnion<T>.IsEmpty
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).IsEmpty
  nameWithType: RangeUnion<T>.IsEmpty
  nameWithType.vb: RangeUnion(Of T).IsEmpty
- uid: ComplicatedPrimitives.RangeUnion`1.IsEmpty*
  name: IsEmpty
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1_IsEmpty_
  commentId: Overload:ComplicatedPrimitives.RangeUnion`1.IsEmpty
  isSpec: "True"
  fullName: ComplicatedPrimitives.RangeUnion<T>.IsEmpty
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).IsEmpty
  nameWithType: RangeUnion<T>.IsEmpty
  nameWithType.vb: RangeUnion(Of T).IsEmpty
- uid: ComplicatedPrimitives.RangeUnion`1.IsNormalized
  name: IsNormalized
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1_IsNormalized
  commentId: P:ComplicatedPrimitives.RangeUnion`1.IsNormalized
  fullName: ComplicatedPrimitives.RangeUnion<T>.IsNormalized
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).IsNormalized
  nameWithType: RangeUnion<T>.IsNormalized
  nameWithType.vb: RangeUnion(Of T).IsNormalized
- uid: ComplicatedPrimitives.RangeUnion`1.IsNormalized*
  name: IsNormalized
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1_IsNormalized_
  commentId: Overload:ComplicatedPrimitives.RangeUnion`1.IsNormalized
  isSpec: "True"
  fullName: ComplicatedPrimitives.RangeUnion<T>.IsNormalized
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).IsNormalized
  nameWithType: RangeUnion<T>.IsNormalized
  nameWithType.vb: RangeUnion(Of T).IsNormalized
- uid: ComplicatedPrimitives.RangeUnion`1.IsProperSubsetOf(ComplicatedPrimitives.Range{`0})
  name: IsProperSubsetOf(Range<T>)
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1_IsProperSubsetOf_ComplicatedPrimitives_Range__0__
  commentId: M:ComplicatedPrimitives.RangeUnion`1.IsProperSubsetOf(ComplicatedPrimitives.Range{`0})
  name.vb: IsProperSubsetOf(Range(Of T))
  fullName: ComplicatedPrimitives.RangeUnion<T>.IsProperSubsetOf(ComplicatedPrimitives.Range<T>)
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).IsProperSubsetOf(ComplicatedPrimitives.Range(Of T))
  nameWithType: RangeUnion<T>.IsProperSubsetOf(Range<T>)
  nameWithType.vb: RangeUnion(Of T).IsProperSubsetOf(Range(Of T))
- uid: ComplicatedPrimitives.RangeUnion`1.IsProperSubsetOf*
  name: IsProperSubsetOf
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1_IsProperSubsetOf_
  commentId: Overload:ComplicatedPrimitives.RangeUnion`1.IsProperSubsetOf
  isSpec: "True"
  fullName: ComplicatedPrimitives.RangeUnion<T>.IsProperSubsetOf
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).IsProperSubsetOf
  nameWithType: RangeUnion<T>.IsProperSubsetOf
  nameWithType.vb: RangeUnion(Of T).IsProperSubsetOf
- uid: ComplicatedPrimitives.RangeUnion`1.IsProperSupersetOf(ComplicatedPrimitives.Range{`0})
  name: IsProperSupersetOf(Range<T>)
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1_IsProperSupersetOf_ComplicatedPrimitives_Range__0__
  commentId: M:ComplicatedPrimitives.RangeUnion`1.IsProperSupersetOf(ComplicatedPrimitives.Range{`0})
  name.vb: IsProperSupersetOf(Range(Of T))
  fullName: ComplicatedPrimitives.RangeUnion<T>.IsProperSupersetOf(ComplicatedPrimitives.Range<T>)
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).IsProperSupersetOf(ComplicatedPrimitives.Range(Of T))
  nameWithType: RangeUnion<T>.IsProperSupersetOf(Range<T>)
  nameWithType.vb: RangeUnion(Of T).IsProperSupersetOf(Range(Of T))
- uid: ComplicatedPrimitives.RangeUnion`1.IsProperSupersetOf*
  name: IsProperSupersetOf
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1_IsProperSupersetOf_
  commentId: Overload:ComplicatedPrimitives.RangeUnion`1.IsProperSupersetOf
  isSpec: "True"
  fullName: ComplicatedPrimitives.RangeUnion<T>.IsProperSupersetOf
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).IsProperSupersetOf
  nameWithType: RangeUnion<T>.IsProperSupersetOf
  nameWithType.vb: RangeUnion(Of T).IsProperSupersetOf
- uid: ComplicatedPrimitives.RangeUnion`1.IsSubsetOf(ComplicatedPrimitives.Range{`0})
  name: IsSubsetOf(Range<T>)
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1_IsSubsetOf_ComplicatedPrimitives_Range__0__
  commentId: M:ComplicatedPrimitives.RangeUnion`1.IsSubsetOf(ComplicatedPrimitives.Range{`0})
  name.vb: IsSubsetOf(Range(Of T))
  fullName: ComplicatedPrimitives.RangeUnion<T>.IsSubsetOf(ComplicatedPrimitives.Range<T>)
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).IsSubsetOf(ComplicatedPrimitives.Range(Of T))
  nameWithType: RangeUnion<T>.IsSubsetOf(Range<T>)
  nameWithType.vb: RangeUnion(Of T).IsSubsetOf(Range(Of T))
- uid: ComplicatedPrimitives.RangeUnion`1.IsSubsetOf*
  name: IsSubsetOf
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1_IsSubsetOf_
  commentId: Overload:ComplicatedPrimitives.RangeUnion`1.IsSubsetOf
  isSpec: "True"
  fullName: ComplicatedPrimitives.RangeUnion<T>.IsSubsetOf
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).IsSubsetOf
  nameWithType: RangeUnion<T>.IsSubsetOf
  nameWithType.vb: RangeUnion(Of T).IsSubsetOf
- uid: ComplicatedPrimitives.RangeUnion`1.IsSupersetOf(ComplicatedPrimitives.Range{`0})
  name: IsSupersetOf(Range<T>)
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1_IsSupersetOf_ComplicatedPrimitives_Range__0__
  commentId: M:ComplicatedPrimitives.RangeUnion`1.IsSupersetOf(ComplicatedPrimitives.Range{`0})
  name.vb: IsSupersetOf(Range(Of T))
  fullName: ComplicatedPrimitives.RangeUnion<T>.IsSupersetOf(ComplicatedPrimitives.Range<T>)
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).IsSupersetOf(ComplicatedPrimitives.Range(Of T))
  nameWithType: RangeUnion<T>.IsSupersetOf(Range<T>)
  nameWithType.vb: RangeUnion(Of T).IsSupersetOf(Range(Of T))
- uid: ComplicatedPrimitives.RangeUnion`1.IsSupersetOf*
  name: IsSupersetOf
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1_IsSupersetOf_
  commentId: Overload:ComplicatedPrimitives.RangeUnion`1.IsSupersetOf
  isSpec: "True"
  fullName: ComplicatedPrimitives.RangeUnion<T>.IsSupersetOf
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).IsSupersetOf
  nameWithType: RangeUnion<T>.IsSupersetOf
  nameWithType.vb: RangeUnion(Of T).IsSupersetOf
- uid: ComplicatedPrimitives.RangeUnion`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator()
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1_System_Collections_IEnumerable_GetEnumerator
  commentId: M:ComplicatedPrimitives.RangeUnion`1.System#Collections#IEnumerable#GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  fullName: ComplicatedPrimitives.RangeUnion<T>.System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).System.Collections.IEnumerable.GetEnumerator()
  nameWithType: RangeUnion<T>.IEnumerable.GetEnumerator()
  nameWithType.vb: RangeUnion(Of T).System.Collections.IEnumerable.GetEnumerator()
- uid: ComplicatedPrimitives.RangeUnion`1.System#Collections#IEnumerable#GetEnumerator*
  name: IEnumerable.GetEnumerator
  href: api/ComplicatedPrimitives.RangeUnion-1.html#ComplicatedPrimitives_RangeUnion_1_System_Collections_IEnumerable_GetEnumerator_
  commentId: Overload:ComplicatedPrimitives.RangeUnion`1.System#Collections#IEnumerable#GetEnumerator
  isSpec: "True"
  name.vb: System.Collections.IEnumerable.GetEnumerator
  fullName: ComplicatedPrimitives.RangeUnion<T>.System.Collections.IEnumerable.GetEnumerator
  fullName.vb: ComplicatedPrimitives.RangeUnion(Of T).System.Collections.IEnumerable.GetEnumerator
  nameWithType: RangeUnion<T>.IEnumerable.GetEnumerator
  nameWithType.vb: RangeUnion(Of T).System.Collections.IEnumerable.GetEnumerator
- uid: ComplicatedPrimitives.TestAbstractions
  name: ComplicatedPrimitives.TestAbstractions
  href: api/ComplicatedPrimitives.TestAbstractions.html
  commentId: N:ComplicatedPrimitives.TestAbstractions
  fullName: ComplicatedPrimitives.TestAbstractions
  nameWithType: ComplicatedPrimitives.TestAbstractions
- uid: ComplicatedPrimitives.TestAbstractions.Customizations.Generic
  name: ComplicatedPrimitives.TestAbstractions.Customizations.Generic
  href: api/ComplicatedPrimitives.TestAbstractions.Customizations.Generic.html
  commentId: N:ComplicatedPrimitives.TestAbstractions.Customizations.Generic
  fullName: ComplicatedPrimitives.TestAbstractions.Customizations.Generic
  nameWithType: ComplicatedPrimitives.TestAbstractions.Customizations.Generic
- uid: ComplicatedPrimitives.TestAbstractions.Customizations.Generic.EnumSpecimenBuilder
  name: EnumSpecimenBuilder
  href: api/ComplicatedPrimitives.TestAbstractions.Customizations.Generic.EnumSpecimenBuilder.html
  commentId: T:ComplicatedPrimitives.TestAbstractions.Customizations.Generic.EnumSpecimenBuilder
  fullName: ComplicatedPrimitives.TestAbstractions.Customizations.Generic.EnumSpecimenBuilder
  nameWithType: EnumSpecimenBuilder
- uid: ComplicatedPrimitives.TestAbstractions.Customizations.Generic.EnumSpecimenBuilder.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)
  name: Create(Object, ISpecimenContext)
  href: api/ComplicatedPrimitives.TestAbstractions.Customizations.Generic.EnumSpecimenBuilder.html#ComplicatedPrimitives_TestAbstractions_Customizations_Generic_EnumSpecimenBuilder_Create_System_Object_AutoFixture_Kernel_ISpecimenContext_
  commentId: M:ComplicatedPrimitives.TestAbstractions.Customizations.Generic.EnumSpecimenBuilder.Create(System.Object,AutoFixture.Kernel.ISpecimenContext)
  fullName: ComplicatedPrimitives.TestAbstractions.Customizations.Generic.EnumSpecimenBuilder.Create(System.Object, AutoFixture.Kernel.ISpecimenContext)
  nameWithType: EnumSpecimenBuilder.Create(Object, ISpecimenContext)
- uid: ComplicatedPrimitives.TestAbstractions.Customizations.Generic.EnumSpecimenBuilder.Create*
  name: Create
  href: api/ComplicatedPrimitives.TestAbstractions.Customizations.Generic.EnumSpecimenBuilder.html#ComplicatedPrimitives_TestAbstractions_Customizations_Generic_EnumSpecimenBuilder_Create_
  commentId: Overload:ComplicatedPrimitives.TestAbstractions.Customizations.Generic.EnumSpecimenBuilder.Create
  isSpec: "True"
  fullName: ComplicatedPrimitives.TestAbstractions.Customizations.Generic.EnumSpecimenBuilder.Create
  nameWithType: EnumSpecimenBuilder.Create
- uid: ComplicatedPrimitives.TestAbstractions.Customizations.Generic.GenericParameterMock
  name: GenericParameterMock
  href: api/ComplicatedPrimitives.TestAbstractions.Customizations.Generic.GenericParameterMock.html
  commentId: T:ComplicatedPrimitives.TestAbstractions.Customizations.Generic.GenericParameterMock
  fullName: ComplicatedPrimitives.TestAbstractions.Customizations.Generic.GenericParameterMock
  nameWithType: GenericParameterMock
- uid: ComplicatedPrimitives.TestAbstractions.Customizations.Generic.GenericParameterMock.ResolveExact*
  name: ResolveExact
  href: api/ComplicatedPrimitives.TestAbstractions.Customizations.Generic.GenericParameterMock.html#ComplicatedPrimitives_TestAbstractions_Customizations_Generic_GenericParameterMock_ResolveExact_
  commentId: Overload:ComplicatedPrimitives.TestAbstractions.Customizations.Generic.GenericParameterMock.ResolveExact
  isSpec: "True"
  fullName: ComplicatedPrimitives.TestAbstractions.Customizations.Generic.GenericParameterMock.ResolveExact
  nameWithType: GenericParameterMock.ResolveExact
- uid: ComplicatedPrimitives.TestAbstractions.Customizations.Generic.GenericParameterMock.ResolveExact``1(AutoFixture.Kernel.ISpecimenContext)
  name: ResolveExact<T>(ISpecimenContext)
  href: api/ComplicatedPrimitives.TestAbstractions.Customizations.Generic.GenericParameterMock.html#ComplicatedPrimitives_TestAbstractions_Customizations_Generic_GenericParameterMock_ResolveExact__1_AutoFixture_Kernel_ISpecimenContext_
  commentId: M:ComplicatedPrimitives.TestAbstractions.Customizations.Generic.GenericParameterMock.ResolveExact``1(AutoFixture.Kernel.ISpecimenContext)
  name.vb: ResolveExact(Of T)(ISpecimenContext)
  fullName: ComplicatedPrimitives.TestAbstractions.Customizations.Generic.GenericParameterMock.ResolveExact<T>(AutoFixture.Kernel.ISpecimenContext)
  fullName.vb: ComplicatedPrimitives.TestAbstractions.Customizations.Generic.GenericParameterMock.ResolveExact(Of T)(AutoFixture.Kernel.ISpecimenContext)
  nameWithType: GenericParameterMock.ResolveExact<T>(ISpecimenContext)
  nameWithType.vb: GenericParameterMock.ResolveExact(Of T)(ISpecimenContext)
- uid: ComplicatedPrimitives.TestAbstractions.Customizations.Generic.GenericParameterMock.UseValue*
  name: UseValue
  href: api/ComplicatedPrimitives.TestAbstractions.Customizations.Generic.GenericParameterMock.html#ComplicatedPrimitives_TestAbstractions_Customizations_Generic_GenericParameterMock_UseValue_
  commentId: Overload:ComplicatedPrimitives.TestAbstractions.Customizations.Generic.GenericParameterMock.UseValue
  isSpec: "True"
  fullName: ComplicatedPrimitives.TestAbstractions.Customizations.Generic.GenericParameterMock.UseValue
  nameWithType: GenericParameterMock.UseValue
- uid: ComplicatedPrimitives.TestAbstractions.Customizations.Generic.GenericParameterMock.UseValue``1(``0)
  name: UseValue<T>(T)
  href: api/ComplicatedPrimitives.TestAbstractions.Customizations.Generic.GenericParameterMock.html#ComplicatedPrimitives_TestAbstractions_Customizations_Generic_GenericParameterMock_UseValue__1___0_
  commentId: M:ComplicatedPrimitives.TestAbstractions.Customizations.Generic.GenericParameterMock.UseValue``1(``0)
  name.vb: UseValue(Of T)(T)
  fullName: ComplicatedPrimitives.TestAbstractions.Customizations.Generic.GenericParameterMock.UseValue<T>(T)
  fullName.vb: ComplicatedPrimitives.TestAbstractions.Customizations.Generic.GenericParameterMock.UseValue(Of T)(T)
  nameWithType: GenericParameterMock.UseValue<T>(T)
  nameWithType.vb: GenericParameterMock.UseValue(Of T)(T)
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions
  name: FixtureExtensions
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html
  commentId: T:ComplicatedPrimitives.TestAbstractions.FixtureExtensions
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions
  nameWithType: FixtureExtensions
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateBetween(AutoFixture.IFixture,System.Int32,System.Int32)
  name: CreateBetween(IFixture, Int32, Int32)
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CreateBetween_AutoFixture_IFixture_System_Int32_System_Int32_
  commentId: M:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateBetween(AutoFixture.IFixture,System.Int32,System.Int32)
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateBetween(AutoFixture.IFixture, System.Int32, System.Int32)
  nameWithType: FixtureExtensions.CreateBetween(IFixture, Int32, Int32)
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateBetween*
  name: CreateBetween
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CreateBetween_
  commentId: Overload:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateBetween
  isSpec: "True"
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateBetween
  nameWithType: FixtureExtensions.CreateBetween
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateEnum*
  name: CreateEnum
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CreateEnum_
  commentId: Overload:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateEnum
  isSpec: "True"
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateEnum
  nameWithType: FixtureExtensions.CreateEnum
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateEnum``1(AutoFixture.IFixture,``0[])
  name: CreateEnum<TEnum>(IFixture, TEnum[])
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CreateEnum__1_AutoFixture_IFixture___0___
  commentId: M:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateEnum``1(AutoFixture.IFixture,``0[])
  name.vb: CreateEnum(Of TEnum)(IFixture, TEnum())
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateEnum<TEnum>(AutoFixture.IFixture, TEnum[])
  fullName.vb: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateEnum(Of TEnum)(AutoFixture.IFixture, TEnum())
  nameWithType: FixtureExtensions.CreateEnum<TEnum>(IFixture, TEnum[])
  nameWithType.vb: FixtureExtensions.CreateEnum(Of TEnum)(IFixture, TEnum())
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateFromSet*
  name: CreateFromSet
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CreateFromSet_
  commentId: Overload:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateFromSet
  isSpec: "True"
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateFromSet
  nameWithType: FixtureExtensions.CreateFromSet
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateFromSet``1(AutoFixture.IFixture,System.Collections.Generic.IEnumerable{``0})
  name: CreateFromSet<TValue>(IFixture, IEnumerable<TValue>)
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CreateFromSet__1_AutoFixture_IFixture_System_Collections_Generic_IEnumerable___0__
  commentId: M:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateFromSet``1(AutoFixture.IFixture,System.Collections.Generic.IEnumerable{``0})
  name.vb: CreateFromSet(Of TValue)(IFixture, IEnumerable(Of TValue))
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateFromSet<TValue>(AutoFixture.IFixture, System.Collections.Generic.IEnumerable<TValue>)
  fullName.vb: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateFromSet(Of TValue)(AutoFixture.IFixture, System.Collections.Generic.IEnumerable(Of TValue))
  nameWithType: FixtureExtensions.CreateFromSet<TValue>(IFixture, IEnumerable<TValue>)
  nameWithType.vb: FixtureExtensions.CreateFromSet(Of TValue)(IFixture, IEnumerable(Of TValue))
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateGreaterThan(AutoFixture.IFixture,System.Decimal)
  name: CreateGreaterThan(IFixture, Decimal)
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CreateGreaterThan_AutoFixture_IFixture_System_Decimal_
  commentId: M:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateGreaterThan(AutoFixture.IFixture,System.Decimal)
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateGreaterThan(AutoFixture.IFixture, System.Decimal)
  nameWithType: FixtureExtensions.CreateGreaterThan(IFixture, Decimal)
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateGreaterThan(AutoFixture.IFixture,System.Double)
  name: CreateGreaterThan(IFixture, Double)
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CreateGreaterThan_AutoFixture_IFixture_System_Double_
  commentId: M:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateGreaterThan(AutoFixture.IFixture,System.Double)
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateGreaterThan(AutoFixture.IFixture, System.Double)
  nameWithType: FixtureExtensions.CreateGreaterThan(IFixture, Double)
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateGreaterThan(AutoFixture.IFixture,System.Int32)
  name: CreateGreaterThan(IFixture, Int32)
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CreateGreaterThan_AutoFixture_IFixture_System_Int32_
  commentId: M:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateGreaterThan(AutoFixture.IFixture,System.Int32)
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateGreaterThan(AutoFixture.IFixture, System.Int32)
  nameWithType: FixtureExtensions.CreateGreaterThan(IFixture, Int32)
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateGreaterThan*
  name: CreateGreaterThan
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CreateGreaterThan_
  commentId: Overload:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateGreaterThan
  isSpec: "True"
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateGreaterThan
  nameWithType: FixtureExtensions.CreateGreaterThan
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateGreaterThanOrEqual(AutoFixture.IFixture,System.Decimal)
  name: CreateGreaterThanOrEqual(IFixture, Decimal)
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CreateGreaterThanOrEqual_AutoFixture_IFixture_System_Decimal_
  commentId: M:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateGreaterThanOrEqual(AutoFixture.IFixture,System.Decimal)
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateGreaterThanOrEqual(AutoFixture.IFixture, System.Decimal)
  nameWithType: FixtureExtensions.CreateGreaterThanOrEqual(IFixture, Decimal)
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateGreaterThanOrEqual(AutoFixture.IFixture,System.Double)
  name: CreateGreaterThanOrEqual(IFixture, Double)
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CreateGreaterThanOrEqual_AutoFixture_IFixture_System_Double_
  commentId: M:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateGreaterThanOrEqual(AutoFixture.IFixture,System.Double)
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateGreaterThanOrEqual(AutoFixture.IFixture, System.Double)
  nameWithType: FixtureExtensions.CreateGreaterThanOrEqual(IFixture, Double)
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateGreaterThanOrEqual(AutoFixture.IFixture,System.Int32)
  name: CreateGreaterThanOrEqual(IFixture, Int32)
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CreateGreaterThanOrEqual_AutoFixture_IFixture_System_Int32_
  commentId: M:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateGreaterThanOrEqual(AutoFixture.IFixture,System.Int32)
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateGreaterThanOrEqual(AutoFixture.IFixture, System.Int32)
  nameWithType: FixtureExtensions.CreateGreaterThanOrEqual(IFixture, Int32)
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateGreaterThanOrEqual*
  name: CreateGreaterThanOrEqual
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CreateGreaterThanOrEqual_
  commentId: Overload:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateGreaterThanOrEqual
  isSpec: "True"
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateGreaterThanOrEqual
  nameWithType: FixtureExtensions.CreateGreaterThanOrEqual
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateInRange(AutoFixture.IFixture,System.Decimal,System.Decimal)
  name: CreateInRange(IFixture, Decimal, Decimal)
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CreateInRange_AutoFixture_IFixture_System_Decimal_System_Decimal_
  commentId: M:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateInRange(AutoFixture.IFixture,System.Decimal,System.Decimal)
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateInRange(AutoFixture.IFixture, System.Decimal, System.Decimal)
  nameWithType: FixtureExtensions.CreateInRange(IFixture, Decimal, Decimal)
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateInRange(AutoFixture.IFixture,System.Double,System.Double)
  name: CreateInRange(IFixture, Double, Double)
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CreateInRange_AutoFixture_IFixture_System_Double_System_Double_
  commentId: M:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateInRange(AutoFixture.IFixture,System.Double,System.Double)
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateInRange(AutoFixture.IFixture, System.Double, System.Double)
  nameWithType: FixtureExtensions.CreateInRange(IFixture, Double, Double)
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateInRange(AutoFixture.IFixture,System.Int32,System.Int32)
  name: CreateInRange(IFixture, Int32, Int32)
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CreateInRange_AutoFixture_IFixture_System_Int32_System_Int32_
  commentId: M:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateInRange(AutoFixture.IFixture,System.Int32,System.Int32)
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateInRange(AutoFixture.IFixture, System.Int32, System.Int32)
  nameWithType: FixtureExtensions.CreateInRange(IFixture, Int32, Int32)
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateInRange*
  name: CreateInRange
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CreateInRange_
  commentId: Overload:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateInRange
  isSpec: "True"
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateInRange
  nameWithType: FixtureExtensions.CreateInRange
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateLeftSet*
  name: CreateLeftSet
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CreateLeftSet_
  commentId: Overload:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateLeftSet
  isSpec: "True"
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateLeftSet
  nameWithType: FixtureExtensions.CreateLeftSet
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateLeftSet``1(AutoFixture.IFixture,System.Collections.Generic.IEnumerable{``0})
  name: CreateLeftSet<TValue>(IFixture, IEnumerable<TValue>)
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CreateLeftSet__1_AutoFixture_IFixture_System_Collections_Generic_IEnumerable___0__
  commentId: M:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateLeftSet``1(AutoFixture.IFixture,System.Collections.Generic.IEnumerable{``0})
  name.vb: CreateLeftSet(Of TValue)(IFixture, IEnumerable(Of TValue))
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateLeftSet<TValue>(AutoFixture.IFixture, System.Collections.Generic.IEnumerable<TValue>)
  fullName.vb: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateLeftSet(Of TValue)(AutoFixture.IFixture, System.Collections.Generic.IEnumerable(Of TValue))
  nameWithType: FixtureExtensions.CreateLeftSet<TValue>(IFixture, IEnumerable<TValue>)
  nameWithType.vb: FixtureExtensions.CreateLeftSet(Of TValue)(IFixture, IEnumerable(Of TValue))
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateLowerThan(AutoFixture.IFixture,System.Decimal)
  name: CreateLowerThan(IFixture, Decimal)
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CreateLowerThan_AutoFixture_IFixture_System_Decimal_
  commentId: M:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateLowerThan(AutoFixture.IFixture,System.Decimal)
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateLowerThan(AutoFixture.IFixture, System.Decimal)
  nameWithType: FixtureExtensions.CreateLowerThan(IFixture, Decimal)
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateLowerThan(AutoFixture.IFixture,System.Double)
  name: CreateLowerThan(IFixture, Double)
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CreateLowerThan_AutoFixture_IFixture_System_Double_
  commentId: M:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateLowerThan(AutoFixture.IFixture,System.Double)
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateLowerThan(AutoFixture.IFixture, System.Double)
  nameWithType: FixtureExtensions.CreateLowerThan(IFixture, Double)
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateLowerThan(AutoFixture.IFixture,System.Int32)
  name: CreateLowerThan(IFixture, Int32)
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CreateLowerThan_AutoFixture_IFixture_System_Int32_
  commentId: M:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateLowerThan(AutoFixture.IFixture,System.Int32)
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateLowerThan(AutoFixture.IFixture, System.Int32)
  nameWithType: FixtureExtensions.CreateLowerThan(IFixture, Int32)
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateLowerThan*
  name: CreateLowerThan
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CreateLowerThan_
  commentId: Overload:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateLowerThan
  isSpec: "True"
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateLowerThan
  nameWithType: FixtureExtensions.CreateLowerThan
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateLowerThanOrEqual(AutoFixture.IFixture,System.Int32)
  name: CreateLowerThanOrEqual(IFixture, Int32)
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CreateLowerThanOrEqual_AutoFixture_IFixture_System_Int32_
  commentId: M:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateLowerThanOrEqual(AutoFixture.IFixture,System.Int32)
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateLowerThanOrEqual(AutoFixture.IFixture, System.Int32)
  nameWithType: FixtureExtensions.CreateLowerThanOrEqual(IFixture, Int32)
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateLowerThanOrEqual*
  name: CreateLowerThanOrEqual
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CreateLowerThanOrEqual_
  commentId: Overload:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateLowerThanOrEqual
  isSpec: "True"
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateLowerThanOrEqual
  nameWithType: FixtureExtensions.CreateLowerThanOrEqual
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateOtherThan(AutoFixture.IFixture,System.Int32)
  name: CreateOtherThan(IFixture, Int32)
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CreateOtherThan_AutoFixture_IFixture_System_Int32_
  commentId: M:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateOtherThan(AutoFixture.IFixture,System.Int32)
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateOtherThan(AutoFixture.IFixture, System.Int32)
  nameWithType: FixtureExtensions.CreateOtherThan(IFixture, Int32)
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateOtherThan*
  name: CreateOtherThan
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CreateOtherThan_
  commentId: Overload:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateOtherThan
  isSpec: "True"
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CreateOtherThan
  nameWithType: FixtureExtensions.CreateOtherThan
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CustomizeAsOpenGeneric(AutoFixture.IFixture,System.Type,System.Type)
  name: CustomizeAsOpenGeneric(IFixture, Type, Type)
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CustomizeAsOpenGeneric_AutoFixture_IFixture_System_Type_System_Type_
  commentId: M:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CustomizeAsOpenGeneric(AutoFixture.IFixture,System.Type,System.Type)
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CustomizeAsOpenGeneric(AutoFixture.IFixture, System.Type, System.Type)
  nameWithType: FixtureExtensions.CustomizeAsOpenGeneric(IFixture, Type, Type)
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CustomizeAsOpenGeneric*
  name: CustomizeAsOpenGeneric
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CustomizeAsOpenGeneric_
  commentId: Overload:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CustomizeAsOpenGeneric
  isSpec: "True"
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CustomizeAsOpenGeneric
  nameWithType: FixtureExtensions.CustomizeAsOpenGeneric
- uid: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CustomizeAsOpenGeneric``1(AutoFixture.IFixture,System.Linq.Expressions.Expression{System.Func{ComplicatedPrimitives.TestAbstractions.Customizations.Generic.GenericParameterMock,AutoFixture.Kernel.ISpecimenContext,``0}})
  name: CustomizeAsOpenGeneric<T>(IFixture, Expression<Func<GenericParameterMock, ISpecimenContext, T>>)
  href: api/ComplicatedPrimitives.TestAbstractions.FixtureExtensions.html#ComplicatedPrimitives_TestAbstractions_FixtureExtensions_CustomizeAsOpenGeneric__1_AutoFixture_IFixture_System_Linq_Expressions_Expression_System_Func_ComplicatedPrimitives_TestAbstractions_Customizations_Generic_GenericParameterMock_AutoFixture_Kernel_ISpecimenContext___0___
  commentId: M:ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CustomizeAsOpenGeneric``1(AutoFixture.IFixture,System.Linq.Expressions.Expression{System.Func{ComplicatedPrimitives.TestAbstractions.Customizations.Generic.GenericParameterMock,AutoFixture.Kernel.ISpecimenContext,``0}})
  name.vb: CustomizeAsOpenGeneric(Of T)(IFixture, Expression(Of Func(Of GenericParameterMock, ISpecimenContext, T)))
  fullName: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CustomizeAsOpenGeneric<T>(AutoFixture.IFixture, System.Linq.Expressions.Expression<System.Func<ComplicatedPrimitives.TestAbstractions.Customizations.Generic.GenericParameterMock, AutoFixture.Kernel.ISpecimenContext, T>>)
  fullName.vb: ComplicatedPrimitives.TestAbstractions.FixtureExtensions.CustomizeAsOpenGeneric(Of T)(AutoFixture.IFixture, System.Linq.Expressions.Expression(Of System.Func(Of ComplicatedPrimitives.TestAbstractions.Customizations.Generic.GenericParameterMock, AutoFixture.Kernel.ISpecimenContext, T)))
  nameWithType: FixtureExtensions.CustomizeAsOpenGeneric<T>(IFixture, Expression<Func<GenericParameterMock, ISpecimenContext, T>>)
  nameWithType.vb: FixtureExtensions.CustomizeAsOpenGeneric(Of T)(IFixture, Expression(Of Func(Of GenericParameterMock, ISpecimenContext, T)))
- uid: ComplicatedPrimitives.TestAbstractions.ITestDataProvider
  name: ITestDataProvider
  href: api/ComplicatedPrimitives.TestAbstractions.ITestDataProvider.html
  commentId: T:ComplicatedPrimitives.TestAbstractions.ITestDataProvider
  fullName: ComplicatedPrimitives.TestAbstractions.ITestDataProvider
  nameWithType: ITestDataProvider
- uid: ComplicatedPrimitives.TestAbstractions.ITestDataProvider.GetTestParameters
  name: GetTestParameters()
  href: api/ComplicatedPrimitives.TestAbstractions.ITestDataProvider.html#ComplicatedPrimitives_TestAbstractions_ITestDataProvider_GetTestParameters
  commentId: M:ComplicatedPrimitives.TestAbstractions.ITestDataProvider.GetTestParameters
  fullName: ComplicatedPrimitives.TestAbstractions.ITestDataProvider.GetTestParameters()
  nameWithType: ITestDataProvider.GetTestParameters()
- uid: ComplicatedPrimitives.TestAbstractions.ITestDataProvider.GetTestParameters*
  name: GetTestParameters
  href: api/ComplicatedPrimitives.TestAbstractions.ITestDataProvider.html#ComplicatedPrimitives_TestAbstractions_ITestDataProvider_GetTestParameters_
  commentId: Overload:ComplicatedPrimitives.TestAbstractions.ITestDataProvider.GetTestParameters
  isSpec: "True"
  fullName: ComplicatedPrimitives.TestAbstractions.ITestDataProvider.GetTestParameters
  nameWithType: ITestDataProvider.GetTestParameters
- uid: ComplicatedPrimitives.TestAbstractions.RequirementAttribute
  name: RequirementAttribute
  href: api/ComplicatedPrimitives.TestAbstractions.RequirementAttribute.html
  commentId: T:ComplicatedPrimitives.TestAbstractions.RequirementAttribute
  fullName: ComplicatedPrimitives.TestAbstractions.RequirementAttribute
  nameWithType: RequirementAttribute
- uid: ComplicatedPrimitives.TestAbstractions.SpecimenContextExtensions
  name: SpecimenContextExtensions
  href: api/ComplicatedPrimitives.TestAbstractions.SpecimenContextExtensions.html
  commentId: T:ComplicatedPrimitives.TestAbstractions.SpecimenContextExtensions
  fullName: ComplicatedPrimitives.TestAbstractions.SpecimenContextExtensions
  nameWithType: SpecimenContextExtensions
- uid: ComplicatedPrimitives.TestAbstractions.SpecimenContextExtensions.CreateEnum*
  name: CreateEnum
  href: api/ComplicatedPrimitives.TestAbstractions.SpecimenContextExtensions.html#ComplicatedPrimitives_TestAbstractions_SpecimenContextExtensions_CreateEnum_
  commentId: Overload:ComplicatedPrimitives.TestAbstractions.SpecimenContextExtensions.CreateEnum
  isSpec: "True"
  fullName: ComplicatedPrimitives.TestAbstractions.SpecimenContextExtensions.CreateEnum
  nameWithType: SpecimenContextExtensions.CreateEnum
- uid: ComplicatedPrimitives.TestAbstractions.SpecimenContextExtensions.CreateEnum``1(AutoFixture.Kernel.ISpecimenContext,``0[])
  name: CreateEnum<TEnum>(ISpecimenContext, TEnum[])
  href: api/ComplicatedPrimitives.TestAbstractions.SpecimenContextExtensions.html#ComplicatedPrimitives_TestAbstractions_SpecimenContextExtensions_CreateEnum__1_AutoFixture_Kernel_ISpecimenContext___0___
  commentId: M:ComplicatedPrimitives.TestAbstractions.SpecimenContextExtensions.CreateEnum``1(AutoFixture.Kernel.ISpecimenContext,``0[])
  name.vb: CreateEnum(Of TEnum)(ISpecimenContext, TEnum())
  fullName: ComplicatedPrimitives.TestAbstractions.SpecimenContextExtensions.CreateEnum<TEnum>(AutoFixture.Kernel.ISpecimenContext, TEnum[])
  fullName.vb: ComplicatedPrimitives.TestAbstractions.SpecimenContextExtensions.CreateEnum(Of TEnum)(AutoFixture.Kernel.ISpecimenContext, TEnum())
  nameWithType: SpecimenContextExtensions.CreateEnum<TEnum>(ISpecimenContext, TEnum[])
  nameWithType.vb: SpecimenContextExtensions.CreateEnum(Of TEnum)(ISpecimenContext, TEnum())
- uid: ComplicatedPrimitives.TestAbstractions.SpecimenContextExtensions.CreateFromSet*
  name: CreateFromSet
  href: api/ComplicatedPrimitives.TestAbstractions.SpecimenContextExtensions.html#ComplicatedPrimitives_TestAbstractions_SpecimenContextExtensions_CreateFromSet_
  commentId: Overload:ComplicatedPrimitives.TestAbstractions.SpecimenContextExtensions.CreateFromSet
  isSpec: "True"
  fullName: ComplicatedPrimitives.TestAbstractions.SpecimenContextExtensions.CreateFromSet
  nameWithType: SpecimenContextExtensions.CreateFromSet
- uid: ComplicatedPrimitives.TestAbstractions.SpecimenContextExtensions.CreateFromSet``1(AutoFixture.Kernel.ISpecimenContext,System.Collections.Generic.IEnumerable{``0})
  name: CreateFromSet<TValue>(ISpecimenContext, IEnumerable<TValue>)
  href: api/ComplicatedPrimitives.TestAbstractions.SpecimenContextExtensions.html#ComplicatedPrimitives_TestAbstractions_SpecimenContextExtensions_CreateFromSet__1_AutoFixture_Kernel_ISpecimenContext_System_Collections_Generic_IEnumerable___0__
  commentId: M:ComplicatedPrimitives.TestAbstractions.SpecimenContextExtensions.CreateFromSet``1(AutoFixture.Kernel.ISpecimenContext,System.Collections.Generic.IEnumerable{``0})
  name.vb: CreateFromSet(Of TValue)(ISpecimenContext, IEnumerable(Of TValue))
  fullName: ComplicatedPrimitives.TestAbstractions.SpecimenContextExtensions.CreateFromSet<TValue>(AutoFixture.Kernel.ISpecimenContext, System.Collections.Generic.IEnumerable<TValue>)
  fullName.vb: ComplicatedPrimitives.TestAbstractions.SpecimenContextExtensions.CreateFromSet(Of TValue)(AutoFixture.Kernel.ISpecimenContext, System.Collections.Generic.IEnumerable(Of TValue))
  nameWithType: SpecimenContextExtensions.CreateFromSet<TValue>(ISpecimenContext, IEnumerable<TValue>)
  nameWithType.vb: SpecimenContextExtensions.CreateFromSet(Of TValue)(ISpecimenContext, IEnumerable(Of TValue))
- uid: ComplicatedPrimitives.TestAbstractions.TestFixture
  name: TestFixture
  href: api/ComplicatedPrimitives.TestAbstractions.TestFixture.html
  commentId: T:ComplicatedPrimitives.TestAbstractions.TestFixture
  fullName: ComplicatedPrimitives.TestAbstractions.TestFixture
  nameWithType: TestFixture
- uid: ComplicatedPrimitives.TestAbstractions.TestFixture.#ctor
  name: TestFixture()
  href: api/ComplicatedPrimitives.TestAbstractions.TestFixture.html#ComplicatedPrimitives_TestAbstractions_TestFixture__ctor
  commentId: M:ComplicatedPrimitives.TestAbstractions.TestFixture.#ctor
  fullName: ComplicatedPrimitives.TestAbstractions.TestFixture.TestFixture()
  nameWithType: TestFixture.TestFixture()
- uid: ComplicatedPrimitives.TestAbstractions.TestFixture.#ctor*
  name: TestFixture
  href: api/ComplicatedPrimitives.TestAbstractions.TestFixture.html#ComplicatedPrimitives_TestAbstractions_TestFixture__ctor_
  commentId: Overload:ComplicatedPrimitives.TestAbstractions.TestFixture.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.TestAbstractions.TestFixture.TestFixture
  nameWithType: TestFixture.TestFixture
- uid: ComplicatedPrimitives.TestAbstractions.TestFixture.Dispose
  name: Dispose()
  href: api/ComplicatedPrimitives.TestAbstractions.TestFixture.html#ComplicatedPrimitives_TestAbstractions_TestFixture_Dispose
  commentId: M:ComplicatedPrimitives.TestAbstractions.TestFixture.Dispose
  fullName: ComplicatedPrimitives.TestAbstractions.TestFixture.Dispose()
  nameWithType: TestFixture.Dispose()
- uid: ComplicatedPrimitives.TestAbstractions.TestFixture.Dispose(System.Boolean)
  name: Dispose(Boolean)
  href: api/ComplicatedPrimitives.TestAbstractions.TestFixture.html#ComplicatedPrimitives_TestAbstractions_TestFixture_Dispose_System_Boolean_
  commentId: M:ComplicatedPrimitives.TestAbstractions.TestFixture.Dispose(System.Boolean)
  fullName: ComplicatedPrimitives.TestAbstractions.TestFixture.Dispose(System.Boolean)
  nameWithType: TestFixture.Dispose(Boolean)
- uid: ComplicatedPrimitives.TestAbstractions.TestFixture.Dispose*
  name: Dispose
  href: api/ComplicatedPrimitives.TestAbstractions.TestFixture.html#ComplicatedPrimitives_TestAbstractions_TestFixture_Dispose_
  commentId: Overload:ComplicatedPrimitives.TestAbstractions.TestFixture.Dispose
  isSpec: "True"
  fullName: ComplicatedPrimitives.TestAbstractions.TestFixture.Dispose
  nameWithType: TestFixture.Dispose
- uid: ComplicatedPrimitives.TestAbstractions.TestFixture.Fixture
  name: Fixture
  href: api/ComplicatedPrimitives.TestAbstractions.TestFixture.html#ComplicatedPrimitives_TestAbstractions_TestFixture_Fixture
  commentId: P:ComplicatedPrimitives.TestAbstractions.TestFixture.Fixture
  fullName: ComplicatedPrimitives.TestAbstractions.TestFixture.Fixture
  nameWithType: TestFixture.Fixture
- uid: ComplicatedPrimitives.TestAbstractions.TestFixture.Fixture*
  name: Fixture
  href: api/ComplicatedPrimitives.TestAbstractions.TestFixture.html#ComplicatedPrimitives_TestAbstractions_TestFixture_Fixture_
  commentId: Overload:ComplicatedPrimitives.TestAbstractions.TestFixture.Fixture
  isSpec: "True"
  fullName: ComplicatedPrimitives.TestAbstractions.TestFixture.Fixture
  nameWithType: TestFixture.Fixture
- uid: ComplicatedPrimitives.TestAbstractions.TestsBase
  name: TestsBase
  href: api/ComplicatedPrimitives.TestAbstractions.TestsBase.html
  commentId: T:ComplicatedPrimitives.TestAbstractions.TestsBase
  fullName: ComplicatedPrimitives.TestAbstractions.TestsBase
  nameWithType: TestsBase
- uid: ComplicatedPrimitives.TestAbstractions.TestsBase.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: TestsBase(TestFixture)
  href: api/ComplicatedPrimitives.TestAbstractions.TestsBase.html#ComplicatedPrimitives_TestAbstractions_TestsBase__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.TestAbstractions.TestsBase.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.TestAbstractions.TestsBase.TestsBase(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: TestsBase.TestsBase(TestFixture)
- uid: ComplicatedPrimitives.TestAbstractions.TestsBase.#ctor*
  name: TestsBase
  href: api/ComplicatedPrimitives.TestAbstractions.TestsBase.html#ComplicatedPrimitives_TestAbstractions_TestsBase__ctor_
  commentId: Overload:ComplicatedPrimitives.TestAbstractions.TestsBase.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.TestAbstractions.TestsBase.TestsBase
  nameWithType: TestsBase.TestsBase
- uid: ComplicatedPrimitives.TestAbstractions.TestsBase.Fixture
  name: Fixture
  href: api/ComplicatedPrimitives.TestAbstractions.TestsBase.html#ComplicatedPrimitives_TestAbstractions_TestsBase_Fixture
  commentId: P:ComplicatedPrimitives.TestAbstractions.TestsBase.Fixture
  fullName: ComplicatedPrimitives.TestAbstractions.TestsBase.Fixture
  nameWithType: TestsBase.Fixture
- uid: ComplicatedPrimitives.TestAbstractions.TestsBase.Fixture*
  name: Fixture
  href: api/ComplicatedPrimitives.TestAbstractions.TestsBase.html#ComplicatedPrimitives_TestAbstractions_TestsBase_Fixture_
  commentId: Overload:ComplicatedPrimitives.TestAbstractions.TestsBase.Fixture
  isSpec: "True"
  fullName: ComplicatedPrimitives.TestAbstractions.TestsBase.Fixture
  nameWithType: TestsBase.Fixture
- uid: ComplicatedPrimitives.TestAbstractions.TestsBase.GetTestData(System.Type,System.String)
  name: GetTestData(Type, String)
  href: api/ComplicatedPrimitives.TestAbstractions.TestsBase.html#ComplicatedPrimitives_TestAbstractions_TestsBase_GetTestData_System_Type_System_String_
  commentId: M:ComplicatedPrimitives.TestAbstractions.TestsBase.GetTestData(System.Type,System.String)
  fullName: ComplicatedPrimitives.TestAbstractions.TestsBase.GetTestData(System.Type, System.String)
  nameWithType: TestsBase.GetTestData(Type, String)
- uid: ComplicatedPrimitives.TestAbstractions.TestsBase.GetTestData*
  name: GetTestData
  href: api/ComplicatedPrimitives.TestAbstractions.TestsBase.html#ComplicatedPrimitives_TestAbstractions_TestsBase_GetTestData_
  commentId: Overload:ComplicatedPrimitives.TestAbstractions.TestsBase.GetTestData
  isSpec: "True"
  fullName: ComplicatedPrimitives.TestAbstractions.TestsBase.GetTestData
  nameWithType: TestsBase.GetTestData
- uid: ComplicatedPrimitives.Tests
  name: ComplicatedPrimitives.Tests
  href: api/ComplicatedPrimitives.Tests.html
  commentId: N:ComplicatedPrimitives.Tests
  fullName: ComplicatedPrimitives.Tests
  nameWithType: ComplicatedPrimitives.Tests
- uid: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests
  name: CaseInsensitiveStringTests
  href: api/ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.html
  commentId: T:ComplicatedPrimitives.Tests.CaseInsensitiveStringTests
  fullName: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests
  nameWithType: CaseInsensitiveStringTests
- uid: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: CaseInsensitiveStringTests(TestFixture)
  href: api/ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.html#ComplicatedPrimitives_Tests_CaseInsensitiveStringTests__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.CaseInsensitiveStringTests(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: CaseInsensitiveStringTests.CaseInsensitiveStringTests(TestFixture)
- uid: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.#ctor*
  name: CaseInsensitiveStringTests
  href: api/ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.html#ComplicatedPrimitives_Tests_CaseInsensitiveStringTests__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.CaseInsensitiveStringTests
  nameWithType: CaseInsensitiveStringTests.CaseInsensitiveStringTests
- uid: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators
  name: CaseInsensitiveStringTests.Operators
  href: api/ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.html
  commentId: T:ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators
  fullName: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators
  nameWithType: CaseInsensitiveStringTests.Operators
- uid: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: Operators(TestFixture)
  href: api/ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.html#ComplicatedPrimitives_Tests_CaseInsensitiveStringTests_Operators__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.Operators(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: CaseInsensitiveStringTests.Operators.Operators(TestFixture)
- uid: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.#ctor*
  name: Operators
  href: api/ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.html#ComplicatedPrimitives_Tests_CaseInsensitiveStringTests_Operators__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.Operators
  nameWithType: CaseInsensitiveStringTests.Operators.Operators
- uid: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.ConversionToString
  name: CaseInsensitiveStringTests.Operators.ConversionToString
  href: api/ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.ConversionToString.html
  commentId: T:ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.ConversionToString
  fullName: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.ConversionToString
  nameWithType: CaseInsensitiveStringTests.Operators.ConversionToString
- uid: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.ConversionToString.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: ConversionToString(TestFixture)
  href: api/ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.ConversionToString.html#ComplicatedPrimitives_Tests_CaseInsensitiveStringTests_Operators_ConversionToString__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.ConversionToString.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.ConversionToString.ConversionToString(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: CaseInsensitiveStringTests.Operators.ConversionToString.ConversionToString(TestFixture)
- uid: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.ConversionToString.#ctor*
  name: ConversionToString
  href: api/ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.ConversionToString.html#ComplicatedPrimitives_Tests_CaseInsensitiveStringTests_Operators_ConversionToString__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.ConversionToString.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.ConversionToString.ConversionToString
  nameWithType: CaseInsensitiveStringTests.Operators.ConversionToString.ConversionToString
- uid: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.ConversionToString.ShouldReturnOriginalValue(System.String)
  name: ShouldReturnOriginalValue(String)
  href: api/ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.ConversionToString.html#ComplicatedPrimitives_Tests_CaseInsensitiveStringTests_Operators_ConversionToString_ShouldReturnOriginalValue_System_String_
  commentId: M:ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.ConversionToString.ShouldReturnOriginalValue(System.String)
  fullName: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.ConversionToString.ShouldReturnOriginalValue(System.String)
  nameWithType: CaseInsensitiveStringTests.Operators.ConversionToString.ShouldReturnOriginalValue(String)
- uid: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.ConversionToString.ShouldReturnOriginalValue*
  name: ShouldReturnOriginalValue
  href: api/ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.ConversionToString.html#ComplicatedPrimitives_Tests_CaseInsensitiveStringTests_Operators_ConversionToString_ShouldReturnOriginalValue_
  commentId: Overload:ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.ConversionToString.ShouldReturnOriginalValue
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.ConversionToString.ShouldReturnOriginalValue
  nameWithType: CaseInsensitiveStringTests.Operators.ConversionToString.ShouldReturnOriginalValue
- uid: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.Equality
  name: CaseInsensitiveStringTests.Operators.Equality
  href: api/ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.Equality.html
  commentId: T:ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.Equality
  fullName: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.Equality
  nameWithType: CaseInsensitiveStringTests.Operators.Equality
- uid: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.Equality.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: Equality(TestFixture)
  href: api/ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.Equality.html#ComplicatedPrimitives_Tests_CaseInsensitiveStringTests_Operators_Equality__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.Equality.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.Equality.Equality(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: CaseInsensitiveStringTests.Operators.Equality.Equality(TestFixture)
- uid: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.Equality.#ctor*
  name: Equality
  href: api/ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.Equality.html#ComplicatedPrimitives_Tests_CaseInsensitiveStringTests_Operators_Equality__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.Equality.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.Equality.Equality
  nameWithType: CaseInsensitiveStringTests.Operators.Equality.Equality
- uid: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.Equality.ShouldIgnoreCharacterCase(System.String)
  name: ShouldIgnoreCharacterCase(String)
  href: api/ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.Equality.html#ComplicatedPrimitives_Tests_CaseInsensitiveStringTests_Operators_Equality_ShouldIgnoreCharacterCase_System_String_
  commentId: M:ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.Equality.ShouldIgnoreCharacterCase(System.String)
  fullName: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.Equality.ShouldIgnoreCharacterCase(System.String)
  nameWithType: CaseInsensitiveStringTests.Operators.Equality.ShouldIgnoreCharacterCase(String)
- uid: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.Equality.ShouldIgnoreCharacterCase*
  name: ShouldIgnoreCharacterCase
  href: api/ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.Equality.html#ComplicatedPrimitives_Tests_CaseInsensitiveStringTests_Operators_Equality_ShouldIgnoreCharacterCase_
  commentId: Overload:ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.Equality.ShouldIgnoreCharacterCase
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.CaseInsensitiveStringTests.Operators.Equality.ShouldIgnoreCharacterCase
  nameWithType: CaseInsensitiveStringTests.Operators.Equality.ShouldIgnoreCharacterCase
- uid: ComplicatedPrimitives.Tests.DirectedLimitExtensions
  name: DirectedLimitExtensions
  href: api/ComplicatedPrimitives.Tests.DirectedLimitExtensions.html
  commentId: T:ComplicatedPrimitives.Tests.DirectedLimitExtensions
  fullName: ComplicatedPrimitives.Tests.DirectedLimitExtensions
  nameWithType: DirectedLimitExtensions
- uid: ComplicatedPrimitives.Tests.DirectedLimitExtensions.FlipLimitType*
  name: FlipLimitType
  href: api/ComplicatedPrimitives.Tests.DirectedLimitExtensions.html#ComplicatedPrimitives_Tests_DirectedLimitExtensions_FlipLimitType_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitExtensions.FlipLimitType
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitExtensions.FlipLimitType
  nameWithType: DirectedLimitExtensions.FlipLimitType
- uid: ComplicatedPrimitives.Tests.DirectedLimitExtensions.FlipLimitType``1(ComplicatedPrimitives.DirectedLimit{``0})
  name: FlipLimitType<T>(DirectedLimit<T>)
  href: api/ComplicatedPrimitives.Tests.DirectedLimitExtensions.html#ComplicatedPrimitives_Tests_DirectedLimitExtensions_FlipLimitType__1_ComplicatedPrimitives_DirectedLimit___0__
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitExtensions.FlipLimitType``1(ComplicatedPrimitives.DirectedLimit{``0})
  name.vb: FlipLimitType(Of T)(DirectedLimit(Of T))
  fullName: ComplicatedPrimitives.Tests.DirectedLimitExtensions.FlipLimitType<T>(ComplicatedPrimitives.DirectedLimit<T>)
  fullName.vb: ComplicatedPrimitives.Tests.DirectedLimitExtensions.FlipLimitType(Of T)(ComplicatedPrimitives.DirectedLimit(Of T))
  nameWithType: DirectedLimitExtensions.FlipLimitType<T>(DirectedLimit<T>)
  nameWithType.vb: DirectedLimitExtensions.FlipLimitType(Of T)(DirectedLimit(Of T))
- uid: ComplicatedPrimitives.Tests.DirectedLimitExtensions.With*
  name: With
  href: api/ComplicatedPrimitives.Tests.DirectedLimitExtensions.html#ComplicatedPrimitives_Tests_DirectedLimitExtensions_With_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitExtensions.With
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitExtensions.With
  nameWithType: DirectedLimitExtensions.With
- uid: ComplicatedPrimitives.Tests.DirectedLimitExtensions.With``1(ComplicatedPrimitives.DirectedLimit{``0},System.Nullable{``0},System.Nullable{ComplicatedPrimitives.LimitPointType},System.Nullable{ComplicatedPrimitives.LimitSide})
  name: With<T>(DirectedLimit<T>, Nullable<T>, Nullable<LimitPointType>, Nullable<LimitSide>)
  href: api/ComplicatedPrimitives.Tests.DirectedLimitExtensions.html#ComplicatedPrimitives_Tests_DirectedLimitExtensions_With__1_ComplicatedPrimitives_DirectedLimit___0__System_Nullable___0__System_Nullable_ComplicatedPrimitives_LimitPointType__System_Nullable_ComplicatedPrimitives_LimitSide__
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitExtensions.With``1(ComplicatedPrimitives.DirectedLimit{``0},System.Nullable{``0},System.Nullable{ComplicatedPrimitives.LimitPointType},System.Nullable{ComplicatedPrimitives.LimitSide})
  name.vb: With(Of T)(DirectedLimit(Of T), Nullable(Of T), Nullable(Of LimitPointType), Nullable(Of LimitSide))
  fullName: ComplicatedPrimitives.Tests.DirectedLimitExtensions.With<T>(ComplicatedPrimitives.DirectedLimit<T>, System.Nullable<T>, System.Nullable<ComplicatedPrimitives.LimitPointType>, System.Nullable<ComplicatedPrimitives.LimitSide>)
  fullName.vb: ComplicatedPrimitives.Tests.DirectedLimitExtensions.With(Of T)(ComplicatedPrimitives.DirectedLimit(Of T), System.Nullable(Of T), System.Nullable(Of ComplicatedPrimitives.LimitPointType), System.Nullable(Of ComplicatedPrimitives.LimitSide))
  nameWithType: DirectedLimitExtensions.With<T>(DirectedLimit<T>, Nullable<T>, Nullable<LimitPointType>, Nullable<LimitSide>)
  nameWithType.vb: DirectedLimitExtensions.With(Of T)(DirectedLimit(Of T), Nullable(Of T), Nullable(Of LimitPointType), Nullable(Of LimitSide))
- uid: ComplicatedPrimitives.Tests.DirectedLimitFactory`1
  name: DirectedLimitFactory<T>
  href: api/ComplicatedPrimitives.Tests.DirectedLimitFactory-1.html
  commentId: T:ComplicatedPrimitives.Tests.DirectedLimitFactory`1
  name.vb: DirectedLimitFactory(Of T)
  fullName: ComplicatedPrimitives.Tests.DirectedLimitFactory<T>
  fullName.vb: ComplicatedPrimitives.Tests.DirectedLimitFactory(Of T)
  nameWithType: DirectedLimitFactory<T>
  nameWithType.vb: DirectedLimitFactory(Of T)
- uid: ComplicatedPrimitives.Tests.DirectedLimitFactory`1.Create(AutoFixture.Kernel.ISpecimenContext)
  name: Create(ISpecimenContext)
  href: api/ComplicatedPrimitives.Tests.DirectedLimitFactory-1.html#ComplicatedPrimitives_Tests_DirectedLimitFactory_1_Create_AutoFixture_Kernel_ISpecimenContext_
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitFactory`1.Create(AutoFixture.Kernel.ISpecimenContext)
  fullName: ComplicatedPrimitives.Tests.DirectedLimitFactory<T>.Create(AutoFixture.Kernel.ISpecimenContext)
  fullName.vb: ComplicatedPrimitives.Tests.DirectedLimitFactory(Of T).Create(AutoFixture.Kernel.ISpecimenContext)
  nameWithType: DirectedLimitFactory<T>.Create(ISpecimenContext)
  nameWithType.vb: DirectedLimitFactory(Of T).Create(ISpecimenContext)
- uid: ComplicatedPrimitives.Tests.DirectedLimitFactory`1.Create*
  name: Create
  href: api/ComplicatedPrimitives.Tests.DirectedLimitFactory-1.html#ComplicatedPrimitives_Tests_DirectedLimitFactory_1_Create_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitFactory`1.Create
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitFactory<T>.Create
  fullName.vb: ComplicatedPrimitives.Tests.DirectedLimitFactory(Of T).Create
  nameWithType: DirectedLimitFactory<T>.Create
  nameWithType.vb: DirectedLimitFactory(Of T).Create
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests
  name: DirectedLimitTests
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.html
  commentId: T:ComplicatedPrimitives.Tests.DirectedLimitTests
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests
  nameWithType: DirectedLimitTests
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: DirectedLimitTests(TestFixture)
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.html#ComplicatedPrimitives_Tests_DirectedLimitTests__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitTests.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.DirectedLimitTests(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: DirectedLimitTests.DirectedLimitTests(TestFixture)
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.#ctor*
  name: DirectedLimitTests
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.html#ComplicatedPrimitives_Tests_DirectedLimitTests__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitTests.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.DirectedLimitTests
  nameWithType: DirectedLimitTests.DirectedLimitTests
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.Create*
  name: Create
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.html#ComplicatedPrimitives_Tests_DirectedLimitTests_Create_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitTests.Create
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.Create
  nameWithType: DirectedLimitTests.Create
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.Create``1(System.Nullable{``0},System.Nullable{ComplicatedPrimitives.LimitPointType},System.Nullable{ComplicatedPrimitives.LimitSide})
  name: Create<T>(Nullable<T>, Nullable<LimitPointType>, Nullable<LimitSide>)
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.html#ComplicatedPrimitives_Tests_DirectedLimitTests_Create__1_System_Nullable___0__System_Nullable_ComplicatedPrimitives_LimitPointType__System_Nullable_ComplicatedPrimitives_LimitSide__
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitTests.Create``1(System.Nullable{``0},System.Nullable{ComplicatedPrimitives.LimitPointType},System.Nullable{ComplicatedPrimitives.LimitSide})
  name.vb: Create(Of T)(Nullable(Of T), Nullable(Of LimitPointType), Nullable(Of LimitSide))
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.Create<T>(System.Nullable<T>, System.Nullable<ComplicatedPrimitives.LimitPointType>, System.Nullable<ComplicatedPrimitives.LimitSide>)
  fullName.vb: ComplicatedPrimitives.Tests.DirectedLimitTests.Create(Of T)(System.Nullable(Of T), System.Nullable(Of ComplicatedPrimitives.LimitPointType), System.Nullable(Of ComplicatedPrimitives.LimitSide))
  nameWithType: DirectedLimitTests.Create<T>(Nullable<T>, Nullable<LimitPointType>, Nullable<LimitSide>)
  nameWithType.vb: DirectedLimitTests.Create(Of T)(Nullable(Of T), Nullable(Of LimitPointType), Nullable(Of LimitSide))
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.GetComplement
  name: DirectedLimitTests.GetComplement
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.GetComplement.html
  commentId: T:ComplicatedPrimitives.Tests.DirectedLimitTests.GetComplement
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.GetComplement
  nameWithType: DirectedLimitTests.GetComplement
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.GetComplement.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: GetComplement(TestFixture)
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.GetComplement.html#ComplicatedPrimitives_Tests_DirectedLimitTests_GetComplement__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitTests.GetComplement.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.GetComplement.GetComplement(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: DirectedLimitTests.GetComplement.GetComplement(TestFixture)
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.GetComplement.#ctor*
  name: GetComplement
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.GetComplement.html#ComplicatedPrimitives_Tests_DirectedLimitTests_GetComplement__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitTests.GetComplement.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.GetComplement.GetComplement
  nameWithType: DirectedLimitTests.GetComplement.GetComplement
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.GetComplement.ShouldReturnExpectedResult
  name: ShouldReturnExpectedResult()
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.GetComplement.html#ComplicatedPrimitives_Tests_DirectedLimitTests_GetComplement_ShouldReturnExpectedResult
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitTests.GetComplement.ShouldReturnExpectedResult
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.GetComplement.ShouldReturnExpectedResult()
  nameWithType: DirectedLimitTests.GetComplement.ShouldReturnExpectedResult()
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.GetComplement.ShouldReturnExpectedResult*
  name: ShouldReturnExpectedResult
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.GetComplement.html#ComplicatedPrimitives_Tests_DirectedLimitTests_GetComplement_ShouldReturnExpectedResult_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitTests.GetComplement.ShouldReturnExpectedResult
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.GetComplement.ShouldReturnExpectedResult
  nameWithType: DirectedLimitTests.GetComplement.ShouldReturnExpectedResult
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.Intersects
  name: DirectedLimitTests.Intersects
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.Intersects.html
  commentId: T:ComplicatedPrimitives.Tests.DirectedLimitTests.Intersects
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.Intersects
  nameWithType: DirectedLimitTests.Intersects
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.Intersects.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: Intersects(TestFixture)
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.Intersects.html#ComplicatedPrimitives_Tests_DirectedLimitTests_Intersects__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitTests.Intersects.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.Intersects.Intersects(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: DirectedLimitTests.Intersects.Intersects(TestFixture)
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.Intersects.#ctor*
  name: Intersects
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.Intersects.html#ComplicatedPrimitives_Tests_DirectedLimitTests_Intersects__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitTests.Intersects.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.Intersects.Intersects
  nameWithType: DirectedLimitTests.Intersects.Intersects
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.Intersects.SameSide_ShouldReturnTrue
  name: SameSide_ShouldReturnTrue()
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.Intersects.html#ComplicatedPrimitives_Tests_DirectedLimitTests_Intersects_SameSide_ShouldReturnTrue
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitTests.Intersects.SameSide_ShouldReturnTrue
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.Intersects.SameSide_ShouldReturnTrue()
  nameWithType: DirectedLimitTests.Intersects.SameSide_ShouldReturnTrue()
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.Intersects.SameSide_ShouldReturnTrue*
  name: SameSide_ShouldReturnTrue
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.Intersects.html#ComplicatedPrimitives_Tests_DirectedLimitTests_Intersects_SameSide_ShouldReturnTrue_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitTests.Intersects.SameSide_ShouldReturnTrue
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.Intersects.SameSide_ShouldReturnTrue
  nameWithType: DirectedLimitTests.Intersects.SameSide_ShouldReturnTrue
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.Intersects.ShouldReturnExpectedResult(ComplicatedPrimitives.LimitPointType,System.Int32,System.Int32,ComplicatedPrimitives.LimitPointType,System.Boolean)
  name: ShouldReturnExpectedResult(LimitPointType, Int32, Int32, LimitPointType, Boolean)
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.Intersects.html#ComplicatedPrimitives_Tests_DirectedLimitTests_Intersects_ShouldReturnExpectedResult_ComplicatedPrimitives_LimitPointType_System_Int32_System_Int32_ComplicatedPrimitives_LimitPointType_System_Boolean_
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitTests.Intersects.ShouldReturnExpectedResult(ComplicatedPrimitives.LimitPointType,System.Int32,System.Int32,ComplicatedPrimitives.LimitPointType,System.Boolean)
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.Intersects.ShouldReturnExpectedResult(ComplicatedPrimitives.LimitPointType, System.Int32, System.Int32, ComplicatedPrimitives.LimitPointType, System.Boolean)
  nameWithType: DirectedLimitTests.Intersects.ShouldReturnExpectedResult(LimitPointType, Int32, Int32, LimitPointType, Boolean)
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.Intersects.ShouldReturnExpectedResult*
  name: ShouldReturnExpectedResult
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.Intersects.html#ComplicatedPrimitives_Tests_DirectedLimitTests_Intersects_ShouldReturnExpectedResult_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitTests.Intersects.ShouldReturnExpectedResult
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.Intersects.ShouldReturnExpectedResult
  nameWithType: DirectedLimitTests.Intersects.ShouldReturnExpectedResult
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf
  name: DirectedLimitTests.IsProperSubsetOf
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.html
  commentId: T:ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf
  nameWithType: DirectedLimitTests.IsProperSubsetOf
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: IsProperSubsetOf(TestFixture)
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsProperSubsetOf__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.IsProperSubsetOf(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: DirectedLimitTests.IsProperSubsetOf.IsProperSubsetOf(TestFixture)
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.#ctor*
  name: IsProperSubsetOf
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsProperSubsetOf__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.IsProperSubsetOf
  nameWithType: DirectedLimitTests.IsProperSubsetOf.IsProperSubsetOf
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.DifferentSide_ShouldReturnFalse
  name: DifferentSide_ShouldReturnFalse()
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsProperSubsetOf_DifferentSide_ShouldReturnFalse
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.DifferentSide_ShouldReturnFalse
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.DifferentSide_ShouldReturnFalse()
  nameWithType: DirectedLimitTests.IsProperSubsetOf.DifferentSide_ShouldReturnFalse()
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.DifferentSide_ShouldReturnFalse*
  name: DifferentSide_ShouldReturnFalse
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsProperSubsetOf_DifferentSide_ShouldReturnFalse_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.DifferentSide_ShouldReturnFalse
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.DifferentSide_ShouldReturnFalse
  nameWithType: DirectedLimitTests.IsProperSubsetOf.DifferentSide_ShouldReturnFalse
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult(ComplicatedPrimitives.LimitPointType,ComplicatedPrimitives.LimitPointType,System.Boolean)
  name: PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult(LimitPointType, LimitPointType, Boolean)
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsProperSubsetOf_PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult_ComplicatedPrimitives_LimitPointType_ComplicatedPrimitives_LimitPointType_System_Boolean_
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult(ComplicatedPrimitives.LimitPointType,ComplicatedPrimitives.LimitPointType,System.Boolean)
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult(ComplicatedPrimitives.LimitPointType, ComplicatedPrimitives.LimitPointType, System.Boolean)
  nameWithType: DirectedLimitTests.IsProperSubsetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult(LimitPointType, LimitPointType, Boolean)
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult*
  name: PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsProperSubsetOf_PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult
  nameWithType: DirectedLimitTests.IsProperSubsetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult(System.Int32,System.Int32,ComplicatedPrimitives.LimitSide,System.Boolean)
  name: PointValueChanging_CeterisParibus_ShouldReturnExpectedResult(Int32, Int32, LimitSide, Boolean)
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsProperSubsetOf_PointValueChanging_CeterisParibus_ShouldReturnExpectedResult_System_Int32_System_Int32_ComplicatedPrimitives_LimitSide_System_Boolean_
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult(System.Int32,System.Int32,ComplicatedPrimitives.LimitSide,System.Boolean)
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult(System.Int32, System.Int32, ComplicatedPrimitives.LimitSide, System.Boolean)
  nameWithType: DirectedLimitTests.IsProperSubsetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult(Int32, Int32, LimitSide, Boolean)
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult*
  name: PointValueChanging_CeterisParibus_ShouldReturnExpectedResult
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsProperSubsetOf_PointValueChanging_CeterisParibus_ShouldReturnExpectedResult_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSubsetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult
  nameWithType: DirectedLimitTests.IsProperSubsetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf
  name: DirectedLimitTests.IsProperSupersetOf
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.html
  commentId: T:ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf
  nameWithType: DirectedLimitTests.IsProperSupersetOf
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: IsProperSupersetOf(TestFixture)
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsProperSupersetOf__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.IsProperSupersetOf(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: DirectedLimitTests.IsProperSupersetOf.IsProperSupersetOf(TestFixture)
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.#ctor*
  name: IsProperSupersetOf
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsProperSupersetOf__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.IsProperSupersetOf
  nameWithType: DirectedLimitTests.IsProperSupersetOf.IsProperSupersetOf
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.DifferentSide_ShouldReturnFalse
  name: DifferentSide_ShouldReturnFalse()
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsProperSupersetOf_DifferentSide_ShouldReturnFalse
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.DifferentSide_ShouldReturnFalse
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.DifferentSide_ShouldReturnFalse()
  nameWithType: DirectedLimitTests.IsProperSupersetOf.DifferentSide_ShouldReturnFalse()
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.DifferentSide_ShouldReturnFalse*
  name: DifferentSide_ShouldReturnFalse
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsProperSupersetOf_DifferentSide_ShouldReturnFalse_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.DifferentSide_ShouldReturnFalse
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.DifferentSide_ShouldReturnFalse
  nameWithType: DirectedLimitTests.IsProperSupersetOf.DifferentSide_ShouldReturnFalse
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult(ComplicatedPrimitives.LimitPointType,ComplicatedPrimitives.LimitPointType,System.Boolean)
  name: PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult(LimitPointType, LimitPointType, Boolean)
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsProperSupersetOf_PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult_ComplicatedPrimitives_LimitPointType_ComplicatedPrimitives_LimitPointType_System_Boolean_
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult(ComplicatedPrimitives.LimitPointType,ComplicatedPrimitives.LimitPointType,System.Boolean)
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult(ComplicatedPrimitives.LimitPointType, ComplicatedPrimitives.LimitPointType, System.Boolean)
  nameWithType: DirectedLimitTests.IsProperSupersetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult(LimitPointType, LimitPointType, Boolean)
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult*
  name: PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsProperSupersetOf_PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult
  nameWithType: DirectedLimitTests.IsProperSupersetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult(System.Int32,System.Int32,ComplicatedPrimitives.LimitSide,System.Boolean)
  name: PointValueChanging_CeterisParibus_ShouldReturnExpectedResult(Int32, Int32, LimitSide, Boolean)
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsProperSupersetOf_PointValueChanging_CeterisParibus_ShouldReturnExpectedResult_System_Int32_System_Int32_ComplicatedPrimitives_LimitSide_System_Boolean_
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult(System.Int32,System.Int32,ComplicatedPrimitives.LimitSide,System.Boolean)
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult(System.Int32, System.Int32, ComplicatedPrimitives.LimitSide, System.Boolean)
  nameWithType: DirectedLimitTests.IsProperSupersetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult(Int32, Int32, LimitSide, Boolean)
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult*
  name: PointValueChanging_CeterisParibus_ShouldReturnExpectedResult
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsProperSupersetOf_PointValueChanging_CeterisParibus_ShouldReturnExpectedResult_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsProperSupersetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult
  nameWithType: DirectedLimitTests.IsProperSupersetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf
  name: DirectedLimitTests.IsSubsetOf
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.html
  commentId: T:ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf
  nameWithType: DirectedLimitTests.IsSubsetOf
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: IsSubsetOf(TestFixture)
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsSubsetOf__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.IsSubsetOf(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: DirectedLimitTests.IsSubsetOf.IsSubsetOf(TestFixture)
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.#ctor*
  name: IsSubsetOf
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsSubsetOf__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.IsSubsetOf
  nameWithType: DirectedLimitTests.IsSubsetOf.IsSubsetOf
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.DifferentSide_ShouldReturnFalse
  name: DifferentSide_ShouldReturnFalse()
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsSubsetOf_DifferentSide_ShouldReturnFalse
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.DifferentSide_ShouldReturnFalse
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.DifferentSide_ShouldReturnFalse()
  nameWithType: DirectedLimitTests.IsSubsetOf.DifferentSide_ShouldReturnFalse()
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.DifferentSide_ShouldReturnFalse*
  name: DifferentSide_ShouldReturnFalse
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsSubsetOf_DifferentSide_ShouldReturnFalse_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.DifferentSide_ShouldReturnFalse
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.DifferentSide_ShouldReturnFalse
  nameWithType: DirectedLimitTests.IsSubsetOf.DifferentSide_ShouldReturnFalse
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult(ComplicatedPrimitives.LimitPointType,ComplicatedPrimitives.LimitPointType,System.Boolean)
  name: PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult(LimitPointType, LimitPointType, Boolean)
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsSubsetOf_PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult_ComplicatedPrimitives_LimitPointType_ComplicatedPrimitives_LimitPointType_System_Boolean_
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult(ComplicatedPrimitives.LimitPointType,ComplicatedPrimitives.LimitPointType,System.Boolean)
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult(ComplicatedPrimitives.LimitPointType, ComplicatedPrimitives.LimitPointType, System.Boolean)
  nameWithType: DirectedLimitTests.IsSubsetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult(LimitPointType, LimitPointType, Boolean)
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult*
  name: PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsSubsetOf_PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult
  nameWithType: DirectedLimitTests.IsSubsetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult(System.Int32,System.Int32,ComplicatedPrimitives.LimitSide,System.Boolean)
  name: PointValueChanging_CeterisParibus_ShouldReturnExpectedResult(Int32, Int32, LimitSide, Boolean)
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsSubsetOf_PointValueChanging_CeterisParibus_ShouldReturnExpectedResult_System_Int32_System_Int32_ComplicatedPrimitives_LimitSide_System_Boolean_
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult(System.Int32,System.Int32,ComplicatedPrimitives.LimitSide,System.Boolean)
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult(System.Int32, System.Int32, ComplicatedPrimitives.LimitSide, System.Boolean)
  nameWithType: DirectedLimitTests.IsSubsetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult(Int32, Int32, LimitSide, Boolean)
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult*
  name: PointValueChanging_CeterisParibus_ShouldReturnExpectedResult
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsSubsetOf_PointValueChanging_CeterisParibus_ShouldReturnExpectedResult_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSubsetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult
  nameWithType: DirectedLimitTests.IsSubsetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf
  name: DirectedLimitTests.IsSupersetOf
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.html
  commentId: T:ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf
  nameWithType: DirectedLimitTests.IsSupersetOf
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: IsSupersetOf(TestFixture)
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsSupersetOf__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.IsSupersetOf(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: DirectedLimitTests.IsSupersetOf.IsSupersetOf(TestFixture)
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.#ctor*
  name: IsSupersetOf
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsSupersetOf__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.IsSupersetOf
  nameWithType: DirectedLimitTests.IsSupersetOf.IsSupersetOf
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.DifferentSide_ShouldReturnFalse
  name: DifferentSide_ShouldReturnFalse()
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsSupersetOf_DifferentSide_ShouldReturnFalse
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.DifferentSide_ShouldReturnFalse
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.DifferentSide_ShouldReturnFalse()
  nameWithType: DirectedLimitTests.IsSupersetOf.DifferentSide_ShouldReturnFalse()
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.DifferentSide_ShouldReturnFalse*
  name: DifferentSide_ShouldReturnFalse
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsSupersetOf_DifferentSide_ShouldReturnFalse_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.DifferentSide_ShouldReturnFalse
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.DifferentSide_ShouldReturnFalse
  nameWithType: DirectedLimitTests.IsSupersetOf.DifferentSide_ShouldReturnFalse
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult(ComplicatedPrimitives.LimitPointType,ComplicatedPrimitives.LimitPointType,System.Boolean)
  name: PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult(LimitPointType, LimitPointType, Boolean)
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsSupersetOf_PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult_ComplicatedPrimitives_LimitPointType_ComplicatedPrimitives_LimitPointType_System_Boolean_
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult(ComplicatedPrimitives.LimitPointType,ComplicatedPrimitives.LimitPointType,System.Boolean)
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult(ComplicatedPrimitives.LimitPointType, ComplicatedPrimitives.LimitPointType, System.Boolean)
  nameWithType: DirectedLimitTests.IsSupersetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult(LimitPointType, LimitPointType, Boolean)
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult*
  name: PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsSupersetOf_PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult
  nameWithType: DirectedLimitTests.IsSupersetOf.PointTypeChanging_CeterisParibus_ShouldReturnExpectedResult
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult(System.Int32,System.Int32,ComplicatedPrimitives.LimitSide,System.Boolean)
  name: PointValueChanging_CeterisParibus_ShouldReturnExpectedResult(Int32, Int32, LimitSide, Boolean)
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsSupersetOf_PointValueChanging_CeterisParibus_ShouldReturnExpectedResult_System_Int32_System_Int32_ComplicatedPrimitives_LimitSide_System_Boolean_
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult(System.Int32,System.Int32,ComplicatedPrimitives.LimitSide,System.Boolean)
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult(System.Int32, System.Int32, ComplicatedPrimitives.LimitSide, System.Boolean)
  nameWithType: DirectedLimitTests.IsSupersetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult(Int32, Int32, LimitSide, Boolean)
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult*
  name: PointValueChanging_CeterisParibus_ShouldReturnExpectedResult
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.html#ComplicatedPrimitives_Tests_DirectedLimitTests_IsSupersetOf_PointValueChanging_CeterisParibus_ShouldReturnExpectedResult_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.IsSupersetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult
  nameWithType: DirectedLimitTests.IsSupersetOf.PointValueChanging_CeterisParibus_ShouldReturnExpectedResult
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.Map
  name: DirectedLimitTests.Map
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.Map.html
  commentId: T:ComplicatedPrimitives.Tests.DirectedLimitTests.Map
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.Map
  nameWithType: DirectedLimitTests.Map
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.Map.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: Map(TestFixture)
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.Map.html#ComplicatedPrimitives_Tests_DirectedLimitTests_Map__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitTests.Map.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.Map.Map(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: DirectedLimitTests.Map.Map(TestFixture)
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.Map.#ctor*
  name: Map
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.Map.html#ComplicatedPrimitives_Tests_DirectedLimitTests_Map__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitTests.Map.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.Map.Map
  nameWithType: DirectedLimitTests.Map.Map
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.Map.LeftInfinity_ShouldReturnLeftInfinity
  name: LeftInfinity_ShouldReturnLeftInfinity()
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.Map.html#ComplicatedPrimitives_Tests_DirectedLimitTests_Map_LeftInfinity_ShouldReturnLeftInfinity
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitTests.Map.LeftInfinity_ShouldReturnLeftInfinity
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.Map.LeftInfinity_ShouldReturnLeftInfinity()
  nameWithType: DirectedLimitTests.Map.LeftInfinity_ShouldReturnLeftInfinity()
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.Map.LeftInfinity_ShouldReturnLeftInfinity*
  name: LeftInfinity_ShouldReturnLeftInfinity
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.Map.html#ComplicatedPrimitives_Tests_DirectedLimitTests_Map_LeftInfinity_ShouldReturnLeftInfinity_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitTests.Map.LeftInfinity_ShouldReturnLeftInfinity
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.Map.LeftInfinity_ShouldReturnLeftInfinity
  nameWithType: DirectedLimitTests.Map.LeftInfinity_ShouldReturnLeftInfinity
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.Map.RightInfinity_ShouldReturnRightInfinity
  name: RightInfinity_ShouldReturnRightInfinity()
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.Map.html#ComplicatedPrimitives_Tests_DirectedLimitTests_Map_RightInfinity_ShouldReturnRightInfinity
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitTests.Map.RightInfinity_ShouldReturnRightInfinity
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.Map.RightInfinity_ShouldReturnRightInfinity()
  nameWithType: DirectedLimitTests.Map.RightInfinity_ShouldReturnRightInfinity()
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.Map.RightInfinity_ShouldReturnRightInfinity*
  name: RightInfinity_ShouldReturnRightInfinity
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.Map.html#ComplicatedPrimitives_Tests_DirectedLimitTests_Map_RightInfinity_ShouldReturnRightInfinity_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitTests.Map.RightInfinity_ShouldReturnRightInfinity
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.Map.RightInfinity_ShouldReturnRightInfinity
  nameWithType: DirectedLimitTests.Map.RightInfinity_ShouldReturnRightInfinity
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.Map.ShouldMapValue(ComplicatedPrimitives.LimitSide,ComplicatedPrimitives.LimitPointType)
  name: ShouldMapValue(LimitSide, LimitPointType)
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.Map.html#ComplicatedPrimitives_Tests_DirectedLimitTests_Map_ShouldMapValue_ComplicatedPrimitives_LimitSide_ComplicatedPrimitives_LimitPointType_
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitTests.Map.ShouldMapValue(ComplicatedPrimitives.LimitSide,ComplicatedPrimitives.LimitPointType)
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.Map.ShouldMapValue(ComplicatedPrimitives.LimitSide, ComplicatedPrimitives.LimitPointType)
  nameWithType: DirectedLimitTests.Map.ShouldMapValue(LimitSide, LimitPointType)
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.Map.ShouldMapValue*
  name: ShouldMapValue
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.Map.html#ComplicatedPrimitives_Tests_DirectedLimitTests_Map_ShouldMapValue_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitTests.Map.ShouldMapValue
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.Map.ShouldMapValue
  nameWithType: DirectedLimitTests.Map.ShouldMapValue
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.Map.Undefined_ShouldReturnUndefined
  name: Undefined_ShouldReturnUndefined()
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.Map.html#ComplicatedPrimitives_Tests_DirectedLimitTests_Map_Undefined_ShouldReturnUndefined
  commentId: M:ComplicatedPrimitives.Tests.DirectedLimitTests.Map.Undefined_ShouldReturnUndefined
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.Map.Undefined_ShouldReturnUndefined()
  nameWithType: DirectedLimitTests.Map.Undefined_ShouldReturnUndefined()
- uid: ComplicatedPrimitives.Tests.DirectedLimitTests.Map.Undefined_ShouldReturnUndefined*
  name: Undefined_ShouldReturnUndefined
  href: api/ComplicatedPrimitives.Tests.DirectedLimitTests.Map.html#ComplicatedPrimitives_Tests_DirectedLimitTests_Map_Undefined_ShouldReturnUndefined_
  commentId: Overload:ComplicatedPrimitives.Tests.DirectedLimitTests.Map.Undefined_ShouldReturnUndefined
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.DirectedLimitTests.Map.Undefined_ShouldReturnUndefined
  nameWithType: DirectedLimitTests.Map.Undefined_ShouldReturnUndefined
- uid: ComplicatedPrimitives.Tests.FixtureExtensions
  name: FixtureExtensions
  href: api/ComplicatedPrimitives.Tests.FixtureExtensions.html
  commentId: T:ComplicatedPrimitives.Tests.FixtureExtensions
  fullName: ComplicatedPrimitives.Tests.FixtureExtensions
  nameWithType: FixtureExtensions
- uid: ComplicatedPrimitives.Tests.FixtureExtensions.CreateGreaterThan(AutoFixture.IFixture,ComplicatedPrimitives.DirectedLimit{System.Int32})
  name: CreateGreaterThan(IFixture, DirectedLimit<Int32>)
  href: api/ComplicatedPrimitives.Tests.FixtureExtensions.html#ComplicatedPrimitives_Tests_FixtureExtensions_CreateGreaterThan_AutoFixture_IFixture_ComplicatedPrimitives_DirectedLimit_System_Int32__
  commentId: M:ComplicatedPrimitives.Tests.FixtureExtensions.CreateGreaterThan(AutoFixture.IFixture,ComplicatedPrimitives.DirectedLimit{System.Int32})
  name.vb: CreateGreaterThan(IFixture, DirectedLimit(Of Int32))
  fullName: ComplicatedPrimitives.Tests.FixtureExtensions.CreateGreaterThan(AutoFixture.IFixture, ComplicatedPrimitives.DirectedLimit<System.Int32>)
  fullName.vb: ComplicatedPrimitives.Tests.FixtureExtensions.CreateGreaterThan(AutoFixture.IFixture, ComplicatedPrimitives.DirectedLimit(Of System.Int32))
  nameWithType: FixtureExtensions.CreateGreaterThan(IFixture, DirectedLimit<Int32>)
  nameWithType.vb: FixtureExtensions.CreateGreaterThan(IFixture, DirectedLimit(Of Int32))
- uid: ComplicatedPrimitives.Tests.FixtureExtensions.CreateGreaterThan*
  name: CreateGreaterThan
  href: api/ComplicatedPrimitives.Tests.FixtureExtensions.html#ComplicatedPrimitives_Tests_FixtureExtensions_CreateGreaterThan_
  commentId: Overload:ComplicatedPrimitives.Tests.FixtureExtensions.CreateGreaterThan
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.FixtureExtensions.CreateGreaterThan
  nameWithType: FixtureExtensions.CreateGreaterThan
- uid: ComplicatedPrimitives.Tests.FixtureExtensions.CreateLowerThan(AutoFixture.IFixture,ComplicatedPrimitives.DirectedLimit{System.Int32})
  name: CreateLowerThan(IFixture, DirectedLimit<Int32>)
  href: api/ComplicatedPrimitives.Tests.FixtureExtensions.html#ComplicatedPrimitives_Tests_FixtureExtensions_CreateLowerThan_AutoFixture_IFixture_ComplicatedPrimitives_DirectedLimit_System_Int32__
  commentId: M:ComplicatedPrimitives.Tests.FixtureExtensions.CreateLowerThan(AutoFixture.IFixture,ComplicatedPrimitives.DirectedLimit{System.Int32})
  name.vb: CreateLowerThan(IFixture, DirectedLimit(Of Int32))
  fullName: ComplicatedPrimitives.Tests.FixtureExtensions.CreateLowerThan(AutoFixture.IFixture, ComplicatedPrimitives.DirectedLimit<System.Int32>)
  fullName.vb: ComplicatedPrimitives.Tests.FixtureExtensions.CreateLowerThan(AutoFixture.IFixture, ComplicatedPrimitives.DirectedLimit(Of System.Int32))
  nameWithType: FixtureExtensions.CreateLowerThan(IFixture, DirectedLimit<Int32>)
  nameWithType.vb: FixtureExtensions.CreateLowerThan(IFixture, DirectedLimit(Of Int32))
- uid: ComplicatedPrimitives.Tests.FixtureExtensions.CreateLowerThan*
  name: CreateLowerThan
  href: api/ComplicatedPrimitives.Tests.FixtureExtensions.html#ComplicatedPrimitives_Tests_FixtureExtensions_CreateLowerThan_
  commentId: Overload:ComplicatedPrimitives.Tests.FixtureExtensions.CreateLowerThan
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.FixtureExtensions.CreateLowerThan
  nameWithType: FixtureExtensions.CreateLowerThan
- uid: ComplicatedPrimitives.Tests.FixtureExtensions.CreateRange*
  name: CreateRange
  href: api/ComplicatedPrimitives.Tests.FixtureExtensions.html#ComplicatedPrimitives_Tests_FixtureExtensions_CreateRange_
  commentId: Overload:ComplicatedPrimitives.Tests.FixtureExtensions.CreateRange
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.FixtureExtensions.CreateRange
  nameWithType: FixtureExtensions.CreateRange
- uid: ComplicatedPrimitives.Tests.FixtureExtensions.CreateRange``1(AutoFixture.IFixture,System.Nullable{ComplicatedPrimitives.LimitPointType},System.Nullable{ComplicatedPrimitives.LimitPointType})
  name: CreateRange<T>(IFixture, Nullable<LimitPointType>, Nullable<LimitPointType>)
  href: api/ComplicatedPrimitives.Tests.FixtureExtensions.html#ComplicatedPrimitives_Tests_FixtureExtensions_CreateRange__1_AutoFixture_IFixture_System_Nullable_ComplicatedPrimitives_LimitPointType__System_Nullable_ComplicatedPrimitives_LimitPointType__
  commentId: M:ComplicatedPrimitives.Tests.FixtureExtensions.CreateRange``1(AutoFixture.IFixture,System.Nullable{ComplicatedPrimitives.LimitPointType},System.Nullable{ComplicatedPrimitives.LimitPointType})
  name.vb: CreateRange(Of T)(IFixture, Nullable(Of LimitPointType), Nullable(Of LimitPointType))
  fullName: ComplicatedPrimitives.Tests.FixtureExtensions.CreateRange<T>(AutoFixture.IFixture, System.Nullable<ComplicatedPrimitives.LimitPointType>, System.Nullable<ComplicatedPrimitives.LimitPointType>)
  fullName.vb: ComplicatedPrimitives.Tests.FixtureExtensions.CreateRange(Of T)(AutoFixture.IFixture, System.Nullable(Of ComplicatedPrimitives.LimitPointType), System.Nullable(Of ComplicatedPrimitives.LimitPointType))
  nameWithType: FixtureExtensions.CreateRange<T>(IFixture, Nullable<LimitPointType>, Nullable<LimitPointType>)
  nameWithType.vb: FixtureExtensions.CreateRange(Of T)(IFixture, Nullable(Of LimitPointType), Nullable(Of LimitPointType))
- uid: ComplicatedPrimitives.Tests.FixtureExtensions.CustomizeCaseInsensitiveString(AutoFixture.IFixture)
  name: CustomizeCaseInsensitiveString(IFixture)
  href: api/ComplicatedPrimitives.Tests.FixtureExtensions.html#ComplicatedPrimitives_Tests_FixtureExtensions_CustomizeCaseInsensitiveString_AutoFixture_IFixture_
  commentId: M:ComplicatedPrimitives.Tests.FixtureExtensions.CustomizeCaseInsensitiveString(AutoFixture.IFixture)
  fullName: ComplicatedPrimitives.Tests.FixtureExtensions.CustomizeCaseInsensitiveString(AutoFixture.IFixture)
  nameWithType: FixtureExtensions.CustomizeCaseInsensitiveString(IFixture)
- uid: ComplicatedPrimitives.Tests.FixtureExtensions.CustomizeCaseInsensitiveString*
  name: CustomizeCaseInsensitiveString
  href: api/ComplicatedPrimitives.Tests.FixtureExtensions.html#ComplicatedPrimitives_Tests_FixtureExtensions_CustomizeCaseInsensitiveString_
  commentId: Overload:ComplicatedPrimitives.Tests.FixtureExtensions.CustomizeCaseInsensitiveString
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.FixtureExtensions.CustomizeCaseInsensitiveString
  nameWithType: FixtureExtensions.CustomizeCaseInsensitiveString
- uid: ComplicatedPrimitives.Tests.FixtureExtensions.CustomizeDirectedLimit(AutoFixture.IFixture)
  name: CustomizeDirectedLimit(IFixture)
  href: api/ComplicatedPrimitives.Tests.FixtureExtensions.html#ComplicatedPrimitives_Tests_FixtureExtensions_CustomizeDirectedLimit_AutoFixture_IFixture_
  commentId: M:ComplicatedPrimitives.Tests.FixtureExtensions.CustomizeDirectedLimit(AutoFixture.IFixture)
  fullName: ComplicatedPrimitives.Tests.FixtureExtensions.CustomizeDirectedLimit(AutoFixture.IFixture)
  nameWithType: FixtureExtensions.CustomizeDirectedLimit(IFixture)
- uid: ComplicatedPrimitives.Tests.FixtureExtensions.CustomizeDirectedLimit*
  name: CustomizeDirectedLimit
  href: api/ComplicatedPrimitives.Tests.FixtureExtensions.html#ComplicatedPrimitives_Tests_FixtureExtensions_CustomizeDirectedLimit_
  commentId: Overload:ComplicatedPrimitives.Tests.FixtureExtensions.CustomizeDirectedLimit
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.FixtureExtensions.CustomizeDirectedLimit
  nameWithType: FixtureExtensions.CustomizeDirectedLimit
- uid: ComplicatedPrimitives.Tests.FixtureExtensions.CustomizeLimitPoint(AutoFixture.IFixture)
  name: CustomizeLimitPoint(IFixture)
  href: api/ComplicatedPrimitives.Tests.FixtureExtensions.html#ComplicatedPrimitives_Tests_FixtureExtensions_CustomizeLimitPoint_AutoFixture_IFixture_
  commentId: M:ComplicatedPrimitives.Tests.FixtureExtensions.CustomizeLimitPoint(AutoFixture.IFixture)
  fullName: ComplicatedPrimitives.Tests.FixtureExtensions.CustomizeLimitPoint(AutoFixture.IFixture)
  nameWithType: FixtureExtensions.CustomizeLimitPoint(IFixture)
- uid: ComplicatedPrimitives.Tests.FixtureExtensions.CustomizeLimitPoint*
  name: CustomizeLimitPoint
  href: api/ComplicatedPrimitives.Tests.FixtureExtensions.html#ComplicatedPrimitives_Tests_FixtureExtensions_CustomizeLimitPoint_
  commentId: Overload:ComplicatedPrimitives.Tests.FixtureExtensions.CustomizeLimitPoint
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.FixtureExtensions.CustomizeLimitPoint
  nameWithType: FixtureExtensions.CustomizeLimitPoint
- uid: ComplicatedPrimitives.Tests.FixtureExtensions.CustomizeRange(AutoFixture.IFixture)
  name: CustomizeRange(IFixture)
  href: api/ComplicatedPrimitives.Tests.FixtureExtensions.html#ComplicatedPrimitives_Tests_FixtureExtensions_CustomizeRange_AutoFixture_IFixture_
  commentId: M:ComplicatedPrimitives.Tests.FixtureExtensions.CustomizeRange(AutoFixture.IFixture)
  fullName: ComplicatedPrimitives.Tests.FixtureExtensions.CustomizeRange(AutoFixture.IFixture)
  nameWithType: FixtureExtensions.CustomizeRange(IFixture)
- uid: ComplicatedPrimitives.Tests.FixtureExtensions.CustomizeRange*
  name: CustomizeRange
  href: api/ComplicatedPrimitives.Tests.FixtureExtensions.html#ComplicatedPrimitives_Tests_FixtureExtensions_CustomizeRange_
  commentId: Overload:ComplicatedPrimitives.Tests.FixtureExtensions.CustomizeRange
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.FixtureExtensions.CustomizeRange
  nameWithType: FixtureExtensions.CustomizeRange
- uid: ComplicatedPrimitives.Tests.LimitPointExtensions
  name: LimitPointExtensions
  href: api/ComplicatedPrimitives.Tests.LimitPointExtensions.html
  commentId: T:ComplicatedPrimitives.Tests.LimitPointExtensions
  fullName: ComplicatedPrimitives.Tests.LimitPointExtensions
  nameWithType: LimitPointExtensions
- uid: ComplicatedPrimitives.Tests.LimitPointExtensions.FlipLimitType*
  name: FlipLimitType
  href: api/ComplicatedPrimitives.Tests.LimitPointExtensions.html#ComplicatedPrimitives_Tests_LimitPointExtensions_FlipLimitType_
  commentId: Overload:ComplicatedPrimitives.Tests.LimitPointExtensions.FlipLimitType
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.LimitPointExtensions.FlipLimitType
  nameWithType: LimitPointExtensions.FlipLimitType
- uid: ComplicatedPrimitives.Tests.LimitPointExtensions.FlipLimitType``1(ComplicatedPrimitives.LimitPoint{``0})
  name: FlipLimitType<T>(LimitPoint<T>)
  href: api/ComplicatedPrimitives.Tests.LimitPointExtensions.html#ComplicatedPrimitives_Tests_LimitPointExtensions_FlipLimitType__1_ComplicatedPrimitives_LimitPoint___0__
  commentId: M:ComplicatedPrimitives.Tests.LimitPointExtensions.FlipLimitType``1(ComplicatedPrimitives.LimitPoint{``0})
  name.vb: FlipLimitType(Of T)(LimitPoint(Of T))
  fullName: ComplicatedPrimitives.Tests.LimitPointExtensions.FlipLimitType<T>(ComplicatedPrimitives.LimitPoint<T>)
  fullName.vb: ComplicatedPrimitives.Tests.LimitPointExtensions.FlipLimitType(Of T)(ComplicatedPrimitives.LimitPoint(Of T))
  nameWithType: LimitPointExtensions.FlipLimitType<T>(LimitPoint<T>)
  nameWithType.vb: LimitPointExtensions.FlipLimitType(Of T)(LimitPoint(Of T))
- uid: ComplicatedPrimitives.Tests.LimitPointFactory`1
  name: LimitPointFactory<T>
  href: api/ComplicatedPrimitives.Tests.LimitPointFactory-1.html
  commentId: T:ComplicatedPrimitives.Tests.LimitPointFactory`1
  name.vb: LimitPointFactory(Of T)
  fullName: ComplicatedPrimitives.Tests.LimitPointFactory<T>
  fullName.vb: ComplicatedPrimitives.Tests.LimitPointFactory(Of T)
  nameWithType: LimitPointFactory<T>
  nameWithType.vb: LimitPointFactory(Of T)
- uid: ComplicatedPrimitives.Tests.LimitPointFactory`1.Create(AutoFixture.Kernel.ISpecimenContext)
  name: Create(ISpecimenContext)
  href: api/ComplicatedPrimitives.Tests.LimitPointFactory-1.html#ComplicatedPrimitives_Tests_LimitPointFactory_1_Create_AutoFixture_Kernel_ISpecimenContext_
  commentId: M:ComplicatedPrimitives.Tests.LimitPointFactory`1.Create(AutoFixture.Kernel.ISpecimenContext)
  fullName: ComplicatedPrimitives.Tests.LimitPointFactory<T>.Create(AutoFixture.Kernel.ISpecimenContext)
  fullName.vb: ComplicatedPrimitives.Tests.LimitPointFactory(Of T).Create(AutoFixture.Kernel.ISpecimenContext)
  nameWithType: LimitPointFactory<T>.Create(ISpecimenContext)
  nameWithType.vb: LimitPointFactory(Of T).Create(ISpecimenContext)
- uid: ComplicatedPrimitives.Tests.LimitPointFactory`1.Create*
  name: Create
  href: api/ComplicatedPrimitives.Tests.LimitPointFactory-1.html#ComplicatedPrimitives_Tests_LimitPointFactory_1_Create_
  commentId: Overload:ComplicatedPrimitives.Tests.LimitPointFactory`1.Create
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.LimitPointFactory<T>.Create
  fullName.vb: ComplicatedPrimitives.Tests.LimitPointFactory(Of T).Create
  nameWithType: LimitPointFactory<T>.Create
  nameWithType.vb: LimitPointFactory(Of T).Create
- uid: ComplicatedPrimitives.Tests.LimitPointTests
  name: LimitPointTests
  href: api/ComplicatedPrimitives.Tests.LimitPointTests.html
  commentId: T:ComplicatedPrimitives.Tests.LimitPointTests
  fullName: ComplicatedPrimitives.Tests.LimitPointTests
  nameWithType: LimitPointTests
- uid: ComplicatedPrimitives.Tests.LimitPointTests.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: LimitPointTests(TestFixture)
  href: api/ComplicatedPrimitives.Tests.LimitPointTests.html#ComplicatedPrimitives_Tests_LimitPointTests__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.LimitPointTests.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.LimitPointTests.LimitPointTests(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: LimitPointTests.LimitPointTests(TestFixture)
- uid: ComplicatedPrimitives.Tests.LimitPointTests.#ctor*
  name: LimitPointTests
  href: api/ComplicatedPrimitives.Tests.LimitPointTests.html#ComplicatedPrimitives_Tests_LimitPointTests__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.LimitPointTests.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.LimitPointTests.LimitPointTests
  nameWithType: LimitPointTests.LimitPointTests
- uid: ComplicatedPrimitives.Tests.LimitPointTests.Default
  name: LimitPointTests.Default
  href: api/ComplicatedPrimitives.Tests.LimitPointTests.Default.html
  commentId: T:ComplicatedPrimitives.Tests.LimitPointTests.Default
  fullName: ComplicatedPrimitives.Tests.LimitPointTests.Default
  nameWithType: LimitPointTests.Default
- uid: ComplicatedPrimitives.Tests.LimitPointTests.Default.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: Default(TestFixture)
  href: api/ComplicatedPrimitives.Tests.LimitPointTests.Default.html#ComplicatedPrimitives_Tests_LimitPointTests_Default__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.LimitPointTests.Default.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.LimitPointTests.Default.Default(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: LimitPointTests.Default.Default(TestFixture)
- uid: ComplicatedPrimitives.Tests.LimitPointTests.Default.#ctor*
  name: Default
  href: api/ComplicatedPrimitives.Tests.LimitPointTests.Default.html#ComplicatedPrimitives_Tests_LimitPointTests_Default__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.LimitPointTests.Default.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.LimitPointTests.Default.Default
  nameWithType: LimitPointTests.Default.Default
- uid: ComplicatedPrimitives.Tests.LimitPointTests.Default.IsFinite_ShouldBeFalse
  name: IsFinite_ShouldBeFalse()
  href: api/ComplicatedPrimitives.Tests.LimitPointTests.Default.html#ComplicatedPrimitives_Tests_LimitPointTests_Default_IsFinite_ShouldBeFalse
  commentId: M:ComplicatedPrimitives.Tests.LimitPointTests.Default.IsFinite_ShouldBeFalse
  fullName: ComplicatedPrimitives.Tests.LimitPointTests.Default.IsFinite_ShouldBeFalse()
  nameWithType: LimitPointTests.Default.IsFinite_ShouldBeFalse()
- uid: ComplicatedPrimitives.Tests.LimitPointTests.Default.IsFinite_ShouldBeFalse*
  name: IsFinite_ShouldBeFalse
  href: api/ComplicatedPrimitives.Tests.LimitPointTests.Default.html#ComplicatedPrimitives_Tests_LimitPointTests_Default_IsFinite_ShouldBeFalse_
  commentId: Overload:ComplicatedPrimitives.Tests.LimitPointTests.Default.IsFinite_ShouldBeFalse
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.LimitPointTests.Default.IsFinite_ShouldBeFalse
  nameWithType: LimitPointTests.Default.IsFinite_ShouldBeFalse
- uid: ComplicatedPrimitives.Tests.LimitPointTests.Default.IsInfinite_ShouldBeTrue
  name: IsInfinite_ShouldBeTrue()
  href: api/ComplicatedPrimitives.Tests.LimitPointTests.Default.html#ComplicatedPrimitives_Tests_LimitPointTests_Default_IsInfinite_ShouldBeTrue
  commentId: M:ComplicatedPrimitives.Tests.LimitPointTests.Default.IsInfinite_ShouldBeTrue
  fullName: ComplicatedPrimitives.Tests.LimitPointTests.Default.IsInfinite_ShouldBeTrue()
  nameWithType: LimitPointTests.Default.IsInfinite_ShouldBeTrue()
- uid: ComplicatedPrimitives.Tests.LimitPointTests.Default.IsInfinite_ShouldBeTrue*
  name: IsInfinite_ShouldBeTrue
  href: api/ComplicatedPrimitives.Tests.LimitPointTests.Default.html#ComplicatedPrimitives_Tests_LimitPointTests_Default_IsInfinite_ShouldBeTrue_
  commentId: Overload:ComplicatedPrimitives.Tests.LimitPointTests.Default.IsInfinite_ShouldBeTrue
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.LimitPointTests.Default.IsInfinite_ShouldBeTrue
  nameWithType: LimitPointTests.Default.IsInfinite_ShouldBeTrue
- uid: ComplicatedPrimitives.Tests.LimitPointTests.Default.Type_ShouldBeOpen
  name: Type_ShouldBeOpen()
  href: api/ComplicatedPrimitives.Tests.LimitPointTests.Default.html#ComplicatedPrimitives_Tests_LimitPointTests_Default_Type_ShouldBeOpen
  commentId: M:ComplicatedPrimitives.Tests.LimitPointTests.Default.Type_ShouldBeOpen
  fullName: ComplicatedPrimitives.Tests.LimitPointTests.Default.Type_ShouldBeOpen()
  nameWithType: LimitPointTests.Default.Type_ShouldBeOpen()
- uid: ComplicatedPrimitives.Tests.LimitPointTests.Default.Type_ShouldBeOpen*
  name: Type_ShouldBeOpen
  href: api/ComplicatedPrimitives.Tests.LimitPointTests.Default.html#ComplicatedPrimitives_Tests_LimitPointTests_Default_Type_ShouldBeOpen_
  commentId: Overload:ComplicatedPrimitives.Tests.LimitPointTests.Default.Type_ShouldBeOpen
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.LimitPointTests.Default.Type_ShouldBeOpen
  nameWithType: LimitPointTests.Default.Type_ShouldBeOpen
- uid: ComplicatedPrimitives.Tests.LimitPointTests.Default.Value_ShouldBeDefault
  name: Value_ShouldBeDefault()
  href: api/ComplicatedPrimitives.Tests.LimitPointTests.Default.html#ComplicatedPrimitives_Tests_LimitPointTests_Default_Value_ShouldBeDefault
  commentId: M:ComplicatedPrimitives.Tests.LimitPointTests.Default.Value_ShouldBeDefault
  fullName: ComplicatedPrimitives.Tests.LimitPointTests.Default.Value_ShouldBeDefault()
  nameWithType: LimitPointTests.Default.Value_ShouldBeDefault()
- uid: ComplicatedPrimitives.Tests.LimitPointTests.Default.Value_ShouldBeDefault*
  name: Value_ShouldBeDefault
  href: api/ComplicatedPrimitives.Tests.LimitPointTests.Default.html#ComplicatedPrimitives_Tests_LimitPointTests_Default_Value_ShouldBeDefault_
  commentId: Overload:ComplicatedPrimitives.Tests.LimitPointTests.Default.Value_ShouldBeDefault
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.LimitPointTests.Default.Value_ShouldBeDefault
  nameWithType: LimitPointTests.Default.Value_ShouldBeDefault
- uid: ComplicatedPrimitives.Tests.LimitPointTests.Map
  name: LimitPointTests.Map
  href: api/ComplicatedPrimitives.Tests.LimitPointTests.Map.html
  commentId: T:ComplicatedPrimitives.Tests.LimitPointTests.Map
  fullName: ComplicatedPrimitives.Tests.LimitPointTests.Map
  nameWithType: LimitPointTests.Map
- uid: ComplicatedPrimitives.Tests.LimitPointTests.Map.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: Map(TestFixture)
  href: api/ComplicatedPrimitives.Tests.LimitPointTests.Map.html#ComplicatedPrimitives_Tests_LimitPointTests_Map__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.LimitPointTests.Map.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.LimitPointTests.Map.Map(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: LimitPointTests.Map.Map(TestFixture)
- uid: ComplicatedPrimitives.Tests.LimitPointTests.Map.#ctor*
  name: Map
  href: api/ComplicatedPrimitives.Tests.LimitPointTests.Map.html#ComplicatedPrimitives_Tests_LimitPointTests_Map__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.LimitPointTests.Map.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.LimitPointTests.Map.Map
  nameWithType: LimitPointTests.Map.Map
- uid: ComplicatedPrimitives.Tests.LimitPointTests.Map.Infinity_ShouldReturnInfinity
  name: Infinity_ShouldReturnInfinity()
  href: api/ComplicatedPrimitives.Tests.LimitPointTests.Map.html#ComplicatedPrimitives_Tests_LimitPointTests_Map_Infinity_ShouldReturnInfinity
  commentId: M:ComplicatedPrimitives.Tests.LimitPointTests.Map.Infinity_ShouldReturnInfinity
  fullName: ComplicatedPrimitives.Tests.LimitPointTests.Map.Infinity_ShouldReturnInfinity()
  nameWithType: LimitPointTests.Map.Infinity_ShouldReturnInfinity()
- uid: ComplicatedPrimitives.Tests.LimitPointTests.Map.Infinity_ShouldReturnInfinity*
  name: Infinity_ShouldReturnInfinity
  href: api/ComplicatedPrimitives.Tests.LimitPointTests.Map.html#ComplicatedPrimitives_Tests_LimitPointTests_Map_Infinity_ShouldReturnInfinity_
  commentId: Overload:ComplicatedPrimitives.Tests.LimitPointTests.Map.Infinity_ShouldReturnInfinity
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.LimitPointTests.Map.Infinity_ShouldReturnInfinity
  nameWithType: LimitPointTests.Map.Infinity_ShouldReturnInfinity
- uid: ComplicatedPrimitives.Tests.LimitPointTests.Map.ShouldMapValue(ComplicatedPrimitives.LimitPointType)
  name: ShouldMapValue(LimitPointType)
  href: api/ComplicatedPrimitives.Tests.LimitPointTests.Map.html#ComplicatedPrimitives_Tests_LimitPointTests_Map_ShouldMapValue_ComplicatedPrimitives_LimitPointType_
  commentId: M:ComplicatedPrimitives.Tests.LimitPointTests.Map.ShouldMapValue(ComplicatedPrimitives.LimitPointType)
  fullName: ComplicatedPrimitives.Tests.LimitPointTests.Map.ShouldMapValue(ComplicatedPrimitives.LimitPointType)
  nameWithType: LimitPointTests.Map.ShouldMapValue(LimitPointType)
- uid: ComplicatedPrimitives.Tests.LimitPointTests.Map.ShouldMapValue*
  name: ShouldMapValue
  href: api/ComplicatedPrimitives.Tests.LimitPointTests.Map.html#ComplicatedPrimitives_Tests_LimitPointTests_Map_ShouldMapValue_
  commentId: Overload:ComplicatedPrimitives.Tests.LimitPointTests.Map.ShouldMapValue
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.LimitPointTests.Map.ShouldMapValue
  nameWithType: LimitPointTests.Map.ShouldMapValue
- uid: ComplicatedPrimitives.Tests.RangeExtensionsTests
  name: RangeExtensionsTests
  href: api/ComplicatedPrimitives.Tests.RangeExtensionsTests.html
  commentId: T:ComplicatedPrimitives.Tests.RangeExtensionsTests
  fullName: ComplicatedPrimitives.Tests.RangeExtensionsTests
  nameWithType: RangeExtensionsTests
- uid: ComplicatedPrimitives.Tests.RangeExtensionsTests.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: RangeExtensionsTests(TestFixture)
  href: api/ComplicatedPrimitives.Tests.RangeExtensionsTests.html#ComplicatedPrimitives_Tests_RangeExtensionsTests__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.RangeExtensionsTests.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.RangeExtensionsTests.RangeExtensionsTests(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: RangeExtensionsTests.RangeExtensionsTests(TestFixture)
- uid: ComplicatedPrimitives.Tests.RangeExtensionsTests.#ctor*
  name: RangeExtensionsTests
  href: api/ComplicatedPrimitives.Tests.RangeExtensionsTests.html#ComplicatedPrimitives_Tests_RangeExtensionsTests__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeExtensionsTests.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeExtensionsTests.RangeExtensionsTests
  nameWithType: RangeExtensionsTests.RangeExtensionsTests
- uid: ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge
  name: RangeExtensionsTests.Merge
  href: api/ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.html
  commentId: T:ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge
  fullName: ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge
  nameWithType: RangeExtensionsTests.Merge
- uid: ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: Merge(TestFixture)
  href: api/ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.html#ComplicatedPrimitives_Tests_RangeExtensionsTests_Merge__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.Merge(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: RangeExtensionsTests.Merge.Merge(TestFixture)
- uid: ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.#ctor*
  name: Merge
  href: api/ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.html#ComplicatedPrimitives_Tests_RangeExtensionsTests_Merge__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.Merge
  nameWithType: RangeExtensionsTests.Merge.Merge
- uid: ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.ManyDisjointRanges_ShouldNotMerge
  name: ManyDisjointRanges_ShouldNotMerge()
  href: api/ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.html#ComplicatedPrimitives_Tests_RangeExtensionsTests_Merge_ManyDisjointRanges_ShouldNotMerge
  commentId: M:ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.ManyDisjointRanges_ShouldNotMerge
  fullName: ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.ManyDisjointRanges_ShouldNotMerge()
  nameWithType: RangeExtensionsTests.Merge.ManyDisjointRanges_ShouldNotMerge()
- uid: ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.ManyDisjointRanges_ShouldNotMerge*
  name: ManyDisjointRanges_ShouldNotMerge
  href: api/ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.html#ComplicatedPrimitives_Tests_RangeExtensionsTests_Merge_ManyDisjointRanges_ShouldNotMerge_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.ManyDisjointRanges_ShouldNotMerge
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.ManyDisjointRanges_ShouldNotMerge
  nameWithType: RangeExtensionsTests.Merge.ManyDisjointRanges_ShouldNotMerge
- uid: ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.ManyIntersectingRanges_ShouldMerge
  name: ManyIntersectingRanges_ShouldMerge()
  href: api/ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.html#ComplicatedPrimitives_Tests_RangeExtensionsTests_Merge_ManyIntersectingRanges_ShouldMerge
  commentId: M:ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.ManyIntersectingRanges_ShouldMerge
  fullName: ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.ManyIntersectingRanges_ShouldMerge()
  nameWithType: RangeExtensionsTests.Merge.ManyIntersectingRanges_ShouldMerge()
- uid: ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.ManyIntersectingRanges_ShouldMerge*
  name: ManyIntersectingRanges_ShouldMerge
  href: api/ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.html#ComplicatedPrimitives_Tests_RangeExtensionsTests_Merge_ManyIntersectingRanges_ShouldMerge_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.ManyIntersectingRanges_ShouldMerge
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.ManyIntersectingRanges_ShouldMerge
  nameWithType: RangeExtensionsTests.Merge.ManyIntersectingRanges_ShouldMerge
- uid: ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.ShouldReturnSingleExpectedResult(System.Collections.Generic.IEnumerable{ComplicatedPrimitives.Range{System.Double}},ComplicatedPrimitives.Range{System.Double},System.String)
  name: ShouldReturnSingleExpectedResult(IEnumerable<Range<Double>>, Range<Double>, String)
  href: api/ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.html#ComplicatedPrimitives_Tests_RangeExtensionsTests_Merge_ShouldReturnSingleExpectedResult_System_Collections_Generic_IEnumerable_ComplicatedPrimitives_Range_System_Double___ComplicatedPrimitives_Range_System_Double__System_String_
  commentId: M:ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.ShouldReturnSingleExpectedResult(System.Collections.Generic.IEnumerable{ComplicatedPrimitives.Range{System.Double}},ComplicatedPrimitives.Range{System.Double},System.String)
  name.vb: ShouldReturnSingleExpectedResult(IEnumerable(Of Range(Of Double)), Range(Of Double), String)
  fullName: ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.ShouldReturnSingleExpectedResult(System.Collections.Generic.IEnumerable<ComplicatedPrimitives.Range<System.Double>>, ComplicatedPrimitives.Range<System.Double>, System.String)
  fullName.vb: ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.ShouldReturnSingleExpectedResult(System.Collections.Generic.IEnumerable(Of ComplicatedPrimitives.Range(Of System.Double)), ComplicatedPrimitives.Range(Of System.Double), System.String)
  nameWithType: RangeExtensionsTests.Merge.ShouldReturnSingleExpectedResult(IEnumerable<Range<Double>>, Range<Double>, String)
  nameWithType.vb: RangeExtensionsTests.Merge.ShouldReturnSingleExpectedResult(IEnumerable(Of Range(Of Double)), Range(Of Double), String)
- uid: ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.ShouldReturnSingleExpectedResult*
  name: ShouldReturnSingleExpectedResult
  href: api/ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.html#ComplicatedPrimitives_Tests_RangeExtensionsTests_Merge_ShouldReturnSingleExpectedResult_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.ShouldReturnSingleExpectedResult
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.ShouldReturnSingleExpectedResult
  nameWithType: RangeExtensionsTests.Merge.ShouldReturnSingleExpectedResult
- uid: ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.TwoRangesNeighbouringWithOpenLimits_ShouldNotMerge
  name: TwoRangesNeighbouringWithOpenLimits_ShouldNotMerge()
  href: api/ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.html#ComplicatedPrimitives_Tests_RangeExtensionsTests_Merge_TwoRangesNeighbouringWithOpenLimits_ShouldNotMerge
  commentId: M:ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.TwoRangesNeighbouringWithOpenLimits_ShouldNotMerge
  fullName: ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.TwoRangesNeighbouringWithOpenLimits_ShouldNotMerge()
  nameWithType: RangeExtensionsTests.Merge.TwoRangesNeighbouringWithOpenLimits_ShouldNotMerge()
- uid: ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.TwoRangesNeighbouringWithOpenLimits_ShouldNotMerge*
  name: TwoRangesNeighbouringWithOpenLimits_ShouldNotMerge
  href: api/ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.html#ComplicatedPrimitives_Tests_RangeExtensionsTests_Merge_TwoRangesNeighbouringWithOpenLimits_ShouldNotMerge_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.TwoRangesNeighbouringWithOpenLimits_ShouldNotMerge
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeExtensionsTests.Merge.TwoRangesNeighbouringWithOpenLimits_ShouldNotMerge
  nameWithType: RangeExtensionsTests.Merge.TwoRangesNeighbouringWithOpenLimits_ShouldNotMerge
- uid: ComplicatedPrimitives.Tests.RangeFactory`1
  name: RangeFactory<T>
  href: api/ComplicatedPrimitives.Tests.RangeFactory-1.html
  commentId: T:ComplicatedPrimitives.Tests.RangeFactory`1
  name.vb: RangeFactory(Of T)
  fullName: ComplicatedPrimitives.Tests.RangeFactory<T>
  fullName.vb: ComplicatedPrimitives.Tests.RangeFactory(Of T)
  nameWithType: RangeFactory<T>
  nameWithType.vb: RangeFactory(Of T)
- uid: ComplicatedPrimitives.Tests.RangeFactory`1.Create(AutoFixture.Kernel.ISpecimenContext)
  name: Create(ISpecimenContext)
  href: api/ComplicatedPrimitives.Tests.RangeFactory-1.html#ComplicatedPrimitives_Tests_RangeFactory_1_Create_AutoFixture_Kernel_ISpecimenContext_
  commentId: M:ComplicatedPrimitives.Tests.RangeFactory`1.Create(AutoFixture.Kernel.ISpecimenContext)
  fullName: ComplicatedPrimitives.Tests.RangeFactory<T>.Create(AutoFixture.Kernel.ISpecimenContext)
  fullName.vb: ComplicatedPrimitives.Tests.RangeFactory(Of T).Create(AutoFixture.Kernel.ISpecimenContext)
  nameWithType: RangeFactory<T>.Create(ISpecimenContext)
  nameWithType.vb: RangeFactory(Of T).Create(ISpecimenContext)
- uid: ComplicatedPrimitives.Tests.RangeFactory`1.Create*
  name: Create
  href: api/ComplicatedPrimitives.Tests.RangeFactory-1.html#ComplicatedPrimitives_Tests_RangeFactory_1_Create_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeFactory`1.Create
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeFactory<T>.Create
  fullName.vb: ComplicatedPrimitives.Tests.RangeFactory(Of T).Create
  nameWithType: RangeFactory<T>.Create
  nameWithType.vb: RangeFactory(Of T).Create
- uid: ComplicatedPrimitives.Tests.RangeParserTests
  name: RangeParserTests
  href: api/ComplicatedPrimitives.Tests.RangeParserTests.html
  commentId: T:ComplicatedPrimitives.Tests.RangeParserTests
  fullName: ComplicatedPrimitives.Tests.RangeParserTests
  nameWithType: RangeParserTests
- uid: ComplicatedPrimitives.Tests.RangeParserTests.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: RangeParserTests(TestFixture)
  href: api/ComplicatedPrimitives.Tests.RangeParserTests.html#ComplicatedPrimitives_Tests_RangeParserTests__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.RangeParserTests.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.RangeParserTests.RangeParserTests(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: RangeParserTests.RangeParserTests(TestFixture)
- uid: ComplicatedPrimitives.Tests.RangeParserTests.#ctor*
  name: RangeParserTests
  href: api/ComplicatedPrimitives.Tests.RangeParserTests.html#ComplicatedPrimitives_Tests_RangeParserTests__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeParserTests.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeParserTests.RangeParserTests
  nameWithType: RangeParserTests.RangeParserTests
- uid: ComplicatedPrimitives.Tests.RangeParserTests.Parse
  name: RangeParserTests.Parse
  href: api/ComplicatedPrimitives.Tests.RangeParserTests.Parse.html
  commentId: T:ComplicatedPrimitives.Tests.RangeParserTests.Parse
  fullName: ComplicatedPrimitives.Tests.RangeParserTests.Parse
  nameWithType: RangeParserTests.Parse
- uid: ComplicatedPrimitives.Tests.RangeParserTests.Parse.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: Parse(TestFixture)
  href: api/ComplicatedPrimitives.Tests.RangeParserTests.Parse.html#ComplicatedPrimitives_Tests_RangeParserTests_Parse__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.RangeParserTests.Parse.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.RangeParserTests.Parse.Parse(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: RangeParserTests.Parse.Parse(TestFixture)
- uid: ComplicatedPrimitives.Tests.RangeParserTests.Parse.#ctor*
  name: Parse
  href: api/ComplicatedPrimitives.Tests.RangeParserTests.Parse.html#ComplicatedPrimitives_Tests_RangeParserTests_Parse__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeParserTests.Parse.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeParserTests.Parse.Parse
  nameWithType: RangeParserTests.Parse.Parse
- uid: ComplicatedPrimitives.Tests.RangeParserTests.Parse.IsCompatibleWithRangeToString
  name: IsCompatibleWithRangeToString()
  href: api/ComplicatedPrimitives.Tests.RangeParserTests.Parse.html#ComplicatedPrimitives_Tests_RangeParserTests_Parse_IsCompatibleWithRangeToString
  commentId: M:ComplicatedPrimitives.Tests.RangeParserTests.Parse.IsCompatibleWithRangeToString
  fullName: ComplicatedPrimitives.Tests.RangeParserTests.Parse.IsCompatibleWithRangeToString()
  nameWithType: RangeParserTests.Parse.IsCompatibleWithRangeToString()
- uid: ComplicatedPrimitives.Tests.RangeParserTests.Parse.IsCompatibleWithRangeToString*
  name: IsCompatibleWithRangeToString
  href: api/ComplicatedPrimitives.Tests.RangeParserTests.Parse.html#ComplicatedPrimitives_Tests_RangeParserTests_Parse_IsCompatibleWithRangeToString_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeParserTests.Parse.IsCompatibleWithRangeToString
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeParserTests.Parse.IsCompatibleWithRangeToString
  nameWithType: RangeParserTests.Parse.IsCompatibleWithRangeToString
- uid: ComplicatedPrimitives.Tests.RangeParserTests.Parse.ShouldReturnExpectedResult(System.String,ComplicatedPrimitives.LimitPointType,System.Double,System.Double,ComplicatedPrimitives.LimitPointType)
  name: ShouldReturnExpectedResult(String, LimitPointType, Double, Double, LimitPointType)
  href: api/ComplicatedPrimitives.Tests.RangeParserTests.Parse.html#ComplicatedPrimitives_Tests_RangeParserTests_Parse_ShouldReturnExpectedResult_System_String_ComplicatedPrimitives_LimitPointType_System_Double_System_Double_ComplicatedPrimitives_LimitPointType_
  commentId: M:ComplicatedPrimitives.Tests.RangeParserTests.Parse.ShouldReturnExpectedResult(System.String,ComplicatedPrimitives.LimitPointType,System.Double,System.Double,ComplicatedPrimitives.LimitPointType)
  fullName: ComplicatedPrimitives.Tests.RangeParserTests.Parse.ShouldReturnExpectedResult(System.String, ComplicatedPrimitives.LimitPointType, System.Double, System.Double, ComplicatedPrimitives.LimitPointType)
  nameWithType: RangeParserTests.Parse.ShouldReturnExpectedResult(String, LimitPointType, Double, Double, LimitPointType)
- uid: ComplicatedPrimitives.Tests.RangeParserTests.Parse.ShouldReturnExpectedResult*
  name: ShouldReturnExpectedResult
  href: api/ComplicatedPrimitives.Tests.RangeParserTests.Parse.html#ComplicatedPrimitives_Tests_RangeParserTests_Parse_ShouldReturnExpectedResult_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeParserTests.Parse.ShouldReturnExpectedResult
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeParserTests.Parse.ShouldReturnExpectedResult
  nameWithType: RangeParserTests.Parse.ShouldReturnExpectedResult
- uid: ComplicatedPrimitives.Tests.RangeTests
  name: RangeTests
  href: api/ComplicatedPrimitives.Tests.RangeTests.html
  commentId: T:ComplicatedPrimitives.Tests.RangeTests
  fullName: ComplicatedPrimitives.Tests.RangeTests
  nameWithType: RangeTests
- uid: ComplicatedPrimitives.Tests.RangeTests.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: RangeTests(TestFixture)
  href: api/ComplicatedPrimitives.Tests.RangeTests.html#ComplicatedPrimitives_Tests_RangeTests__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.RangeTests.RangeTests(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: RangeTests.RangeTests(TestFixture)
- uid: ComplicatedPrimitives.Tests.RangeTests.#ctor*
  name: RangeTests
  href: api/ComplicatedPrimitives.Tests.RangeTests.html#ComplicatedPrimitives_Tests_RangeTests__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.RangeTests
  nameWithType: RangeTests.RangeTests
- uid: ComplicatedPrimitives.Tests.RangeTests.Constructor
  name: RangeTests.Constructor
  href: api/ComplicatedPrimitives.Tests.RangeTests.Constructor.html
  commentId: T:ComplicatedPrimitives.Tests.RangeTests.Constructor
  fullName: ComplicatedPrimitives.Tests.RangeTests.Constructor
  nameWithType: RangeTests.Constructor
- uid: ComplicatedPrimitives.Tests.RangeTests.Constructor.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: Constructor(TestFixture)
  href: api/ComplicatedPrimitives.Tests.RangeTests.Constructor.html#ComplicatedPrimitives_Tests_RangeTests_Constructor__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.Constructor.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.RangeTests.Constructor.Constructor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: RangeTests.Constructor.Constructor(TestFixture)
- uid: ComplicatedPrimitives.Tests.RangeTests.Constructor.#ctor*
  name: Constructor
  href: api/ComplicatedPrimitives.Tests.RangeTests.Constructor.html#ComplicatedPrimitives_Tests_RangeTests_Constructor__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.Constructor.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.Constructor.Constructor
  nameWithType: RangeTests.Constructor.Constructor
- uid: ComplicatedPrimitives.Tests.RangeTests.Constructor.LeftInfiniteLimit_ShouldCreateLeftInfiniteRange
  name: LeftInfiniteLimit_ShouldCreateLeftInfiniteRange()
  href: api/ComplicatedPrimitives.Tests.RangeTests.Constructor.html#ComplicatedPrimitives_Tests_RangeTests_Constructor_LeftInfiniteLimit_ShouldCreateLeftInfiniteRange
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.Constructor.LeftInfiniteLimit_ShouldCreateLeftInfiniteRange
  fullName: ComplicatedPrimitives.Tests.RangeTests.Constructor.LeftInfiniteLimit_ShouldCreateLeftInfiniteRange()
  nameWithType: RangeTests.Constructor.LeftInfiniteLimit_ShouldCreateLeftInfiniteRange()
- uid: ComplicatedPrimitives.Tests.RangeTests.Constructor.LeftInfiniteLimit_ShouldCreateLeftInfiniteRange*
  name: LeftInfiniteLimit_ShouldCreateLeftInfiniteRange
  href: api/ComplicatedPrimitives.Tests.RangeTests.Constructor.html#ComplicatedPrimitives_Tests_RangeTests_Constructor_LeftInfiniteLimit_ShouldCreateLeftInfiniteRange_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.Constructor.LeftInfiniteLimit_ShouldCreateLeftInfiniteRange
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.Constructor.LeftInfiniteLimit_ShouldCreateLeftInfiniteRange
  nameWithType: RangeTests.Constructor.LeftInfiniteLimit_ShouldCreateLeftInfiniteRange
- uid: ComplicatedPrimitives.Tests.RangeTests.Constructor.LeftLimitGreaterThanRightLimit_ShouldThrow
  name: LeftLimitGreaterThanRightLimit_ShouldThrow()
  href: api/ComplicatedPrimitives.Tests.RangeTests.Constructor.html#ComplicatedPrimitives_Tests_RangeTests_Constructor_LeftLimitGreaterThanRightLimit_ShouldThrow
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.Constructor.LeftLimitGreaterThanRightLimit_ShouldThrow
  fullName: ComplicatedPrimitives.Tests.RangeTests.Constructor.LeftLimitGreaterThanRightLimit_ShouldThrow()
  nameWithType: RangeTests.Constructor.LeftLimitGreaterThanRightLimit_ShouldThrow()
- uid: ComplicatedPrimitives.Tests.RangeTests.Constructor.LeftLimitGreaterThanRightLimit_ShouldThrow*
  name: LeftLimitGreaterThanRightLimit_ShouldThrow
  href: api/ComplicatedPrimitives.Tests.RangeTests.Constructor.html#ComplicatedPrimitives_Tests_RangeTests_Constructor_LeftLimitGreaterThanRightLimit_ShouldThrow_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.Constructor.LeftLimitGreaterThanRightLimit_ShouldThrow
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.Constructor.LeftLimitGreaterThanRightLimit_ShouldThrow
  nameWithType: RangeTests.Constructor.LeftLimitGreaterThanRightLimit_ShouldThrow
- uid: ComplicatedPrimitives.Tests.RangeTests.Constructor.RightInfiniteLimit_ShouldCreateRightInfiniteRange
  name: RightInfiniteLimit_ShouldCreateRightInfiniteRange()
  href: api/ComplicatedPrimitives.Tests.RangeTests.Constructor.html#ComplicatedPrimitives_Tests_RangeTests_Constructor_RightInfiniteLimit_ShouldCreateRightInfiniteRange
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.Constructor.RightInfiniteLimit_ShouldCreateRightInfiniteRange
  fullName: ComplicatedPrimitives.Tests.RangeTests.Constructor.RightInfiniteLimit_ShouldCreateRightInfiniteRange()
  nameWithType: RangeTests.Constructor.RightInfiniteLimit_ShouldCreateRightInfiniteRange()
- uid: ComplicatedPrimitives.Tests.RangeTests.Constructor.RightInfiniteLimit_ShouldCreateRightInfiniteRange*
  name: RightInfiniteLimit_ShouldCreateRightInfiniteRange
  href: api/ComplicatedPrimitives.Tests.RangeTests.Constructor.html#ComplicatedPrimitives_Tests_RangeTests_Constructor_RightInfiniteLimit_ShouldCreateRightInfiniteRange_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.Constructor.RightInfiniteLimit_ShouldCreateRightInfiniteRange
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.Constructor.RightInfiniteLimit_ShouldCreateRightInfiniteRange
  nameWithType: RangeTests.Constructor.RightInfiniteLimit_ShouldCreateRightInfiniteRange
- uid: ComplicatedPrimitives.Tests.RangeTests.Constructor.ShouldCreateWithGivenValues
  name: ShouldCreateWithGivenValues()
  href: api/ComplicatedPrimitives.Tests.RangeTests.Constructor.html#ComplicatedPrimitives_Tests_RangeTests_Constructor_ShouldCreateWithGivenValues
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.Constructor.ShouldCreateWithGivenValues
  fullName: ComplicatedPrimitives.Tests.RangeTests.Constructor.ShouldCreateWithGivenValues()
  nameWithType: RangeTests.Constructor.ShouldCreateWithGivenValues()
- uid: ComplicatedPrimitives.Tests.RangeTests.Constructor.ShouldCreateWithGivenValues*
  name: ShouldCreateWithGivenValues
  href: api/ComplicatedPrimitives.Tests.RangeTests.Constructor.html#ComplicatedPrimitives_Tests_RangeTests_Constructor_ShouldCreateWithGivenValues_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.Constructor.ShouldCreateWithGivenValues
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.Constructor.ShouldCreateWithGivenValues
  nameWithType: RangeTests.Constructor.ShouldCreateWithGivenValues
- uid: ComplicatedPrimitives.Tests.RangeTests.Contains
  name: RangeTests.Contains
  href: api/ComplicatedPrimitives.Tests.RangeTests.Contains.html
  commentId: T:ComplicatedPrimitives.Tests.RangeTests.Contains
  fullName: ComplicatedPrimitives.Tests.RangeTests.Contains
  nameWithType: RangeTests.Contains
- uid: ComplicatedPrimitives.Tests.RangeTests.Contains.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: Contains(TestFixture)
  href: api/ComplicatedPrimitives.Tests.RangeTests.Contains.html#ComplicatedPrimitives_Tests_RangeTests_Contains__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.Contains.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.RangeTests.Contains.Contains(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: RangeTests.Contains.Contains(TestFixture)
- uid: ComplicatedPrimitives.Tests.RangeTests.Contains.#ctor*
  name: Contains
  href: api/ComplicatedPrimitives.Tests.RangeTests.Contains.html#ComplicatedPrimitives_Tests_RangeTests_Contains__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.Contains.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.Contains.Contains
  nameWithType: RangeTests.Contains.Contains
- uid: ComplicatedPrimitives.Tests.RangeTests.Contains.InnerValue_ShouldReturnTrue
  name: InnerValue_ShouldReturnTrue()
  href: api/ComplicatedPrimitives.Tests.RangeTests.Contains.html#ComplicatedPrimitives_Tests_RangeTests_Contains_InnerValue_ShouldReturnTrue
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.Contains.InnerValue_ShouldReturnTrue
  fullName: ComplicatedPrimitives.Tests.RangeTests.Contains.InnerValue_ShouldReturnTrue()
  nameWithType: RangeTests.Contains.InnerValue_ShouldReturnTrue()
- uid: ComplicatedPrimitives.Tests.RangeTests.Contains.InnerValue_ShouldReturnTrue*
  name: InnerValue_ShouldReturnTrue
  href: api/ComplicatedPrimitives.Tests.RangeTests.Contains.html#ComplicatedPrimitives_Tests_RangeTests_Contains_InnerValue_ShouldReturnTrue_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.Contains.InnerValue_ShouldReturnTrue
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.Contains.InnerValue_ShouldReturnTrue
  nameWithType: RangeTests.Contains.InnerValue_ShouldReturnTrue
- uid: ComplicatedPrimitives.Tests.RangeTests.Contains.LeftLimitPoint_ShouldReturnExpectedResult(ComplicatedPrimitives.LimitPointType,System.Boolean)
  name: LeftLimitPoint_ShouldReturnExpectedResult(LimitPointType, Boolean)
  href: api/ComplicatedPrimitives.Tests.RangeTests.Contains.html#ComplicatedPrimitives_Tests_RangeTests_Contains_LeftLimitPoint_ShouldReturnExpectedResult_ComplicatedPrimitives_LimitPointType_System_Boolean_
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.Contains.LeftLimitPoint_ShouldReturnExpectedResult(ComplicatedPrimitives.LimitPointType,System.Boolean)
  fullName: ComplicatedPrimitives.Tests.RangeTests.Contains.LeftLimitPoint_ShouldReturnExpectedResult(ComplicatedPrimitives.LimitPointType, System.Boolean)
  nameWithType: RangeTests.Contains.LeftLimitPoint_ShouldReturnExpectedResult(LimitPointType, Boolean)
- uid: ComplicatedPrimitives.Tests.RangeTests.Contains.LeftLimitPoint_ShouldReturnExpectedResult*
  name: LeftLimitPoint_ShouldReturnExpectedResult
  href: api/ComplicatedPrimitives.Tests.RangeTests.Contains.html#ComplicatedPrimitives_Tests_RangeTests_Contains_LeftLimitPoint_ShouldReturnExpectedResult_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.Contains.LeftLimitPoint_ShouldReturnExpectedResult
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.Contains.LeftLimitPoint_ShouldReturnExpectedResult
  nameWithType: RangeTests.Contains.LeftLimitPoint_ShouldReturnExpectedResult
- uid: ComplicatedPrimitives.Tests.RangeTests.Contains.OuterValue_ShouldReturnFalse
  name: OuterValue_ShouldReturnFalse()
  href: api/ComplicatedPrimitives.Tests.RangeTests.Contains.html#ComplicatedPrimitives_Tests_RangeTests_Contains_OuterValue_ShouldReturnFalse
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.Contains.OuterValue_ShouldReturnFalse
  fullName: ComplicatedPrimitives.Tests.RangeTests.Contains.OuterValue_ShouldReturnFalse()
  nameWithType: RangeTests.Contains.OuterValue_ShouldReturnFalse()
- uid: ComplicatedPrimitives.Tests.RangeTests.Contains.OuterValue_ShouldReturnFalse*
  name: OuterValue_ShouldReturnFalse
  href: api/ComplicatedPrimitives.Tests.RangeTests.Contains.html#ComplicatedPrimitives_Tests_RangeTests_Contains_OuterValue_ShouldReturnFalse_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.Contains.OuterValue_ShouldReturnFalse
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.Contains.OuterValue_ShouldReturnFalse
  nameWithType: RangeTests.Contains.OuterValue_ShouldReturnFalse
- uid: ComplicatedPrimitives.Tests.RangeTests.Contains.RightLimitPoint_ShouldReturnExpectedResult(ComplicatedPrimitives.LimitPointType,System.Boolean)
  name: RightLimitPoint_ShouldReturnExpectedResult(LimitPointType, Boolean)
  href: api/ComplicatedPrimitives.Tests.RangeTests.Contains.html#ComplicatedPrimitives_Tests_RangeTests_Contains_RightLimitPoint_ShouldReturnExpectedResult_ComplicatedPrimitives_LimitPointType_System_Boolean_
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.Contains.RightLimitPoint_ShouldReturnExpectedResult(ComplicatedPrimitives.LimitPointType,System.Boolean)
  fullName: ComplicatedPrimitives.Tests.RangeTests.Contains.RightLimitPoint_ShouldReturnExpectedResult(ComplicatedPrimitives.LimitPointType, System.Boolean)
  nameWithType: RangeTests.Contains.RightLimitPoint_ShouldReturnExpectedResult(LimitPointType, Boolean)
- uid: ComplicatedPrimitives.Tests.RangeTests.Contains.RightLimitPoint_ShouldReturnExpectedResult*
  name: RightLimitPoint_ShouldReturnExpectedResult
  href: api/ComplicatedPrimitives.Tests.RangeTests.Contains.html#ComplicatedPrimitives_Tests_RangeTests_Contains_RightLimitPoint_ShouldReturnExpectedResult_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.Contains.RightLimitPoint_ShouldReturnExpectedResult
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.Contains.RightLimitPoint_ShouldReturnExpectedResult
  nameWithType: RangeTests.Contains.RightLimitPoint_ShouldReturnExpectedResult
- uid: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod
  name: RangeTests.EqualsMethod
  href: api/ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.html
  commentId: T:ComplicatedPrimitives.Tests.RangeTests.EqualsMethod
  fullName: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod
  nameWithType: RangeTests.EqualsMethod
- uid: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: EqualsMethod(TestFixture)
  href: api/ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.html#ComplicatedPrimitives_Tests_RangeTests_EqualsMethod__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.EqualsMethod(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: RangeTests.EqualsMethod.EqualsMethod(TestFixture)
- uid: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.#ctor*
  name: EqualsMethod
  href: api/ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.html#ComplicatedPrimitives_Tests_RangeTests_EqualsMethod__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.EqualsMethod
  nameWithType: RangeTests.EqualsMethod.EqualsMethod
- uid: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.DifferentLeftLimitType_ShouldReturnFalse
  name: DifferentLeftLimitType_ShouldReturnFalse()
  href: api/ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.html#ComplicatedPrimitives_Tests_RangeTests_EqualsMethod_DifferentLeftLimitType_ShouldReturnFalse
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.DifferentLeftLimitType_ShouldReturnFalse
  fullName: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.DifferentLeftLimitType_ShouldReturnFalse()
  nameWithType: RangeTests.EqualsMethod.DifferentLeftLimitType_ShouldReturnFalse()
- uid: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.DifferentLeftLimitType_ShouldReturnFalse*
  name: DifferentLeftLimitType_ShouldReturnFalse
  href: api/ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.html#ComplicatedPrimitives_Tests_RangeTests_EqualsMethod_DifferentLeftLimitType_ShouldReturnFalse_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.DifferentLeftLimitType_ShouldReturnFalse
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.DifferentLeftLimitType_ShouldReturnFalse
  nameWithType: RangeTests.EqualsMethod.DifferentLeftLimitType_ShouldReturnFalse
- uid: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.DifferentLeftValue_ShouldReturnFalse
  name: DifferentLeftValue_ShouldReturnFalse()
  href: api/ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.html#ComplicatedPrimitives_Tests_RangeTests_EqualsMethod_DifferentLeftValue_ShouldReturnFalse
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.DifferentLeftValue_ShouldReturnFalse
  fullName: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.DifferentLeftValue_ShouldReturnFalse()
  nameWithType: RangeTests.EqualsMethod.DifferentLeftValue_ShouldReturnFalse()
- uid: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.DifferentLeftValue_ShouldReturnFalse*
  name: DifferentLeftValue_ShouldReturnFalse
  href: api/ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.html#ComplicatedPrimitives_Tests_RangeTests_EqualsMethod_DifferentLeftValue_ShouldReturnFalse_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.DifferentLeftValue_ShouldReturnFalse
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.DifferentLeftValue_ShouldReturnFalse
  nameWithType: RangeTests.EqualsMethod.DifferentLeftValue_ShouldReturnFalse
- uid: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.DifferentRightLimitType_ShouldReturnFalse
  name: DifferentRightLimitType_ShouldReturnFalse()
  href: api/ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.html#ComplicatedPrimitives_Tests_RangeTests_EqualsMethod_DifferentRightLimitType_ShouldReturnFalse
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.DifferentRightLimitType_ShouldReturnFalse
  fullName: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.DifferentRightLimitType_ShouldReturnFalse()
  nameWithType: RangeTests.EqualsMethod.DifferentRightLimitType_ShouldReturnFalse()
- uid: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.DifferentRightLimitType_ShouldReturnFalse*
  name: DifferentRightLimitType_ShouldReturnFalse
  href: api/ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.html#ComplicatedPrimitives_Tests_RangeTests_EqualsMethod_DifferentRightLimitType_ShouldReturnFalse_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.DifferentRightLimitType_ShouldReturnFalse
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.DifferentRightLimitType_ShouldReturnFalse
  nameWithType: RangeTests.EqualsMethod.DifferentRightLimitType_ShouldReturnFalse
- uid: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.DifferentRightValue_ShouldReturnFalse
  name: DifferentRightValue_ShouldReturnFalse()
  href: api/ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.html#ComplicatedPrimitives_Tests_RangeTests_EqualsMethod_DifferentRightValue_ShouldReturnFalse
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.DifferentRightValue_ShouldReturnFalse
  fullName: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.DifferentRightValue_ShouldReturnFalse()
  nameWithType: RangeTests.EqualsMethod.DifferentRightValue_ShouldReturnFalse()
- uid: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.DifferentRightValue_ShouldReturnFalse*
  name: DifferentRightValue_ShouldReturnFalse
  href: api/ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.html#ComplicatedPrimitives_Tests_RangeTests_EqualsMethod_DifferentRightValue_ShouldReturnFalse_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.DifferentRightValue_ShouldReturnFalse
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.DifferentRightValue_ShouldReturnFalse
  nameWithType: RangeTests.EqualsMethod.DifferentRightValue_ShouldReturnFalse
- uid: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.EmptyRange_ShouldBeEqualItself
  name: EmptyRange_ShouldBeEqualItself()
  href: api/ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.html#ComplicatedPrimitives_Tests_RangeTests_EqualsMethod_EmptyRange_ShouldBeEqualItself
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.EmptyRange_ShouldBeEqualItself
  fullName: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.EmptyRange_ShouldBeEqualItself()
  nameWithType: RangeTests.EqualsMethod.EmptyRange_ShouldBeEqualItself()
- uid: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.EmptyRange_ShouldBeEqualItself*
  name: EmptyRange_ShouldBeEqualItself
  href: api/ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.html#ComplicatedPrimitives_Tests_RangeTests_EqualsMethod_EmptyRange_ShouldBeEqualItself_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.EmptyRange_ShouldBeEqualItself
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.EmptyRange_ShouldBeEqualItself
  nameWithType: RangeTests.EqualsMethod.EmptyRange_ShouldBeEqualItself
- uid: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.InfiniteRange_ShouldBeEqualItself
  name: InfiniteRange_ShouldBeEqualItself()
  href: api/ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.html#ComplicatedPrimitives_Tests_RangeTests_EqualsMethod_InfiniteRange_ShouldBeEqualItself
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.InfiniteRange_ShouldBeEqualItself
  fullName: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.InfiniteRange_ShouldBeEqualItself()
  nameWithType: RangeTests.EqualsMethod.InfiniteRange_ShouldBeEqualItself()
- uid: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.InfiniteRange_ShouldBeEqualItself*
  name: InfiniteRange_ShouldBeEqualItself
  href: api/ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.html#ComplicatedPrimitives_Tests_RangeTests_EqualsMethod_InfiniteRange_ShouldBeEqualItself_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.InfiniteRange_ShouldBeEqualItself
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.InfiniteRange_ShouldBeEqualItself
  nameWithType: RangeTests.EqualsMethod.InfiniteRange_ShouldBeEqualItself
- uid: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.InfiniteRange_ShouldNotBeEqualMaximumRange
  name: InfiniteRange_ShouldNotBeEqualMaximumRange()
  href: api/ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.html#ComplicatedPrimitives_Tests_RangeTests_EqualsMethod_InfiniteRange_ShouldNotBeEqualMaximumRange
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.InfiniteRange_ShouldNotBeEqualMaximumRange
  fullName: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.InfiniteRange_ShouldNotBeEqualMaximumRange()
  nameWithType: RangeTests.EqualsMethod.InfiniteRange_ShouldNotBeEqualMaximumRange()
- uid: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.InfiniteRange_ShouldNotBeEqualMaximumRange*
  name: InfiniteRange_ShouldNotBeEqualMaximumRange
  href: api/ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.html#ComplicatedPrimitives_Tests_RangeTests_EqualsMethod_InfiniteRange_ShouldNotBeEqualMaximumRange_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.InfiniteRange_ShouldNotBeEqualMaximumRange
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.InfiniteRange_ShouldNotBeEqualMaximumRange
  nameWithType: RangeTests.EqualsMethod.InfiniteRange_ShouldNotBeEqualMaximumRange
- uid: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.OtherIsNull_ShouldReturnFalse
  name: OtherIsNull_ShouldReturnFalse()
  href: api/ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.html#ComplicatedPrimitives_Tests_RangeTests_EqualsMethod_OtherIsNull_ShouldReturnFalse
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.OtherIsNull_ShouldReturnFalse
  fullName: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.OtherIsNull_ShouldReturnFalse()
  nameWithType: RangeTests.EqualsMethod.OtherIsNull_ShouldReturnFalse()
- uid: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.OtherIsNull_ShouldReturnFalse*
  name: OtherIsNull_ShouldReturnFalse
  href: api/ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.html#ComplicatedPrimitives_Tests_RangeTests_EqualsMethod_OtherIsNull_ShouldReturnFalse_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.OtherIsNull_ShouldReturnFalse
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.OtherIsNull_ShouldReturnFalse
  nameWithType: RangeTests.EqualsMethod.OtherIsNull_ShouldReturnFalse
- uid: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.SameLimits_ShouldReturnTrue
  name: SameLimits_ShouldReturnTrue()
  href: api/ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.html#ComplicatedPrimitives_Tests_RangeTests_EqualsMethod_SameLimits_ShouldReturnTrue
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.SameLimits_ShouldReturnTrue
  fullName: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.SameLimits_ShouldReturnTrue()
  nameWithType: RangeTests.EqualsMethod.SameLimits_ShouldReturnTrue()
- uid: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.SameLimits_ShouldReturnTrue*
  name: SameLimits_ShouldReturnTrue
  href: api/ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.html#ComplicatedPrimitives_Tests_RangeTests_EqualsMethod_SameLimits_ShouldReturnTrue_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.SameLimits_ShouldReturnTrue
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.EqualsMethod.SameLimits_ShouldReturnTrue
  nameWithType: RangeTests.EqualsMethod.SameLimits_ShouldReturnTrue
- uid: ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement
  name: RangeTests.GetAbsoluteComplement
  href: api/ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.html
  commentId: T:ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement
  fullName: ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement
  nameWithType: RangeTests.GetAbsoluteComplement
- uid: ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: GetAbsoluteComplement(TestFixture)
  href: api/ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.html#ComplicatedPrimitives_Tests_RangeTests_GetAbsoluteComplement__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.GetAbsoluteComplement(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: RangeTests.GetAbsoluteComplement.GetAbsoluteComplement(TestFixture)
- uid: ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.#ctor*
  name: GetAbsoluteComplement
  href: api/ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.html#ComplicatedPrimitives_Tests_RangeTests_GetAbsoluteComplement__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.GetAbsoluteComplement
  nameWithType: RangeTests.GetAbsoluteComplement.GetAbsoluteComplement
- uid: ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.EmptyRange_ShouldReturnSingleInfiniteRange
  name: EmptyRange_ShouldReturnSingleInfiniteRange()
  href: api/ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.html#ComplicatedPrimitives_Tests_RangeTests_GetAbsoluteComplement_EmptyRange_ShouldReturnSingleInfiniteRange
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.EmptyRange_ShouldReturnSingleInfiniteRange
  fullName: ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.EmptyRange_ShouldReturnSingleInfiniteRange()
  nameWithType: RangeTests.GetAbsoluteComplement.EmptyRange_ShouldReturnSingleInfiniteRange()
- uid: ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.EmptyRange_ShouldReturnSingleInfiniteRange*
  name: EmptyRange_ShouldReturnSingleInfiniteRange
  href: api/ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.html#ComplicatedPrimitives_Tests_RangeTests_GetAbsoluteComplement_EmptyRange_ShouldReturnSingleInfiniteRange_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.EmptyRange_ShouldReturnSingleInfiniteRange
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.EmptyRange_ShouldReturnSingleInfiniteRange
  nameWithType: RangeTests.GetAbsoluteComplement.EmptyRange_ShouldReturnSingleInfiniteRange
- uid: ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.InfiniteRange_ShouldReturnSingleEmptyRange
  name: InfiniteRange_ShouldReturnSingleEmptyRange()
  href: api/ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.html#ComplicatedPrimitives_Tests_RangeTests_GetAbsoluteComplement_InfiniteRange_ShouldReturnSingleEmptyRange
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.InfiniteRange_ShouldReturnSingleEmptyRange
  fullName: ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.InfiniteRange_ShouldReturnSingleEmptyRange()
  nameWithType: RangeTests.GetAbsoluteComplement.InfiniteRange_ShouldReturnSingleEmptyRange()
- uid: ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.InfiniteRange_ShouldReturnSingleEmptyRange*
  name: InfiniteRange_ShouldReturnSingleEmptyRange
  href: api/ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.html#ComplicatedPrimitives_Tests_RangeTests_GetAbsoluteComplement_InfiniteRange_ShouldReturnSingleEmptyRange_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.InfiniteRange_ShouldReturnSingleEmptyRange
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.InfiniteRange_ShouldReturnSingleEmptyRange
  nameWithType: RangeTests.GetAbsoluteComplement.InfiniteRange_ShouldReturnSingleEmptyRange
- uid: ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.LeftInfiniteRange_ShouldReturnSingleRightInfiniteRange
  name: LeftInfiniteRange_ShouldReturnSingleRightInfiniteRange()
  href: api/ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.html#ComplicatedPrimitives_Tests_RangeTests_GetAbsoluteComplement_LeftInfiniteRange_ShouldReturnSingleRightInfiniteRange
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.LeftInfiniteRange_ShouldReturnSingleRightInfiniteRange
  fullName: ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.LeftInfiniteRange_ShouldReturnSingleRightInfiniteRange()
  nameWithType: RangeTests.GetAbsoluteComplement.LeftInfiniteRange_ShouldReturnSingleRightInfiniteRange()
- uid: ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.LeftInfiniteRange_ShouldReturnSingleRightInfiniteRange*
  name: LeftInfiniteRange_ShouldReturnSingleRightInfiniteRange
  href: api/ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.html#ComplicatedPrimitives_Tests_RangeTests_GetAbsoluteComplement_LeftInfiniteRange_ShouldReturnSingleRightInfiniteRange_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.LeftInfiniteRange_ShouldReturnSingleRightInfiniteRange
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.LeftInfiniteRange_ShouldReturnSingleRightInfiniteRange
  nameWithType: RangeTests.GetAbsoluteComplement.LeftInfiniteRange_ShouldReturnSingleRightInfiniteRange
- uid: ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.RightInfiniteRange_ShouldReturnSingleLeftInfiniteRange
  name: RightInfiniteRange_ShouldReturnSingleLeftInfiniteRange()
  href: api/ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.html#ComplicatedPrimitives_Tests_RangeTests_GetAbsoluteComplement_RightInfiniteRange_ShouldReturnSingleLeftInfiniteRange
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.RightInfiniteRange_ShouldReturnSingleLeftInfiniteRange
  fullName: ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.RightInfiniteRange_ShouldReturnSingleLeftInfiniteRange()
  nameWithType: RangeTests.GetAbsoluteComplement.RightInfiniteRange_ShouldReturnSingleLeftInfiniteRange()
- uid: ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.RightInfiniteRange_ShouldReturnSingleLeftInfiniteRange*
  name: RightInfiniteRange_ShouldReturnSingleLeftInfiniteRange
  href: api/ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.html#ComplicatedPrimitives_Tests_RangeTests_GetAbsoluteComplement_RightInfiniteRange_ShouldReturnSingleLeftInfiniteRange_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.RightInfiniteRange_ShouldReturnSingleLeftInfiniteRange
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.RightInfiniteRange_ShouldReturnSingleLeftInfiniteRange
  nameWithType: RangeTests.GetAbsoluteComplement.RightInfiniteRange_ShouldReturnSingleLeftInfiniteRange
- uid: ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.ShouldReturnSumOfTwoInfiniteComplements
  name: ShouldReturnSumOfTwoInfiniteComplements()
  href: api/ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.html#ComplicatedPrimitives_Tests_RangeTests_GetAbsoluteComplement_ShouldReturnSumOfTwoInfiniteComplements
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.ShouldReturnSumOfTwoInfiniteComplements
  fullName: ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.ShouldReturnSumOfTwoInfiniteComplements()
  nameWithType: RangeTests.GetAbsoluteComplement.ShouldReturnSumOfTwoInfiniteComplements()
- uid: ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.ShouldReturnSumOfTwoInfiniteComplements*
  name: ShouldReturnSumOfTwoInfiniteComplements
  href: api/ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.html#ComplicatedPrimitives_Tests_RangeTests_GetAbsoluteComplement_ShouldReturnSumOfTwoInfiniteComplements_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.ShouldReturnSumOfTwoInfiniteComplements
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.GetAbsoluteComplement.ShouldReturnSumOfTwoInfiniteComplements
  nameWithType: RangeTests.GetAbsoluteComplement.ShouldReturnSumOfTwoInfiniteComplements
- uid: ComplicatedPrimitives.Tests.RangeTests.Intersect
  name: RangeTests.Intersect
  href: api/ComplicatedPrimitives.Tests.RangeTests.Intersect.html
  commentId: T:ComplicatedPrimitives.Tests.RangeTests.Intersect
  fullName: ComplicatedPrimitives.Tests.RangeTests.Intersect
  nameWithType: RangeTests.Intersect
- uid: ComplicatedPrimitives.Tests.RangeTests.Intersect.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: Intersect(TestFixture)
  href: api/ComplicatedPrimitives.Tests.RangeTests.Intersect.html#ComplicatedPrimitives_Tests_RangeTests_Intersect__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.Intersect.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.RangeTests.Intersect.Intersect(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: RangeTests.Intersect.Intersect(TestFixture)
- uid: ComplicatedPrimitives.Tests.RangeTests.Intersect.#ctor*
  name: Intersect
  href: api/ComplicatedPrimitives.Tests.RangeTests.Intersect.html#ComplicatedPrimitives_Tests_RangeTests_Intersect__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.Intersect.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.Intersect.Intersect
  nameWithType: RangeTests.Intersect.Intersect
- uid: ComplicatedPrimitives.Tests.RangeTests.Intersect.Empty_ShouldReturnEmptyResult
  name: Empty_ShouldReturnEmptyResult()
  href: api/ComplicatedPrimitives.Tests.RangeTests.Intersect.html#ComplicatedPrimitives_Tests_RangeTests_Intersect_Empty_ShouldReturnEmptyResult
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.Intersect.Empty_ShouldReturnEmptyResult
  fullName: ComplicatedPrimitives.Tests.RangeTests.Intersect.Empty_ShouldReturnEmptyResult()
  nameWithType: RangeTests.Intersect.Empty_ShouldReturnEmptyResult()
- uid: ComplicatedPrimitives.Tests.RangeTests.Intersect.Empty_ShouldReturnEmptyResult*
  name: Empty_ShouldReturnEmptyResult
  href: api/ComplicatedPrimitives.Tests.RangeTests.Intersect.html#ComplicatedPrimitives_Tests_RangeTests_Intersect_Empty_ShouldReturnEmptyResult_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.Intersect.Empty_ShouldReturnEmptyResult
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.Intersect.Empty_ShouldReturnEmptyResult
  nameWithType: RangeTests.Intersect.Empty_ShouldReturnEmptyResult
- uid: ComplicatedPrimitives.Tests.RangeTests.Intersect.Infinity_ShouldReturnOther
  name: Infinity_ShouldReturnOther()
  href: api/ComplicatedPrimitives.Tests.RangeTests.Intersect.html#ComplicatedPrimitives_Tests_RangeTests_Intersect_Infinity_ShouldReturnOther
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.Intersect.Infinity_ShouldReturnOther
  fullName: ComplicatedPrimitives.Tests.RangeTests.Intersect.Infinity_ShouldReturnOther()
  nameWithType: RangeTests.Intersect.Infinity_ShouldReturnOther()
- uid: ComplicatedPrimitives.Tests.RangeTests.Intersect.Infinity_ShouldReturnOther*
  name: Infinity_ShouldReturnOther
  href: api/ComplicatedPrimitives.Tests.RangeTests.Intersect.html#ComplicatedPrimitives_Tests_RangeTests_Intersect_Infinity_ShouldReturnOther_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.Intersect.Infinity_ShouldReturnOther
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.Intersect.Infinity_ShouldReturnOther
  nameWithType: RangeTests.Intersect.Infinity_ShouldReturnOther
- uid: ComplicatedPrimitives.Tests.RangeTests.Intersect.SelfIntersection_ShouldBeSelfEqual
  name: SelfIntersection_ShouldBeSelfEqual()
  href: api/ComplicatedPrimitives.Tests.RangeTests.Intersect.html#ComplicatedPrimitives_Tests_RangeTests_Intersect_SelfIntersection_ShouldBeSelfEqual
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.Intersect.SelfIntersection_ShouldBeSelfEqual
  fullName: ComplicatedPrimitives.Tests.RangeTests.Intersect.SelfIntersection_ShouldBeSelfEqual()
  nameWithType: RangeTests.Intersect.SelfIntersection_ShouldBeSelfEqual()
- uid: ComplicatedPrimitives.Tests.RangeTests.Intersect.SelfIntersection_ShouldBeSelfEqual*
  name: SelfIntersection_ShouldBeSelfEqual
  href: api/ComplicatedPrimitives.Tests.RangeTests.Intersect.html#ComplicatedPrimitives_Tests_RangeTests_Intersect_SelfIntersection_ShouldBeSelfEqual_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.Intersect.SelfIntersection_ShouldBeSelfEqual
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.Intersect.SelfIntersection_ShouldBeSelfEqual
  nameWithType: RangeTests.Intersect.SelfIntersection_ShouldBeSelfEqual
- uid: ComplicatedPrimitives.Tests.RangeTests.Intersect.ShouldBeCommutative
  name: ShouldBeCommutative()
  href: api/ComplicatedPrimitives.Tests.RangeTests.Intersect.html#ComplicatedPrimitives_Tests_RangeTests_Intersect_ShouldBeCommutative
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.Intersect.ShouldBeCommutative
  fullName: ComplicatedPrimitives.Tests.RangeTests.Intersect.ShouldBeCommutative()
  nameWithType: RangeTests.Intersect.ShouldBeCommutative()
- uid: ComplicatedPrimitives.Tests.RangeTests.Intersect.ShouldBeCommutative*
  name: ShouldBeCommutative
  href: api/ComplicatedPrimitives.Tests.RangeTests.Intersect.html#ComplicatedPrimitives_Tests_RangeTests_Intersect_ShouldBeCommutative_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.Intersect.ShouldBeCommutative
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.Intersect.ShouldBeCommutative
  nameWithType: RangeTests.Intersect.ShouldBeCommutative
- uid: ComplicatedPrimitives.Tests.RangeTests.Intersect.ShouldReturnExpectedResult
  name: ShouldReturnExpectedResult()
  href: api/ComplicatedPrimitives.Tests.RangeTests.Intersect.html#ComplicatedPrimitives_Tests_RangeTests_Intersect_ShouldReturnExpectedResult
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.Intersect.ShouldReturnExpectedResult
  fullName: ComplicatedPrimitives.Tests.RangeTests.Intersect.ShouldReturnExpectedResult()
  nameWithType: RangeTests.Intersect.ShouldReturnExpectedResult()
- uid: ComplicatedPrimitives.Tests.RangeTests.Intersect.ShouldReturnExpectedResult*
  name: ShouldReturnExpectedResult
  href: api/ComplicatedPrimitives.Tests.RangeTests.Intersect.html#ComplicatedPrimitives_Tests_RangeTests_Intersect_ShouldReturnExpectedResult_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.Intersect.ShouldReturnExpectedResult
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.Intersect.ShouldReturnExpectedResult
  nameWithType: RangeTests.Intersect.ShouldReturnExpectedResult
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf
  name: RangeTests.IsProperSubsetOf
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.html
  commentId: T:ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf
  nameWithType: RangeTests.IsProperSubsetOf
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: IsProperSubsetOf(TestFixture)
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsProperSubsetOf__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.IsProperSubsetOf(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: RangeTests.IsProperSubsetOf.IsProperSubsetOf(TestFixture)
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.#ctor*
  name: IsProperSubsetOf
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsProperSubsetOf__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.IsProperSubsetOf
  nameWithType: RangeTests.IsProperSubsetOf.IsProperSubsetOf
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.EmptyRange_ShouldBeProperSubsetOfNonEmptyRange
  name: EmptyRange_ShouldBeProperSubsetOfNonEmptyRange()
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsProperSubsetOf_EmptyRange_ShouldBeProperSubsetOfNonEmptyRange
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.EmptyRange_ShouldBeProperSubsetOfNonEmptyRange
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.EmptyRange_ShouldBeProperSubsetOfNonEmptyRange()
  nameWithType: RangeTests.IsProperSubsetOf.EmptyRange_ShouldBeProperSubsetOfNonEmptyRange()
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.EmptyRange_ShouldBeProperSubsetOfNonEmptyRange*
  name: EmptyRange_ShouldBeProperSubsetOfNonEmptyRange
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsProperSubsetOf_EmptyRange_ShouldBeProperSubsetOfNonEmptyRange_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.EmptyRange_ShouldBeProperSubsetOfNonEmptyRange
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.EmptyRange_ShouldBeProperSubsetOfNonEmptyRange
  nameWithType: RangeTests.IsProperSubsetOf.EmptyRange_ShouldBeProperSubsetOfNonEmptyRange
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.EmptyRange_ShouldNotBeProperSubsetOfItself
  name: EmptyRange_ShouldNotBeProperSubsetOfItself()
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsProperSubsetOf_EmptyRange_ShouldNotBeProperSubsetOfItself
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.EmptyRange_ShouldNotBeProperSubsetOfItself
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.EmptyRange_ShouldNotBeProperSubsetOfItself()
  nameWithType: RangeTests.IsProperSubsetOf.EmptyRange_ShouldNotBeProperSubsetOfItself()
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.EmptyRange_ShouldNotBeProperSubsetOfItself*
  name: EmptyRange_ShouldNotBeProperSubsetOfItself
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsProperSubsetOf_EmptyRange_ShouldNotBeProperSubsetOfItself_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.EmptyRange_ShouldNotBeProperSubsetOfItself
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.EmptyRange_ShouldNotBeProperSubsetOfItself
  nameWithType: RangeTests.IsProperSubsetOf.EmptyRange_ShouldNotBeProperSubsetOfItself
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.InfiniteRange_ShouldBeProperSubsetOfItself
  name: InfiniteRange_ShouldBeProperSubsetOfItself()
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsProperSubsetOf_InfiniteRange_ShouldBeProperSubsetOfItself
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.InfiniteRange_ShouldBeProperSubsetOfItself
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.InfiniteRange_ShouldBeProperSubsetOfItself()
  nameWithType: RangeTests.IsProperSubsetOf.InfiniteRange_ShouldBeProperSubsetOfItself()
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.InfiniteRange_ShouldBeProperSubsetOfItself*
  name: InfiniteRange_ShouldBeProperSubsetOfItself
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsProperSubsetOf_InfiniteRange_ShouldBeProperSubsetOfItself_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.InfiniteRange_ShouldBeProperSubsetOfItself
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.InfiniteRange_ShouldBeProperSubsetOfItself
  nameWithType: RangeTests.IsProperSubsetOf.InfiniteRange_ShouldBeProperSubsetOfItself
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.InfiniteRange_ShouldNotBeProperSubsetOfMaximumRange
  name: InfiniteRange_ShouldNotBeProperSubsetOfMaximumRange()
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsProperSubsetOf_InfiniteRange_ShouldNotBeProperSubsetOfMaximumRange
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.InfiniteRange_ShouldNotBeProperSubsetOfMaximumRange
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.InfiniteRange_ShouldNotBeProperSubsetOfMaximumRange()
  nameWithType: RangeTests.IsProperSubsetOf.InfiniteRange_ShouldNotBeProperSubsetOfMaximumRange()
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.InfiniteRange_ShouldNotBeProperSubsetOfMaximumRange*
  name: InfiniteRange_ShouldNotBeProperSubsetOfMaximumRange
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsProperSubsetOf_InfiniteRange_ShouldNotBeProperSubsetOfMaximumRange_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.InfiniteRange_ShouldNotBeProperSubsetOfMaximumRange
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.InfiniteRange_ShouldNotBeProperSubsetOfMaximumRange
  nameWithType: RangeTests.IsProperSubsetOf.InfiniteRange_ShouldNotBeProperSubsetOfMaximumRange
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.NonEmptyRange_ShouldNotBeProperSubsetOfEmptyRange
  name: NonEmptyRange_ShouldNotBeProperSubsetOfEmptyRange()
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsProperSubsetOf_NonEmptyRange_ShouldNotBeProperSubsetOfEmptyRange
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.NonEmptyRange_ShouldNotBeProperSubsetOfEmptyRange
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.NonEmptyRange_ShouldNotBeProperSubsetOfEmptyRange()
  nameWithType: RangeTests.IsProperSubsetOf.NonEmptyRange_ShouldNotBeProperSubsetOfEmptyRange()
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.NonEmptyRange_ShouldNotBeProperSubsetOfEmptyRange*
  name: NonEmptyRange_ShouldNotBeProperSubsetOfEmptyRange
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsProperSubsetOf_NonEmptyRange_ShouldNotBeProperSubsetOfEmptyRange_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.NonEmptyRange_ShouldNotBeProperSubsetOfEmptyRange
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.NonEmptyRange_ShouldNotBeProperSubsetOfEmptyRange
  nameWithType: RangeTests.IsProperSubsetOf.NonEmptyRange_ShouldNotBeProperSubsetOfEmptyRange
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.ShouldReturnExpectedResult(System.Double,System.Double,System.Double,System.Double,System.Boolean,System.String)
  name: ShouldReturnExpectedResult(Double, Double, Double, Double, Boolean, String)
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsProperSubsetOf_ShouldReturnExpectedResult_System_Double_System_Double_System_Double_System_Double_System_Boolean_System_String_
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.ShouldReturnExpectedResult(System.Double,System.Double,System.Double,System.Double,System.Boolean,System.String)
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.ShouldReturnExpectedResult(System.Double, System.Double, System.Double, System.Double, System.Boolean, System.String)
  nameWithType: RangeTests.IsProperSubsetOf.ShouldReturnExpectedResult(Double, Double, Double, Double, Boolean, String)
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.ShouldReturnExpectedResult*
  name: ShouldReturnExpectedResult
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsProperSubsetOf_ShouldReturnExpectedResult_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.ShouldReturnExpectedResult
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSubsetOf.ShouldReturnExpectedResult
  nameWithType: RangeTests.IsProperSubsetOf.ShouldReturnExpectedResult
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf
  name: RangeTests.IsProperSupersetOf
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.html
  commentId: T:ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf
  nameWithType: RangeTests.IsProperSupersetOf
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: IsProperSupersetOf(TestFixture)
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsProperSupersetOf__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.IsProperSupersetOf(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: RangeTests.IsProperSupersetOf.IsProperSupersetOf(TestFixture)
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.#ctor*
  name: IsProperSupersetOf
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsProperSupersetOf__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.IsProperSupersetOf
  nameWithType: RangeTests.IsProperSupersetOf.IsProperSupersetOf
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.EmptyRange_ShouldNotBeProperSupersetOfItself
  name: EmptyRange_ShouldNotBeProperSupersetOfItself()
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsProperSupersetOf_EmptyRange_ShouldNotBeProperSupersetOfItself
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.EmptyRange_ShouldNotBeProperSupersetOfItself
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.EmptyRange_ShouldNotBeProperSupersetOfItself()
  nameWithType: RangeTests.IsProperSupersetOf.EmptyRange_ShouldNotBeProperSupersetOfItself()
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.EmptyRange_ShouldNotBeProperSupersetOfItself*
  name: EmptyRange_ShouldNotBeProperSupersetOfItself
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsProperSupersetOf_EmptyRange_ShouldNotBeProperSupersetOfItself_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.EmptyRange_ShouldNotBeProperSupersetOfItself
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.EmptyRange_ShouldNotBeProperSupersetOfItself
  nameWithType: RangeTests.IsProperSupersetOf.EmptyRange_ShouldNotBeProperSupersetOfItself
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.EmptyRange_ShouldNotBeProperSupersetOfNonEmptyRange
  name: EmptyRange_ShouldNotBeProperSupersetOfNonEmptyRange()
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsProperSupersetOf_EmptyRange_ShouldNotBeProperSupersetOfNonEmptyRange
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.EmptyRange_ShouldNotBeProperSupersetOfNonEmptyRange
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.EmptyRange_ShouldNotBeProperSupersetOfNonEmptyRange()
  nameWithType: RangeTests.IsProperSupersetOf.EmptyRange_ShouldNotBeProperSupersetOfNonEmptyRange()
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.EmptyRange_ShouldNotBeProperSupersetOfNonEmptyRange*
  name: EmptyRange_ShouldNotBeProperSupersetOfNonEmptyRange
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsProperSupersetOf_EmptyRange_ShouldNotBeProperSupersetOfNonEmptyRange_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.EmptyRange_ShouldNotBeProperSupersetOfNonEmptyRange
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.EmptyRange_ShouldNotBeProperSupersetOfNonEmptyRange
  nameWithType: RangeTests.IsProperSupersetOf.EmptyRange_ShouldNotBeProperSupersetOfNonEmptyRange
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.InfiniteRange_ShouldBeProperSupersetOfItself
  name: InfiniteRange_ShouldBeProperSupersetOfItself()
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsProperSupersetOf_InfiniteRange_ShouldBeProperSupersetOfItself
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.InfiniteRange_ShouldBeProperSupersetOfItself
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.InfiniteRange_ShouldBeProperSupersetOfItself()
  nameWithType: RangeTests.IsProperSupersetOf.InfiniteRange_ShouldBeProperSupersetOfItself()
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.InfiniteRange_ShouldBeProperSupersetOfItself*
  name: InfiniteRange_ShouldBeProperSupersetOfItself
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsProperSupersetOf_InfiniteRange_ShouldBeProperSupersetOfItself_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.InfiniteRange_ShouldBeProperSupersetOfItself
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.InfiniteRange_ShouldBeProperSupersetOfItself
  nameWithType: RangeTests.IsProperSupersetOf.InfiniteRange_ShouldBeProperSupersetOfItself
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.InfiniteRange_ShouldBeProperSupersetOfMaximumRange
  name: InfiniteRange_ShouldBeProperSupersetOfMaximumRange()
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsProperSupersetOf_InfiniteRange_ShouldBeProperSupersetOfMaximumRange
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.InfiniteRange_ShouldBeProperSupersetOfMaximumRange
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.InfiniteRange_ShouldBeProperSupersetOfMaximumRange()
  nameWithType: RangeTests.IsProperSupersetOf.InfiniteRange_ShouldBeProperSupersetOfMaximumRange()
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.InfiniteRange_ShouldBeProperSupersetOfMaximumRange*
  name: InfiniteRange_ShouldBeProperSupersetOfMaximumRange
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsProperSupersetOf_InfiniteRange_ShouldBeProperSupersetOfMaximumRange_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.InfiniteRange_ShouldBeProperSupersetOfMaximumRange
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.InfiniteRange_ShouldBeProperSupersetOfMaximumRange
  nameWithType: RangeTests.IsProperSupersetOf.InfiniteRange_ShouldBeProperSupersetOfMaximumRange
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.NonEmptyRange_ShouldBeProperSupersetOfEmptyRange
  name: NonEmptyRange_ShouldBeProperSupersetOfEmptyRange()
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsProperSupersetOf_NonEmptyRange_ShouldBeProperSupersetOfEmptyRange
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.NonEmptyRange_ShouldBeProperSupersetOfEmptyRange
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.NonEmptyRange_ShouldBeProperSupersetOfEmptyRange()
  nameWithType: RangeTests.IsProperSupersetOf.NonEmptyRange_ShouldBeProperSupersetOfEmptyRange()
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.NonEmptyRange_ShouldBeProperSupersetOfEmptyRange*
  name: NonEmptyRange_ShouldBeProperSupersetOfEmptyRange
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsProperSupersetOf_NonEmptyRange_ShouldBeProperSupersetOfEmptyRange_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.NonEmptyRange_ShouldBeProperSupersetOfEmptyRange
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.NonEmptyRange_ShouldBeProperSupersetOfEmptyRange
  nameWithType: RangeTests.IsProperSupersetOf.NonEmptyRange_ShouldBeProperSupersetOfEmptyRange
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.ShouldReturnExpectedResult(System.Double,System.Double,System.Double,System.Double,System.Boolean,System.String)
  name: ShouldReturnExpectedResult(Double, Double, Double, Double, Boolean, String)
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsProperSupersetOf_ShouldReturnExpectedResult_System_Double_System_Double_System_Double_System_Double_System_Boolean_System_String_
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.ShouldReturnExpectedResult(System.Double,System.Double,System.Double,System.Double,System.Boolean,System.String)
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.ShouldReturnExpectedResult(System.Double, System.Double, System.Double, System.Double, System.Boolean, System.String)
  nameWithType: RangeTests.IsProperSupersetOf.ShouldReturnExpectedResult(Double, Double, Double, Double, Boolean, String)
- uid: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.ShouldReturnExpectedResult*
  name: ShouldReturnExpectedResult
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsProperSupersetOf_ShouldReturnExpectedResult_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.ShouldReturnExpectedResult
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsProperSupersetOf.ShouldReturnExpectedResult
  nameWithType: RangeTests.IsProperSupersetOf.ShouldReturnExpectedResult
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf
  name: RangeTests.IsSubsetOf
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.html
  commentId: T:ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf
  nameWithType: RangeTests.IsSubsetOf
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: IsSubsetOf(TestFixture)
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsSubsetOf__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.IsSubsetOf(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: RangeTests.IsSubsetOf.IsSubsetOf(TestFixture)
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.#ctor*
  name: IsSubsetOf
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsSubsetOf__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.IsSubsetOf
  nameWithType: RangeTests.IsSubsetOf.IsSubsetOf
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.EmptyRange_ShouldBeSubsetOfItself
  name: EmptyRange_ShouldBeSubsetOfItself()
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsSubsetOf_EmptyRange_ShouldBeSubsetOfItself
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.EmptyRange_ShouldBeSubsetOfItself
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.EmptyRange_ShouldBeSubsetOfItself()
  nameWithType: RangeTests.IsSubsetOf.EmptyRange_ShouldBeSubsetOfItself()
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.EmptyRange_ShouldBeSubsetOfItself*
  name: EmptyRange_ShouldBeSubsetOfItself
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsSubsetOf_EmptyRange_ShouldBeSubsetOfItself_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.EmptyRange_ShouldBeSubsetOfItself
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.EmptyRange_ShouldBeSubsetOfItself
  nameWithType: RangeTests.IsSubsetOf.EmptyRange_ShouldBeSubsetOfItself
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.EmptyRange_ShouldBeSubsetOfNonEmptyRange
  name: EmptyRange_ShouldBeSubsetOfNonEmptyRange()
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsSubsetOf_EmptyRange_ShouldBeSubsetOfNonEmptyRange
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.EmptyRange_ShouldBeSubsetOfNonEmptyRange
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.EmptyRange_ShouldBeSubsetOfNonEmptyRange()
  nameWithType: RangeTests.IsSubsetOf.EmptyRange_ShouldBeSubsetOfNonEmptyRange()
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.EmptyRange_ShouldBeSubsetOfNonEmptyRange*
  name: EmptyRange_ShouldBeSubsetOfNonEmptyRange
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsSubsetOf_EmptyRange_ShouldBeSubsetOfNonEmptyRange_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.EmptyRange_ShouldBeSubsetOfNonEmptyRange
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.EmptyRange_ShouldBeSubsetOfNonEmptyRange
  nameWithType: RangeTests.IsSubsetOf.EmptyRange_ShouldBeSubsetOfNonEmptyRange
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.InfiniteRange_ShouldBeSubsetOfItself
  name: InfiniteRange_ShouldBeSubsetOfItself()
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsSubsetOf_InfiniteRange_ShouldBeSubsetOfItself
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.InfiniteRange_ShouldBeSubsetOfItself
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.InfiniteRange_ShouldBeSubsetOfItself()
  nameWithType: RangeTests.IsSubsetOf.InfiniteRange_ShouldBeSubsetOfItself()
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.InfiniteRange_ShouldBeSubsetOfItself*
  name: InfiniteRange_ShouldBeSubsetOfItself
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsSubsetOf_InfiniteRange_ShouldBeSubsetOfItself_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.InfiniteRange_ShouldBeSubsetOfItself
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.InfiniteRange_ShouldBeSubsetOfItself
  nameWithType: RangeTests.IsSubsetOf.InfiniteRange_ShouldBeSubsetOfItself
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.InfiniteRange_ShouldNotBeSubsetOfMaximumRange
  name: InfiniteRange_ShouldNotBeSubsetOfMaximumRange()
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsSubsetOf_InfiniteRange_ShouldNotBeSubsetOfMaximumRange
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.InfiniteRange_ShouldNotBeSubsetOfMaximumRange
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.InfiniteRange_ShouldNotBeSubsetOfMaximumRange()
  nameWithType: RangeTests.IsSubsetOf.InfiniteRange_ShouldNotBeSubsetOfMaximumRange()
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.InfiniteRange_ShouldNotBeSubsetOfMaximumRange*
  name: InfiniteRange_ShouldNotBeSubsetOfMaximumRange
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsSubsetOf_InfiniteRange_ShouldNotBeSubsetOfMaximumRange_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.InfiniteRange_ShouldNotBeSubsetOfMaximumRange
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.InfiniteRange_ShouldNotBeSubsetOfMaximumRange
  nameWithType: RangeTests.IsSubsetOf.InfiniteRange_ShouldNotBeSubsetOfMaximumRange
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.NonEmptyRange_ShouldNotBeSubsetOfEmptyRange
  name: NonEmptyRange_ShouldNotBeSubsetOfEmptyRange()
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsSubsetOf_NonEmptyRange_ShouldNotBeSubsetOfEmptyRange
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.NonEmptyRange_ShouldNotBeSubsetOfEmptyRange
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.NonEmptyRange_ShouldNotBeSubsetOfEmptyRange()
  nameWithType: RangeTests.IsSubsetOf.NonEmptyRange_ShouldNotBeSubsetOfEmptyRange()
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.NonEmptyRange_ShouldNotBeSubsetOfEmptyRange*
  name: NonEmptyRange_ShouldNotBeSubsetOfEmptyRange
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsSubsetOf_NonEmptyRange_ShouldNotBeSubsetOfEmptyRange_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.NonEmptyRange_ShouldNotBeSubsetOfEmptyRange
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.NonEmptyRange_ShouldNotBeSubsetOfEmptyRange
  nameWithType: RangeTests.IsSubsetOf.NonEmptyRange_ShouldNotBeSubsetOfEmptyRange
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.ShouldReturnExpectedResult(System.Double,System.Double,System.Double,System.Double,System.Boolean,System.String)
  name: ShouldReturnExpectedResult(Double, Double, Double, Double, Boolean, String)
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsSubsetOf_ShouldReturnExpectedResult_System_Double_System_Double_System_Double_System_Double_System_Boolean_System_String_
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.ShouldReturnExpectedResult(System.Double,System.Double,System.Double,System.Double,System.Boolean,System.String)
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.ShouldReturnExpectedResult(System.Double, System.Double, System.Double, System.Double, System.Boolean, System.String)
  nameWithType: RangeTests.IsSubsetOf.ShouldReturnExpectedResult(Double, Double, Double, Double, Boolean, String)
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.ShouldReturnExpectedResult*
  name: ShouldReturnExpectedResult
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsSubsetOf_ShouldReturnExpectedResult_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.ShouldReturnExpectedResult
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSubsetOf.ShouldReturnExpectedResult
  nameWithType: RangeTests.IsSubsetOf.ShouldReturnExpectedResult
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf
  name: RangeTests.IsSupersetOf
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.html
  commentId: T:ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf
  nameWithType: RangeTests.IsSupersetOf
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: IsSupersetOf(TestFixture)
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsSupersetOf__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.IsSupersetOf(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: RangeTests.IsSupersetOf.IsSupersetOf(TestFixture)
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.#ctor*
  name: IsSupersetOf
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsSupersetOf__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.IsSupersetOf
  nameWithType: RangeTests.IsSupersetOf.IsSupersetOf
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.EmptyRange_ShouldBeSupersetOfItself
  name: EmptyRange_ShouldBeSupersetOfItself()
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsSupersetOf_EmptyRange_ShouldBeSupersetOfItself
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.EmptyRange_ShouldBeSupersetOfItself
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.EmptyRange_ShouldBeSupersetOfItself()
  nameWithType: RangeTests.IsSupersetOf.EmptyRange_ShouldBeSupersetOfItself()
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.EmptyRange_ShouldBeSupersetOfItself*
  name: EmptyRange_ShouldBeSupersetOfItself
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsSupersetOf_EmptyRange_ShouldBeSupersetOfItself_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.EmptyRange_ShouldBeSupersetOfItself
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.EmptyRange_ShouldBeSupersetOfItself
  nameWithType: RangeTests.IsSupersetOf.EmptyRange_ShouldBeSupersetOfItself
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.EmptyRange_ShouldNotBeSupersetOfNonEmptyRange
  name: EmptyRange_ShouldNotBeSupersetOfNonEmptyRange()
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsSupersetOf_EmptyRange_ShouldNotBeSupersetOfNonEmptyRange
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.EmptyRange_ShouldNotBeSupersetOfNonEmptyRange
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.EmptyRange_ShouldNotBeSupersetOfNonEmptyRange()
  nameWithType: RangeTests.IsSupersetOf.EmptyRange_ShouldNotBeSupersetOfNonEmptyRange()
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.EmptyRange_ShouldNotBeSupersetOfNonEmptyRange*
  name: EmptyRange_ShouldNotBeSupersetOfNonEmptyRange
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsSupersetOf_EmptyRange_ShouldNotBeSupersetOfNonEmptyRange_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.EmptyRange_ShouldNotBeSupersetOfNonEmptyRange
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.EmptyRange_ShouldNotBeSupersetOfNonEmptyRange
  nameWithType: RangeTests.IsSupersetOf.EmptyRange_ShouldNotBeSupersetOfNonEmptyRange
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.InfiniteRange_ShouldBeSupersetOfItself
  name: InfiniteRange_ShouldBeSupersetOfItself()
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsSupersetOf_InfiniteRange_ShouldBeSupersetOfItself
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.InfiniteRange_ShouldBeSupersetOfItself
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.InfiniteRange_ShouldBeSupersetOfItself()
  nameWithType: RangeTests.IsSupersetOf.InfiniteRange_ShouldBeSupersetOfItself()
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.InfiniteRange_ShouldBeSupersetOfItself*
  name: InfiniteRange_ShouldBeSupersetOfItself
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsSupersetOf_InfiniteRange_ShouldBeSupersetOfItself_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.InfiniteRange_ShouldBeSupersetOfItself
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.InfiniteRange_ShouldBeSupersetOfItself
  nameWithType: RangeTests.IsSupersetOf.InfiniteRange_ShouldBeSupersetOfItself
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.InfiniteRange_ShouldBeSupersetOfMaximumRange
  name: InfiniteRange_ShouldBeSupersetOfMaximumRange()
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsSupersetOf_InfiniteRange_ShouldBeSupersetOfMaximumRange
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.InfiniteRange_ShouldBeSupersetOfMaximumRange
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.InfiniteRange_ShouldBeSupersetOfMaximumRange()
  nameWithType: RangeTests.IsSupersetOf.InfiniteRange_ShouldBeSupersetOfMaximumRange()
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.InfiniteRange_ShouldBeSupersetOfMaximumRange*
  name: InfiniteRange_ShouldBeSupersetOfMaximumRange
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsSupersetOf_InfiniteRange_ShouldBeSupersetOfMaximumRange_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.InfiniteRange_ShouldBeSupersetOfMaximumRange
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.InfiniteRange_ShouldBeSupersetOfMaximumRange
  nameWithType: RangeTests.IsSupersetOf.InfiniteRange_ShouldBeSupersetOfMaximumRange
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.NonEmptyRange_ShouldBeSupersetOfEmptyRange
  name: NonEmptyRange_ShouldBeSupersetOfEmptyRange()
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsSupersetOf_NonEmptyRange_ShouldBeSupersetOfEmptyRange
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.NonEmptyRange_ShouldBeSupersetOfEmptyRange
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.NonEmptyRange_ShouldBeSupersetOfEmptyRange()
  nameWithType: RangeTests.IsSupersetOf.NonEmptyRange_ShouldBeSupersetOfEmptyRange()
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.NonEmptyRange_ShouldBeSupersetOfEmptyRange*
  name: NonEmptyRange_ShouldBeSupersetOfEmptyRange
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsSupersetOf_NonEmptyRange_ShouldBeSupersetOfEmptyRange_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.NonEmptyRange_ShouldBeSupersetOfEmptyRange
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.NonEmptyRange_ShouldBeSupersetOfEmptyRange
  nameWithType: RangeTests.IsSupersetOf.NonEmptyRange_ShouldBeSupersetOfEmptyRange
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.ShouldReturnExpectedResult(System.Double,System.Double,System.Double,System.Double,System.Boolean,System.String)
  name: ShouldReturnExpectedResult(Double, Double, Double, Double, Boolean, String)
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsSupersetOf_ShouldReturnExpectedResult_System_Double_System_Double_System_Double_System_Double_System_Boolean_System_String_
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.ShouldReturnExpectedResult(System.Double,System.Double,System.Double,System.Double,System.Boolean,System.String)
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.ShouldReturnExpectedResult(System.Double, System.Double, System.Double, System.Double, System.Boolean, System.String)
  nameWithType: RangeTests.IsSupersetOf.ShouldReturnExpectedResult(Double, Double, Double, Double, Boolean, String)
- uid: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.ShouldReturnExpectedResult*
  name: ShouldReturnExpectedResult
  href: api/ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.html#ComplicatedPrimitives_Tests_RangeTests_IsSupersetOf_ShouldReturnExpectedResult_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.ShouldReturnExpectedResult
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.IsSupersetOf.ShouldReturnExpectedResult
  nameWithType: RangeTests.IsSupersetOf.ShouldReturnExpectedResult
- uid: ComplicatedPrimitives.Tests.RangeTests.Map
  name: RangeTests.Map
  href: api/ComplicatedPrimitives.Tests.RangeTests.Map.html
  commentId: T:ComplicatedPrimitives.Tests.RangeTests.Map
  fullName: ComplicatedPrimitives.Tests.RangeTests.Map
  nameWithType: RangeTests.Map
- uid: ComplicatedPrimitives.Tests.RangeTests.Map.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  name: Map(TestFixture)
  href: api/ComplicatedPrimitives.Tests.RangeTests.Map.html#ComplicatedPrimitives_Tests_RangeTests_Map__ctor_ComplicatedPrimitives_TestAbstractions_TestFixture_
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.Map.#ctor(ComplicatedPrimitives.TestAbstractions.TestFixture)
  fullName: ComplicatedPrimitives.Tests.RangeTests.Map.Map(ComplicatedPrimitives.TestAbstractions.TestFixture)
  nameWithType: RangeTests.Map.Map(TestFixture)
- uid: ComplicatedPrimitives.Tests.RangeTests.Map.#ctor*
  name: Map
  href: api/ComplicatedPrimitives.Tests.RangeTests.Map.html#ComplicatedPrimitives_Tests_RangeTests_Map__ctor_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.Map.#ctor
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.Map.Map
  nameWithType: RangeTests.Map.Map
- uid: ComplicatedPrimitives.Tests.RangeTests.Map.Empty_ShouldReturnEmpty
  name: Empty_ShouldReturnEmpty()
  href: api/ComplicatedPrimitives.Tests.RangeTests.Map.html#ComplicatedPrimitives_Tests_RangeTests_Map_Empty_ShouldReturnEmpty
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.Map.Empty_ShouldReturnEmpty
  fullName: ComplicatedPrimitives.Tests.RangeTests.Map.Empty_ShouldReturnEmpty()
  nameWithType: RangeTests.Map.Empty_ShouldReturnEmpty()
- uid: ComplicatedPrimitives.Tests.RangeTests.Map.Empty_ShouldReturnEmpty*
  name: Empty_ShouldReturnEmpty
  href: api/ComplicatedPrimitives.Tests.RangeTests.Map.html#ComplicatedPrimitives_Tests_RangeTests_Map_Empty_ShouldReturnEmpty_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.Map.Empty_ShouldReturnEmpty
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.Map.Empty_ShouldReturnEmpty
  nameWithType: RangeTests.Map.Empty_ShouldReturnEmpty
- uid: ComplicatedPrimitives.Tests.RangeTests.Map.Infinite_ShouldReturnInfinite
  name: Infinite_ShouldReturnInfinite()
  href: api/ComplicatedPrimitives.Tests.RangeTests.Map.html#ComplicatedPrimitives_Tests_RangeTests_Map_Infinite_ShouldReturnInfinite
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.Map.Infinite_ShouldReturnInfinite
  fullName: ComplicatedPrimitives.Tests.RangeTests.Map.Infinite_ShouldReturnInfinite()
  nameWithType: RangeTests.Map.Infinite_ShouldReturnInfinite()
- uid: ComplicatedPrimitives.Tests.RangeTests.Map.Infinite_ShouldReturnInfinite*
  name: Infinite_ShouldReturnInfinite
  href: api/ComplicatedPrimitives.Tests.RangeTests.Map.html#ComplicatedPrimitives_Tests_RangeTests_Map_Infinite_ShouldReturnInfinite_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.Map.Infinite_ShouldReturnInfinite
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.Map.Infinite_ShouldReturnInfinite
  nameWithType: RangeTests.Map.Infinite_ShouldReturnInfinite
- uid: ComplicatedPrimitives.Tests.RangeTests.Map.ShouldMapValue
  name: ShouldMapValue()
  href: api/ComplicatedPrimitives.Tests.RangeTests.Map.html#ComplicatedPrimitives_Tests_RangeTests_Map_ShouldMapValue
  commentId: M:ComplicatedPrimitives.Tests.RangeTests.Map.ShouldMapValue
  fullName: ComplicatedPrimitives.Tests.RangeTests.Map.ShouldMapValue()
  nameWithType: RangeTests.Map.ShouldMapValue()
- uid: ComplicatedPrimitives.Tests.RangeTests.Map.ShouldMapValue*
  name: ShouldMapValue
  href: api/ComplicatedPrimitives.Tests.RangeTests.Map.html#ComplicatedPrimitives_Tests_RangeTests_Map_ShouldMapValue_
  commentId: Overload:ComplicatedPrimitives.Tests.RangeTests.Map.ShouldMapValue
  isSpec: "True"
  fullName: ComplicatedPrimitives.Tests.RangeTests.Map.ShouldMapValue
  nameWithType: RangeTests.Map.ShouldMapValue
